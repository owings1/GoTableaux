start with a set of branches

A	B	C	D	E
------------------
0	0	0	0	0
1	1	1	1	1
2	2	2	2	2
3	3	3	3	3
4	4	5	5	20
6	6	7	16	21
8	8	9	17	22
10	11	12
13	14	15
18
19

get nodes common to all

0
1
2
3


structure->nodes = array( 0 => 0, 1, 2, 3 );

remove nodes from each branch

A	B	C	D	E
------------------
4	4	5	5	20
6	6	7	16	21
8	8	9	17	22
10	11	12
13	14	15
18
19


get a branch

A
--
4
6
8
10
13
18
19

get first node

4

get branches that have that node

A	B
------
4	4
6	6
8	8
10	11
13	14
18
19

element[0][splits][0] = A, B

remove branches from tableau

C	D	E
----------
5	5	20
7	16	21
9	17	22
12
15
18
19

tableau is non empty, so get a branch

C
--
5
7
9
12
15
18
19

get first node

5

get branches that have that node

C	D
------
5	5
7	16
9	17
12
15
18
19

element[0][splits][1] = C, D

remove branches from tableau

E
--
20
21
22

tableau is non empty, so get a branch

E
--
20
21
22

get first node

20

get branches that have that node

E
--
20
21
22

element[0][splits][2] = E

remove branches from tableau


()


tableau is empty.

now we have:

element[0][nodes] = 0, 1, 2, 3
element[0][splits][0] = A, B
element[0][splits][1] = C, D
element[0][splits][2] = E


go to splits

element[0][splits][0] (A, B)

find nodes common to all

4
6
8

element[0][splits][0][nodes] = 4, 6, 8

remove them from branches

A	B
------
10	11
13	14
18
19

get a branch 

A

get first node

10

get branches that have that node

A

element[0][splits][0][splits][0] = A

remove branches

non empty, get a branch

B

get first node

11

get branches that have that node

B

element[0][splits][0][splits][1] = B

remove branches

empty

go to splits

element[0][splits][0][splits][0] ( A )

find nodes common to all

10
13
18
19

element[0][splits][0][splits][0][nodes] = 10, 13, 18, 19

remove from branches

()

next split

element[0][splits][0][splits][1] ( B )

find nodes common to all

11
14

element[0][splits][0][splits][1][nodes] = 11, 14

remove from branches

()

next split



