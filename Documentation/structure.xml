<?xml version="1.0" encoding="utf-8"?>
<project version="2.0.0a2" title="GoTableaux">
  <file path="Argument.php" hash="1704e46e669951749ba6b33ba6ab21be" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux" line="28" package="GoTableaux">
      <name>Argument</name>
      <full_name>\GoTableaux\Argument</full_name>
      <extends/>
      <docblock line="24">
        <description><![CDATA[Represents an argument as a set of premises and one conclusion.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="35" package="Default">
        <name>$premises</name>
        <default><![CDATA[array()]]></default>
        <docblock line="30">
          <description><![CDATA[The set of premises. An array of {@link Sentence} objects.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="30" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="42" package="Default">
        <name>$conclusion</name>
        <default><![CDATA[]]></default>
        <docblock line="37">
          <description><![CDATA[The conclusion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="var" description="" type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="37" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="51" package="">
        <name>createWithPremisesAndConclusion</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[Creates an argument with given premises and conclusion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="param" description="The premises of the argument." type="array" variable="$premises">
            <type by_reference="false">array</type>
          </tag>
          <tag line="44" name="param" description="The conclusion of the argument." type="\GoTableaux\Sentence" variable="$conclusion">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="44" name="return" description="The created instance." type="\GoTableaux\Argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$premises</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="51">
          <name>$conclusion</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="63" package="">
        <name>addPremise</name>
        <type>function</type>
        <docblock line="57">
          <description><![CDATA[Adds a premise to the argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="param" description="The premise to add." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="57" name="return" description="Current instance." type="\GoTableaux\Argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="75" package="">
        <name>addPremises</name>
        <type>function</type>
        <docblock line="69">
          <description><![CDATA[Adds multiple premises to the argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="69" name="param" description="The premises as an array of {@link Sentence} objects." type="array" variable="$premises">
            <type by_reference="false">array</type>
          </tag>
          <tag line="69" name="return" description="Current instance." type="\GoTableaux\Argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$premises</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="87" package="">
        <name>getPremises</name>
        <type>function</type>
        <docblock line="82">
          <description><![CDATA[Gets all the premises of the argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="82" name="return" description="Array of {@link Sentence}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="98" package="">
        <name>setConclusion</name>
        <type>function</type>
        <docblock line="92">
          <description><![CDATA[Sets the conclusion of the argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="92" name="param" description="The conclusion." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="92" name="return" description="Current instance." type="\GoTableaux\Argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
        </docblock>
        <argument line="98">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="109" package="">
        <name>getConclusion</name>
        <type>function</type>
        <docblock line="104">
          <description><![CDATA[Gets the conclusion of the argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="104" name="return" description="The conclusion." type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="config.example.php" hash="9c4a4d20bbbed407b13c91354588947f" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
  </file>
  <file path="config.php" hash="e4527422106da91b45c7cebc086a7516" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
  </file>
  <file path="Exception/Loader.php" hash="727ffe15ce3a5646f8abf64d00d00dbd" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Exception" line="28" package="Exceptions">
      <name>Loader</name>
      <full_name>\GoTableaux\Exception\Loader</full_name>
      <extends>\GoTableaux\Exception</extends>
      <docblock line="24">
        <description><![CDATA[Represents a loader exception.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Exceptions"/>
      </docblock>
    </class>
  </file>
  <file path="Exception/Parser.php" hash="8f58c95846a17211e0671a796955a126" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Exception" line="28" package="Exceptions">
      <name>Parser</name>
      <full_name>\GoTableaux\Exception\Parser</full_name>
      <extends>\GoTableaux\Exception</extends>
      <docblock line="24">
        <description><![CDATA[Represents a parsing exception.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Exceptions"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="34" package="Default">
        <name>$position</name>
        <default><![CDATA[0]]></default>
        <docblock line="30">
          <description><![CDATA[Character position of parse error.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="40" package="Default">
        <name>$input</name>
        <default><![CDATA['']]></default>
        <docblock line="36">
          <description><![CDATA[Input string for which error was raised.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux\Exception" line="49" package="">
        <name>createWithOptions</name>
        <type>function</type>
        <docblock line="42">
          <description><![CDATA[Creates an instance with options array.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="param" description="Associative array of options. Possible keys are 'message', 'code', 'previous', 'position', 'input'." type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="42" name="return" description="Created instance." type="\GoTableaux\Exception\Parser">
            <type by_reference="false">\GoTableaux\Exception\Parser</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$options</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux\Exception" line="71" package="">
        <name>createWithMsgInputPos</name>
        <type>function</type>
        <docblock line="63">
          <description><![CDATA[Creates an instance with message, input, and position parameters.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="param" description="The error message." type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="63" name="param" description="The current input string." type="string" variable="$input">
            <type by_reference="false">string</type>
          </tag>
          <tag line="63" name="param" description="The input string offset at which the error occurred." type="integer" variable="$position">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="63" name="return" description="Created instance." type="\GoTableaux\Exception\Parser">
            <type by_reference="false">\GoTableaux\Exception\Parser</type>
          </tag>
        </docblock>
        <argument line="71">
          <name>$message</name>
          <default><![CDATA['']]></default>
          <type/>
        </argument>
        <argument line="71">
          <name>$input</name>
          <default><![CDATA['']]></default>
          <type/>
        </argument>
        <argument line="71">
          <name>$position</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Exception/Proof.php" hash="72debc7b07d39220d2038abe1cc85da4" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Exception" line="28" package="GoTableaux">
      <name>Proof</name>
      <full_name>\GoTableaux\Exception\Proof</full_name>
      <extends>\GoTableaux\Exception</extends>
      <docblock line="24">
        <description><![CDATA[Represents a proof exception.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
    </class>
  </file>
  <file path="Exception/Rule.php" hash="e3914f0f0381ac29ca0fb4789176c3ac" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Exception" line="28" package="Exceptions">
      <name>Rule</name>
      <full_name>\GoTableaux\Exception\Rule</full_name>
      <extends>\GoTableaux\Exception\Tableau</extends>
      <docblock line="24">
        <description><![CDATA[Represents a tableau rule exception.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Exceptions"/>
      </docblock>
    </class>
  </file>
  <file path="Exception/Tableau.php" hash="c3f188363a24469c0accb4bbe42757e1" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Exception" line="28" package="Exceptions">
      <name>Tableau</name>
      <full_name>\GoTableaux\Exception\Tableau</full_name>
      <extends>\GoTableaux\Exception\Proof</extends>
      <docblock line="24">
        <description><![CDATA[Represents a tableau proof exception.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Exceptions"/>
      </docblock>
    </class>
  </file>
  <file path="Exception/Vocabulary.php" hash="c626d09a94f78758101ac41d39fb5384" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Exception" line="28" package="Exceptions">
      <name>Vocabulary</name>
      <full_name>\GoTableaux\Exception\Vocabulary</full_name>
      <extends>\GoTableaux\Exception</extends>
      <docblock line="24">
        <description><![CDATA[Represents a vocabulary exception.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Exceptions"/>
      </docblock>
    </class>
  </file>
  <file path="Exception/Writer.php" hash="8655b789b9fbc31385edbf4aac823246" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Exception" line="28" package="Exceptions">
      <name>Writer</name>
      <full_name>\GoTableaux\Exception\Writer</full_name>
      <extends>\GoTableaux\Exception</extends>
      <docblock line="24">
        <description><![CDATA[Represents a tableau writer exception.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Exceptions"/>
      </docblock>
    </class>
  </file>
  <file path="Exception.php" hash="a502727ad9255f8afbcf49821fdcd255" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux" line="27" package="Exceptions">
      <name>Exception</name>
      <full_name>\GoTableaux\Exception</full_name>
      <extends>\Exception</extends>
      <docblock line="23">
        <description><![CDATA[Represents a program exception.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Exceptions"/>
      </docblock>
    </class>
  </file>
  <file path="Loader.php" hash="19b8bddfbb252a644a5da19a08fdcd3d" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="LoaderException">\GoTableaux\Exception\Loader</namespace-alias>
    <constant namespace="GoTableaux" line="32" package="Default">
      <name>DS</name>
      <value><![CDATA[DIRECTORY_SEPARATOR]]></value>
    </constant>
    <class final="false" abstract="false" namespace="GoTableaux" line="38" package="GoTableaux">
      <name>Loader</name>
      <full_name>\GoTableaux\Loader</full_name>
      <extends/>
      <docblock line="34">
        <description><![CDATA[Loads class files.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="34" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="48" package="">
        <name>loadClass</name>
        <type>function</type>
        <docblock line="40">
          <description><![CDATA[Loads a class file by parsing its namespace.]]></description>
          <long-description><![CDATA[<p>Registered as an autoloader.</p>]]></long-description>
          <tag line="40" name="param" description="The class name to load." type="string" variable="$class">
            <type by_reference="false">string</type>
          </tag>
          <tag line="40" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="48">
          <name>$class</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="61" package="">
        <name>loadConfig</name>
        <type>function</type>
        <docblock line="56">
          <description><![CDATA[Loads the config file.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/BranchRule/Conjunction.php" hash="7fc931160f78d27b1fe9dd6a4a6352cf" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class Conjunction</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/CPL/ProofSystem/BranchRule/Conjunction.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\BranchRule" line="25" package="CPL">
      <name>Conjunction</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\BranchRule\Conjunction</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="CPL"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/BranchRule/Disjunction.php" hash="a7c301e8c50174d5c78c4eed9c2e9893" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class Disjunction</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/CPL/ProofSystem/BranchRule/Disjunction.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\BranchRule" line="25" package="CPL">
      <name>Disjunction</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\BranchRule\Disjunction</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="CPL"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/BranchRule/DoubleNegation.php" hash="e930d3404b39220077142e5494dd825f" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class DoubleNegation</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/CPL/ProofSystem/BranchRule/DoubleNegation.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\BranchRule" line="25" package="CPL">
      <name>DoubleNegation</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\BranchRule\DoubleNegation</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="CPL"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/BranchRule/MaterialBiconditional.php" hash="229ac250ddcfef631788bd7b6ca9f811" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class MaterialBiconditional</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/CPL/ProofSystem/BranchRule/MaterialBiconditional.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\BranchRule" line="25" package="CPL">
      <name>MaterialBiconditional</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\BranchRule\MaterialBiconditional</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="CPL"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/BranchRule/MaterialConditional.php" hash="f5e427d631295633f980fd754d7efd58" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class MaterialConditional</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/CPL/ProofSystem/BranchRule/MaterialConditional.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\BranchRule" line="25" package="CPL">
      <name>MaterialConditional</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\BranchRule\MaterialConditional</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="CPL"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/BranchRule/NegatedConjunction.php" hash="95f917bb587784b2cdcb0c3af7d58c44" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class NegatedConjunction</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/CPL/ProofSystem/BranchRule/NegatedConjunction.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\BranchRule" line="25" package="CPL">
      <name>NegatedConjunction</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\BranchRule\NegatedConjunction</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="CPL"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/BranchRule/NegatedDisjunction.php" hash="ecd40aca7177a5d9f053b7def623e34a" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class NegatedDisjunction</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/CPL/ProofSystem/BranchRule/NegatedDisjunction.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\BranchRule" line="25" package="CPL">
      <name>NegatedDisjunction</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\BranchRule\NegatedDisjunction</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="CPL"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/BranchRule/NegatedMaterialBiconditional.php" hash="2f126f2033c262d16b1744ab9a1f5b05" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class NegatedMaterialBiconditional</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/CPL/ProofSystem/BranchRule/NegatedMaterialBiconditional.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\BranchRule" line="25" package="CPL">
      <name>NegatedMaterialBiconditional</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\BranchRule\NegatedMaterialBiconditional</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="CPL"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/BranchRule/NegatedMaterialConditional.php" hash="de590f35bcfa7a34f75245058528ea63" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class NegatedMaterialConditional</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/CPL/ProofSystem/BranchRule/NegatedMaterialConditional.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\BranchRule" line="25" package="CPL">
      <name>NegatedMaterialConditional</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\BranchRule\NegatedMaterialConditional</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="CPL"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/ClosureRule.php" hash="775308673433da5a7ce160e4c279c988" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="33" code="50010">No DocBlock was found for method doesApply()</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem" line="31" package="CPL">
      <name>ClosureRule</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\ClosureRule</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\ClosureRule</implements>
      <docblock line="27">
        <description><![CDATA[Represents the tableaux closure rule for CPL.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="CPL"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem" line="33" package="">
        <name>doesApply</name>
        <type>function</type>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem.php" hash="cb1b2a66bb4af1c7f5da706d520e9dbf" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $branchRuleClasses</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL" line="28" package="CPL">
      <name>ProofSystem</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Bivalent</extends>
      <docblock line="24">
        <description><![CDATA[Represents the Tableaux system for CPL.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="CPL"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$branchRuleClasses</name>
        <default><![CDATA[array(
		'Conjunction',
		'NegatedConjunction',
		'Disjunction',
		'NegatedDisjunction',
		'MaterialConditional',
		'NegatedMaterialConditional',
		'MaterialBiconditional',
		'NegatedMaterialBiconditional',
		'DoubleNegation'
	)]]></default>
      </property>
    </class>
  </file>
  <file path="Logic/CPL.php" hash="71a8286ff4d62da588bd050475d6c9e3" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $inheritLexiconFrom</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic" line="28" package="CPL">
      <name>CPL</name>
      <full_name>\GoTableaux\Logic\CPL</full_name>
      <extends>\GoTableaux\Logic</extends>
      <docblock line="24">
        <description><![CDATA[Represents Classical Propositional Logic.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="CPL"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$inheritLexiconFrom</name>
        <default><![CDATA['FDE']]></default>
      </property>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/BranchRule/ConjunctionDesignated.php" hash="07e82730d2a6dbc26f8e3f520023bbc9" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class ConjunctionDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/BranchRule/ConjunctionDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="25" package="FDE">
      <name>ConjunctionDesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\BranchRule\ConjunctionDesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="FDE"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/BranchRule/ConjunctionUndesignated.php" hash="c2cd11a22eccabd1fe89e9ad78239dc3" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class ConjunctionUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/BranchRule/ConjunctionUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="25" package="FDE">
      <name>ConjunctionUndesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\BranchRule\ConjunctionUndesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="FDE"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/BranchRule/DisjunctionDesignated.php" hash="8ef8d1b3b599db55edebbdcb89e42911" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class DisjunctionDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/BranchRule/DisjunctionDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="25" package="FDE">
      <name>DisjunctionDesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\BranchRule\DisjunctionDesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="FDE"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/BranchRule/DisjunctionUndesignated.php" hash="c21a6343b9225cc912c259cb55fbf22d" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class DisjunctionUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/BranchRule/DisjunctionUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="25" package="FDE">
      <name>DisjunctionUndesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\BranchRule\DisjunctionUndesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="FDE"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/BranchRule/DoubleNegationDesignated.php" hash="da957bed4e033395a4dfa4a079302532" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class DoubleNegationDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/BranchRule/DoubleNegationDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="25" package="FDE">
      <name>DoubleNegationDesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\BranchRule\DoubleNegationDesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="FDE"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/BranchRule/DoubleNegationUndesignated.php" hash="4b2f8d0e4b6fb58bf764ebb4402470b9" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class DoubleNegationUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/BranchRule/DoubleNegationUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="25" package="FDE">
      <name>DoubleNegationUndesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\BranchRule\DoubleNegationUndesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="FDE"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/BranchRule/MaterialBiconditionalDesignated.php" hash="f6bac584324e9f087fbaf07671231250" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class MaterialBiconditionalDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/BranchRule/MaterialBiconditionalDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="25" package="FDE">
      <name>MaterialBiconditionalDesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\BranchRule\MaterialBiconditionalDesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="FDE"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/BranchRule/MaterialBiconditionalUndesignated.php" hash="aff8151c3416c20b84672fb879e3afcd" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class MaterialBiconditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/BranchRule/MaterialBiconditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="25" package="FDE">
      <name>MaterialBiconditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\BranchRule\MaterialBiconditionalUndesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="FDE"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/BranchRule/MaterialConditionalDesignated.php" hash="740ef7396ec03cd533a54aae28597f38" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class MaterialConditionalDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/BranchRule/MaterialConditionalDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="25" package="FDE">
      <name>MaterialConditionalDesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\BranchRule\MaterialConditionalDesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="FDE"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/BranchRule/MaterialConditionalUndesignated.php" hash="61fd14b7fb60033a566b4b3d916af0cb" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class MaterialConditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/BranchRule/MaterialConditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="25" package="FDE">
      <name>MaterialConditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\BranchRule\MaterialConditionalUndesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="FDE"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/BranchRule/NegatedConjunctionDesignated.php" hash="0095f7d2a3c62d6ceae2cd91936e2f71" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class NegatedConjunctionDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/BranchRule/NegatedConjunctionDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="25" package="FDE">
      <name>NegatedConjunctionDesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\BranchRule\NegatedConjunctionDesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="FDE"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/BranchRule/NegatedConjunctionUndesignated.php" hash="a95f7a6bfe4bec2010706f617e85e7fa" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class NegatedConjunctionUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/BranchRule/NegatedConjunctionUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="25" package="FDE">
      <name>NegatedConjunctionUndesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\BranchRule\NegatedConjunctionUndesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="FDE"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/BranchRule/NegatedDisjunctionDesignated.php" hash="a5d017340302e116b1edc4830a761660" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class NegatedDisjunctionDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/BranchRule/NegatedDisjunctionDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="25" package="FDE">
      <name>NegatedDisjunctionDesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\BranchRule\NegatedDisjunctionDesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="FDE"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/BranchRule/NegatedDisjunctionUndesignated.php" hash="527837216b9eaeb7d62b7071bb9e27cd" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class NegatedDisjunctionUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/BranchRule/NegatedDisjunctionUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="25" package="FDE">
      <name>NegatedDisjunctionUndesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\BranchRule\NegatedDisjunctionUndesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="FDE"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/BranchRule/NegatedMaterialBiconditionalDesignated.php" hash="8e39b03ddccaeec9d97546ebdc7fadb2" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class NegatedMaterialBiconditionalDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/BranchRule/NegatedMaterialBiconditionalDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="25" package="FDE">
      <name>NegatedMaterialBiconditionalDesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\BranchRule\NegatedMaterialBiconditionalDesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="FDE"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/BranchRule/NegatedMaterialBiconditionalUndesignated.php" hash="c8be32330a150b342c11f3f28d6ab545" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class NegatedMaterialBiconditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/BranchRule/NegatedMaterialBiconditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="25" package="FDE">
      <name>NegatedMaterialBiconditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\BranchRule\NegatedMaterialBiconditionalUndesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="FDE"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/BranchRule/NegatedMaterialConditionalDesignated.php" hash="7d13fb84f5c4604814ef887b361b3018" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class NegatedMaterialConditionalDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/BranchRule/NegatedMaterialConditionalDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="25" package="FDE">
      <name>NegatedMaterialConditionalDesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\BranchRule\NegatedMaterialConditionalDesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="FDE"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/BranchRule/NegatedMaterialConditionalUndesignated.php" hash="6188b8c21efac34f07c2e12e281104ff" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class NegatedMaterialConditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/BranchRule/NegatedMaterialConditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="25" package="FDE">
      <name>NegatedMaterialConditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\BranchRule\NegatedMaterialConditionalUndesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="FDE"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/ClosureRule.php" hash="c1d6e132cc0b00fc184903ec525c3f31" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="33" code="50010">No DocBlock was found for method doesApply()</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem" line="31" package="FDE">
      <name>ClosureRule</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\ClosureRule</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\ClosureRule</implements>
      <docblock line="27">
        <description><![CDATA[Represents the tableaux closure rule for FDE.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="FDE"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem" line="33" package="">
        <name>doesApply</name>
        <type>function</type>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem.php" hash="d9e207b61efc070a15c49a6d7bab6a7a" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $branchRuleClasses</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE" line="28" package="FDE">
      <name>ProofSystem</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\ManyValued</extends>
      <docblock line="24">
        <description><![CDATA[Represents the FDE tableaux system.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="FDE"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$branchRuleClasses</name>
        <default><![CDATA[array(
		'ConjunctionDesignated',
		'ConjunctionUndesignated',
		'NegatedConjunctionDesignated',
		'NegatedConjunctionUndesignated',
		'DisjunctionDesignated',
		'DisjunctionUndesignated',
		'NegatedDisjunctionDesignated',
		'NegatedDisjunctionUndesignated',
		'MaterialConditionalDesignated',
		'MaterialConditionalUndesignated',
		'NegatedMaterialConditionalDesignated',
		'NegatedMaterialConditionalUndesignated',
		'MaterialBiconditionalDesignated',
		'MaterialBiconditionalUndesignated',
		'NegatedMaterialBiconditionalDesignated',
		'NegatedMaterialBiconditionalUndesignated',
		'DoubleNegationDesignated',
		'DoubleNegationUndesignated'
	)]]></default>
      </property>
    </class>
  </file>
  <file path="Logic/FDE.php" hash="203c534a44860372efcb2c58055adebb" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $lexicon</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic" line="28" package="FDE">
      <name>FDE</name>
      <full_name>\GoTableaux\Logic\FDE</full_name>
      <extends>\GoTableaux\Logic</extends>
      <docblock line="24">
        <description><![CDATA[Represents First Degree Entailment Logic.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="FDE"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$lexicon</name>
        <default><![CDATA[array(
		'openMarks' 		=> array('('),
		'closeMarks' 		=> array(')'),
		'separators' 		=> array(' '),
		'subscripts' 		=> array('_'),
		'atomicSymbols' 	=> array('A', 'B', 'C', 'D', 'E', 'F'),
		'operators' 	=> array(
			'Negation' => 1,
			'Conjunction' => 2,
			'Disjunction' => 2,
			'Material Conditional' => 2,
			'Material Biconditional' => 2,
		)
	)]]></default>
      </property>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/BranchRule/ConjunctionUndesignated.php" hash="92a77e1d2dd207c5b39b3222000767a7" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class ConjunctionUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/BranchRule/ConjunctionUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\BranchRule" line="25" package="GO">
      <name>ConjunctionUndesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\BranchRule\ConjunctionUndesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="GO"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/BranchRule/DisjunctionUndesignated.php" hash="9ccbefe934b1139f11abd0973548c3b7" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class DisjunctionUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/BranchRule/DisjunctionUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\BranchRule" line="25" package="GO">
      <name>DisjunctionUndesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\BranchRule\DisjunctionUndesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="GO"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/BranchRule/MaterialBiconditionalUndesignated.php" hash="74d264de017c79a008bf72572443e749" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class MaterialBiconditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/BranchRule/MaterialBiconditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\BranchRule" line="25" package="GO">
      <name>MaterialBiconditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\BranchRule\MaterialBiconditionalUndesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="GO"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/BranchRule/MaterialConditionalUndesignated.php" hash="f6547ab3c661d5f8c0da73c1a7046022" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class MaterialConditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/BranchRule/MaterialConditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\BranchRule" line="25" package="GO">
      <name>MaterialConditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\BranchRule\MaterialConditionalUndesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="GO"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/BranchRule/NegatedConjunctionDesignated.php" hash="6c61a4105321cf714e63fef640b20d56" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class NegatedConjunctionDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/BranchRule/NegatedConjunctionDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\BranchRule" line="25" package="GO">
      <name>NegatedConjunctionDesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\BranchRule\NegatedConjunctionDesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="GO"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/BranchRule/NegatedConjunctionUndesignated.php" hash="f332df733051d59595afb00722b510ae" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class NegatedConjunctionUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/BranchRule/NegatedConjunctionUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\BranchRule" line="25" package="GO">
      <name>NegatedConjunctionUndesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\BranchRule\NegatedConjunctionUndesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="GO"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/BranchRule/NegatedDisjunctionDesignated.php" hash="b3ae3e579e4ed93d6c5c79c514f9c982" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class NegatedDisjunctionDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/BranchRule/NegatedDisjunctionDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\BranchRule" line="25" package="GO">
      <name>NegatedDisjunctionDesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\BranchRule\NegatedDisjunctionDesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="GO"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/BranchRule/NegatedDisjunctionUndesignated.php" hash="f05e170ba5acc19b3a5d3bc2ef23243e" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class NegatedDisjunctionUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/BranchRule/NegatedDisjunctionUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\BranchRule" line="25" package="GO">
      <name>NegatedDisjunctionUndesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\BranchRule\NegatedDisjunctionUndesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="GO"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/BranchRule/NegatedMaterialBiconditionalDesignated.php" hash="f427bfedc1f275c7087f4690a0a42cd1" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class NegatedMaterialBiconditionalDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/BranchRule/NegatedMaterialBiconditionalDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\BranchRule" line="25" package="GO">
      <name>NegatedMaterialBiconditionalDesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\BranchRule\NegatedMaterialBiconditionalDesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="GO"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/BranchRule/NegatedMaterialBiconditionalUndesignated.php" hash="86ce16e4a19c6affa1b82fe491dbd8f7" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class NegatedMaterialBiconditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/BranchRule/NegatedMaterialBiconditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\BranchRule" line="25" package="GO">
      <name>NegatedMaterialBiconditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\BranchRule\NegatedMaterialBiconditionalUndesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="GO"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/BranchRule/NegatedMaterialConditionalDesignated.php" hash="4aecf6e026434f43931807de0037fb74" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class NegatedMaterialConditionalDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/BranchRule/NegatedMaterialConditionalDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\BranchRule" line="25" package="GO">
      <name>NegatedMaterialConditionalDesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\BranchRule\NegatedMaterialConditionalDesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="GO"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/BranchRule/NegatedMaterialConditionalUndesignated.php" hash="a96b4bfd19d5dc14cfc1de09c67e550e" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class NegatedMaterialConditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/BranchRule/NegatedMaterialConditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\BranchRule" line="25" package="GO">
      <name>NegatedMaterialConditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\BranchRule\NegatedMaterialConditionalUndesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="GO"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/ClosureRule.php" hash="e964ffa0b0d39ff3f2c8afcf41394cfa" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="33" code="50010">No DocBlock was found for method doesApply()</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem" line="31" package="GO">
      <name>ClosureRule</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\ClosureRule</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\ClosureRule</implements>
      <docblock line="27">
        <description><![CDATA[Represents the tableaux closure rule for GO.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="GO"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem" line="33" package="">
        <name>doesApply</name>
        <type>function</type>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem.php" hash="65b7c3d6a38a89e560d086f8a9ae6e9c" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="31" code="50018">No DocBlock was found for property $branchRuleClasses</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO" line="29" package="GO">
      <name>ProofSystem</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\ManyValued</extends>
      <docblock line="24">
        <description><![CDATA[Represents the Tableaux system for GO.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GO"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="31" package="Default">
        <name>$branchRuleClasses</name>
        <default><![CDATA[array(
		'FDE/ConjunctionDesignated',
		'ConjunctionUndesignated',
		'NegatedConjunctionDesignated',
		'NegatedConjunctionUndesignated',
		'FDE/DisjunctionDesignated',
		'DisjunctionUndesignated',
		'NegatedDisjunctionDesignated',
		'NegatedDisjunctionUndesignated',
		'FDE/MaterialConditionalDesignated',
		'MaterialConditionalUndesignated',
		'NegatedMaterialConditionalDesignated',
		'NegatedMaterialConditionalUndesignated',
		'FDE/MaterialBiconditionalDesignated',
		'MaterialBiconditionalUndesignated',
		'NegatedMaterialBiconditionalDesignated',
		'NegatedMaterialBiconditionalUndesignated',
		'FDE/DoubleNegationDesignated',
		'FDE/DoubleNegationUndesignated'
	)]]></default>
      </property>
    </class>
  </file>
  <file path="Logic/GO.php" hash="21c831ede64aa3cfc08c0f79e26ede00" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $inheritLexiconFrom</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic" line="28" package="GO">
      <name>GO</name>
      <full_name>\GoTableaux\Logic\GO</full_name>
      <extends>\GoTableaux\Logic</extends>
      <docblock line="24">
        <description><![CDATA[Represents GO 3-valued Propositional Logic.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GO"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$inheritLexiconFrom</name>
        <default><![CDATA['FDE']]></default>
      </property>
    </class>
  </file>
  <file path="Logic/LP/ProofSystem/ClosureRule.php" hash="10bc9925b93110c271200a3ca3fca825" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="33" code="50010">No DocBlock was found for method doesApply()</error>
    </parse_markers>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\LP\ProofSystem" line="31" package="LP">
      <name>ClosureRule</name>
      <full_name>\GoTableaux\Logic\LP\ProofSystem\ClosureRule</full_name>
      <extends>\GoTableaux\Logic\FDE\ProofSystem\ClosureRule</extends>
      <docblock line="27">
        <description><![CDATA[Represents the LP closure rule.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="LP"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\LP\ProofSystem" line="33" package="">
        <name>doesApply</name>
        <type>function</type>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/LP/ProofSystem.php" hash="141abe501fac61f0671e29f7d1c73716" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $inheritBranchRulesFrom</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\LP" line="28" package="LP">
      <name>ProofSystem</name>
      <full_name>\GoTableaux\Logic\LP\ProofSystem</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\ManyValued</extends>
      <docblock line="24">
        <description><![CDATA[Represents the LP tableaux system.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="LP"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$inheritBranchRulesFrom</name>
        <default><![CDATA['FDE']]></default>
      </property>
    </class>
  </file>
  <file path="Logic/LP.php" hash="300ba3e7b01b7cc182e6cdf7bb94ba25" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $inheritLexiconFrom</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic" line="28" package="LP">
      <name>LP</name>
      <full_name>\GoTableaux\Logic\LP</full_name>
      <extends>\GoTableaux\Logic</extends>
      <docblock line="24">
        <description><![CDATA[Represents the Logic of Paradox.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="LP"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$inheritLexiconFrom</name>
        <default><![CDATA['FDE']]></default>
      </property>
    </class>
  </file>
  <file path="Logic/Lukasiewicz/ProofSystem/BranchRule/ConditionalDesignated.php" hash="40605e9db9a29b4f41d80100e58747c5" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class ConditionalDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/Lukasiewicz/ProofSystem/BranchRule/ConditionalDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\Lukasiewicz\ProofSystem\BranchRule" line="25" package="Lukasiewicz">
      <name>ConditionalDesignated</name>
      <full_name>\GoTableaux\Logic\Lukasiewicz\ProofSystem\BranchRule\ConditionalDesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="Lukasiewicz"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\Lukasiewicz\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/Lukasiewicz/ProofSystem/BranchRule/ConditionalUndesignated.php" hash="27bacc39c65cbd685880cd795b9f7951" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class ConditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/Lukasiewicz/ProofSystem/BranchRule/ConditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\Lukasiewicz\ProofSystem\BranchRule" line="25" package="Lukasiewicz">
      <name>ConditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\Lukasiewicz\ProofSystem\BranchRule\ConditionalUndesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="Lukasiewicz"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\Lukasiewicz\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/Lukasiewicz/ProofSystem/BranchRule/NegatedConditionalDesignated.php" hash="a7f2fb9d8e1b77196e0885a92af7fab9" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class NegatedConditionalDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/Lukasiewicz/ProofSystem/BranchRule/NegatedConditionalDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\Lukasiewicz\ProofSystem\BranchRule" line="25" package="Lukasiewicz">
      <name>NegatedConditionalDesignated</name>
      <full_name>\GoTableaux\Logic\Lukasiewicz\ProofSystem\BranchRule\NegatedConditionalDesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="Lukasiewicz"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\Lukasiewicz\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/Lukasiewicz/ProofSystem/BranchRule/NegatedConditionalUndesignated.php" hash="d3d135e9237ccac86dec758e3e28f998" package="Default">
    <parse_markers>
      <error line="27" code="50010">No DocBlock was found for method apply()</error>
      <critical line="22" code="50005">No short description for class NegatedConditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/Lukasiewicz/ProofSystem/BranchRule/NegatedConditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\Lukasiewicz\ProofSystem\BranchRule" line="25" package="Lukasiewicz">
      <name>NegatedConditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\Lukasiewicz\ProofSystem\BranchRule\NegatedConditionalUndesignated</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="22">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="Lukasiewicz"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\Lukasiewicz\ProofSystem\BranchRule" line="27" package="">
        <name>apply</name>
        <type>function</type>
        <argument line="27">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="27">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/Lukasiewicz/ProofSystem/ClosureRule.php" hash="c286950455cf9b4f90e7156c363c201b" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\Lukasiewicz\ProofSystem" line="31" package="Lukasiewicz">
      <name>ClosureRule</name>
      <full_name>\GoTableaux\Logic\Lukasiewicz\ProofSystem\ClosureRule</full_name>
      <extends>\GoTableaux\Logic\StrongKleene\ProofSystem\ClosureRule</extends>
      <docblock line="27">
        <description><![CDATA[Represents the Lukasiewicz closure rule.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="Lukasiewicz"/>
      </docblock>
    </class>
  </file>
  <file path="Logic/Lukasiewicz/ProofSystem.php" hash="52efb0f394385a46295b290f4155e0e2" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $inheritBranchRulesFrom</error>
      <error line="32" code="50018">No DocBlock was found for property $branchRuleClasses</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\Lukasiewicz" line="28" package="Lukasiewicz">
      <name>ProofSystem</name>
      <full_name>\GoTableaux\Logic\Lukasiewicz\ProofSystem</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\ManyValued</extends>
      <docblock line="24">
        <description><![CDATA[Represents the Lukasiewicz 3 tableaux system.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Lukasiewicz"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$inheritBranchRulesFrom</name>
        <default><![CDATA['StrongKleene']]></default>
      </property>
      <property final="false" static="false" visibility="public" line="32" package="Default">
        <name>$branchRuleClasses</name>
        <default><![CDATA[array(
		'ConditionalDesignated',
		'ConditionalUndesignated',
		'NegatedConditionalDesignated',
		'NegatedConditionalUndesignated'
	)]]></default>
      </property>
    </class>
  </file>
  <file path="Logic/Lukasiewicz.php" hash="fde22fb3a494fe37a022f20f8d524f58" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $inheritLexiconFrom</error>
      <error line="32" code="50018">No DocBlock was found for property $lexicon</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic" line="28" package="Lukasiewicz">
      <name>Lukasiewicz</name>
      <full_name>\GoTableaux\Logic\Lukasiewicz</full_name>
      <extends>\GoTableaux\Logic</extends>
      <docblock line="24">
        <description><![CDATA[Represents Lukasiewicz 3-valued logic.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Lukasiewicz"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$inheritLexiconFrom</name>
        <default><![CDATA['FDE']]></default>
      </property>
      <property final="false" static="false" visibility="public" line="32" package="Default">
        <name>$lexicon</name>
        <default><![CDATA[array(
		'operators' => array(
			'Conditional' => 2
		)
	)]]></default>
      </property>
    </class>
  </file>
  <file path="Logic/StrongKleene/ProofSystem/ClosureRule.php" hash="9df27bb1359165eb4e33289f92a494b8" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="33" code="50010">No DocBlock was found for method doesApply()</error>
    </parse_markers>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\StrongKleene\ProofSystem" line="31" package="StrongKleene">
      <name>ClosureRule</name>
      <full_name>\GoTableaux\Logic\StrongKleene\ProofSystem\ClosureRule</full_name>
      <extends>\GoTableaux\Logic\FDE\ProofSystem\ClosureRule</extends>
      <docblock line="27">
        <description><![CDATA[Represents the K3 closure rule.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="StrongKleene"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\StrongKleene\ProofSystem" line="33" package="">
        <name>doesApply</name>
        <type>function</type>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/StrongKleene/ProofSystem.php" hash="ce7c0516d9d69850e0f628ce5a4cf860" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $inheritBranchRulesFrom</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\StrongKleene" line="28" package="StrongKleene">
      <name>ProofSystem</name>
      <full_name>\GoTableaux\Logic\StrongKleene\ProofSystem</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\ManyValued</extends>
      <docblock line="24">
        <description><![CDATA[Represents the K3 tableaux system.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="StrongKleene"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$inheritBranchRulesFrom</name>
        <default><![CDATA['FDE']]></default>
      </property>
    </class>
  </file>
  <file path="Logic/StrongKleene.php" hash="08e0aa0d3953a70e8eb8780c2b2d9143" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Logic" line="28" package="StrongKleene">
      <name>StrongKleene</name>
      <full_name>\GoTableaux\Logic\StrongKleene</full_name>
      <extends>\GoTableaux\Logic\FDE</extends>
      <docblock line="24">
        <description><![CDATA[Represents Strong Kleene Logic.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="StrongKleene"/>
      </docblock>
    </class>
  </file>
  <file path="Logic.php" hash="1b7926f84ff538ea13ab9e814a79e1ef" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="true" namespace="GoTableaux" line="28" package="GoTableaux">
      <name>Logic</name>
      <full_name>\GoTableaux\Logic</full_name>
      <extends/>
      <docblock line="24">
        <description><![CDATA[Represents a Logic.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="35" package="Default">
        <name>$defaultOperatorSymbols</name>
        <default><![CDATA[array(
		'Negation' => '~',
		'Conjunction' => '&',
		'Disjunction' => 'V',
		'Material Conditional' => '>',
		'Material Biconditional' => '<',
		'Conditional' => '$',
	)]]></default>
        <docblock line="30">
          <description><![CDATA[Defines the default operator symbols for the lexicon.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="Key is operator name, value is operator symbol." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="30" name="see" description="\GoTableaux\Logic::initVocabulary()" refers="\GoTableaux\Logic::initVocabulary()"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="49" package="Default">
        <name>$lexicon</name>
        <default><![CDATA[array()]]></default>
        <docblock line="44">
          <description><![CDATA[Defines the default lexicon for initializing the vocabulary.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="var" description="Associate array of lexical items." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="44" name="see" description="\GoTableaux\Vocabulary::__construct()" refers="\GoTableaux\Vocabulary::__construct()"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="56" package="Default">
        <name>$vocabulary</name>
        <default><![CDATA[]]></default>
        <docblock line="51">
          <description><![CDATA[Holds a reference to the vocabulary.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="var" description="" type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
          <tag line="51" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="63" package="Default">
        <name>$proofSystem</name>
        <default><![CDATA[]]></default>
        <docblock line="58">
          <description><![CDATA[Holds a reference to the proof system.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="var" description="" type="\GoTableaux\ProofSystem">
            <type by_reference="false">\GoTableaux\ProofSystem</type>
          </tag>
          <tag line="58" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="70" package="Default">
        <name>$instances</name>
        <default><![CDATA[array()]]></default>
        <docblock line="65">
          <description><![CDATA[Holds the singleton instances of the logics.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="65" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="80" package="">
        <name>getInstance</name>
        <type>function</type>
        <docblock line="72">
          <description><![CDATA[Gets the singleton instance of a particular logic.]]></description>
          <long-description><![CDATA[<p>If the logic class is not loaded, it will attempt to load automatically.</p>]]></long-description>
          <tag line="72" name="param" description="The name of the logic." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="72" name="return" description="The instance of the logic." type="\GoTableaux\Logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
        </docblock>
        <argument line="80">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="true" abstract="false" static="false" visibility="private" namespace="GoTableaux" line="92" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="89">
          <description><![CDATA[Constructor. Final & private, for forcing single instances for each logic.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="102" package="">
        <name>getName</name>
        <type>function</type>
        <docblock line="97">
          <description><![CDATA[Gets the name of the Logic.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="97" name="return" description="The name of the logic." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="116" package="">
        <name>initVocabulary</name>
        <type>function</type>
        <docblock line="108">
          <description><![CDATA[Initializes the vocabulary.]]></description>
          <long-description><![CDATA[<p>This should be run to reload any changes to the lexicon. This creates a
new {@link Vocabulary} object, and so also clears the set of sentences.</p>]]></long-description>
          <tag line="108" name="return" description="Current instance." type="\GoTableaux\Logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="140" package="">
        <name>getVocabulary</name>
        <type>function</type>
        <docblock line="133">
          <description><![CDATA[Gets the vocabulary.]]></description>
          <long-description><![CDATA[<p>Lazily initializes the vocabulary.</p>]]></long-description>
          <tag line="133" name="return" description="The logic's vocabulary." type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="152" package="">
        <name>getParser</name>
        <type>function</type>
        <docblock line="146">
          <description><![CDATA[Gets a new sentence parser of the specified type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="146" name="param" description="Type of parser to instantiate. Default is 'Standard'." type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="146" name="return" description="The initialized sentence parser." type="\GoTableaux\SentenceParser">
            <type by_reference="false">\GoTableaux\SentenceParser</type>
          </tag>
        </docblock>
        <argument line="152">
          <name>$type</name>
          <default><![CDATA['Standard']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="164" package="">
        <name>getProofSystem</name>
        <type>function</type>
        <docblock line="157">
          <description><![CDATA[Gets the proof system.]]></description>
          <long-description><![CDATA[<p>Lazily instantiates proof system.</p>]]></long-description>
          <tag line="157" name="return" description="The logic's proof system." type="\GoTableaux\ProofSystem">
            <type by_reference="false">\GoTableaux\ProofSystem</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="180" package="">
        <name>getOperator</name>
        <type>function</type>
        <docblock line="173">
          <description><![CDATA[Gets an operator from the logic's vocabulary.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="173" name="param" description="The name of the operator." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="173" name="return" description="The operator object." type="\GoTableaux\Operator">
            <type by_reference="false">\GoTableaux\Operator</type>
          </tag>
          <tag line="173" name="see" description="\GoTableaux\Vocabulary::getOperatorByName()" refers="\GoTableaux\Vocabulary::getOperatorByName()"/>
        </docblock>
        <argument line="180">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="192" package="">
        <name>parseSentence</name>
        <type>function</type>
        <docblock line="185">
          <description><![CDATA[Parses a sentence string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="185" name="param" description="The sentence string to parse." type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="185" name="param" description="The parser type to do the parsing. Default is 'Standard'." type="string" variable="$parserType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="185" name="return" description="The sentence instance, registered in the logic's vocabulary." type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
        </docblock>
        <argument line="192">
          <name>$string</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="192">
          <name>$parserType</name>
          <default><![CDATA['Standard']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="205" package="">
        <name>parseSentences</name>
        <type>function</type>
        <docblock line="198">
          <description><![CDATA[Parses an array of sentence strings.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="198" name="param" description="Array of sentence strings to parse." type="array" variable="$strings">
            <type by_reference="false">array</type>
          </tag>
          <tag line="198" name="param" description="The parser type to do the parsing. Default is 'Standard'." type="string" variable="$parserType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="198" name="return" description="Array of {@link Sentence}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="205">
          <name>$strings</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="205">
          <name>$parserType</name>
          <default><![CDATA['Standard']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="221" package="">
        <name>parseArgument</name>
        <type>function</type>
        <docblock line="213">
          <description><![CDATA[Parses an argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="213" name="param" description="The premise strings." type="string|array" variable="$premiseStrings">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="213" name="param" description="Non-empty conclusion string." type="string" variable="$conclusionString">
            <type by_reference="false">string</type>
          </tag>
          <tag line="213" name="param" description="The parser type to do the parsing. Default is 'Standard'." type="string" variable="$parserType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="213" name="return" description="The argument instance." type="\GoTableaux\Argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
        </docblock>
        <argument line="221">
          <name>$premiseStrings</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="221">
          <name>$conclusionString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="221">
          <name>$parserType</name>
          <default><![CDATA['Standard']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="234" package="">
        <name>constructProofForArgument</name>
        <type>function</type>
        <docblock line="228">
          <description><![CDATA[Builds a proof for an argument with the proof system.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="228" name="param" description="The argument for which to build the proof." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="228" name="return" description="$proof The resulting (putative) proof." type="\GoTableaux\Proof">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
        </docblock>
        <argument line="234">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="248" package="">
        <name>applyOperatorToOperands</name>
        <type>function</type>
        <docblock line="239">
          <description><![CDATA[Applies an operator to some operands to generate a new sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="239" name="param" description="The name of the operator, or the operator object." type="string|\GoTableaux\Operator" variable="$operatorOrName">
            <type by_reference="false">string</type>
            <type by_reference="false">\GoTableaux\Operator</type>
          </tag>
          <tag line="239" name="param" description="The sentence(s) to which to apply the operator." type="array|\GoTableaux\Sentence" variable="$operands">
            <type by_reference="false">array</type>
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="239" name="return" description="The resulting sentence." type="\Sentence\Molecular">
            <type by_reference="false">\Sentence\Molecular</type>
          </tag>
          <tag line="239" name="throws" description="on type error." type="\GoTableaux\Exception">
            <type by_reference="false">\GoTableaux\Exception</type>
          </tag>
        </docblock>
        <argument line="248">
          <name>$operatorOrName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="248">
          <name>$operands</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="268" package="">
        <name>negate</name>
        <type>function</type>
        <docblock line="260">
          <description><![CDATA[Negates a sentence.]]></description>
          <long-description><![CDATA[<p>Requires an operator named 'Negation' in the language.</p>]]></long-description>
          <tag line="260" name="param" description="The sentence to negate." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="260" name="return" description="The negated sentence." type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
        </docblock>
        <argument line="268">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Model.php" hash="b3b0eaa5981154768767084cf49c6ff3" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux" line="28" package="ModelTheory">
      <name>Model</name>
      <full_name>\GoTableaux\Model</full_name>
      <extends/>
      <docblock line="24">
        <description><![CDATA[Represents model-theoretic model.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="ModelTheory"/>
      </docblock>
    </class>
  </file>
  <file path="Operator.php" hash="1752f78e174bb495a8ed887bebc0cca8" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="VocabularyException">\GoTableaux\Exception\Vocabulary</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux" line="31" package="Syntax">
      <name>Operator</name>
      <full_name>\GoTableaux\Operator</full_name>
      <extends/>
      <docblock line="26">
        <description><![CDATA[Represents an operator.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="26" name="package" description="Syntax"/>
        <tag line="26" name="see" description="\GoTableaux\Vocabulary::createOperator()" refers="\GoTableaux\Vocabulary::createOperator()"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="38" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="33">
          <description><![CDATA[Holds the name of the operator.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="33" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="45" package="Default">
        <name>$arity</name>
        <default><![CDATA[]]></default>
        <docblock line="40">
          <description><![CDATA[Holds the arity of the operator.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="40" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="55" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="47">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="param" description="The human name of the operator, e.g. 'Conjunction'." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="47" name="param" description="The arity of the operator." type="integer" variable="$arity">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="47" name="throws" description="VobabularyException} on parameter errors." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
          <tag line="47" name="see" description="\GoTableaux\Vocabulary::createOperator()" refers="\GoTableaux\Vocabulary::createOperator()"/>
        </docblock>
        <argument line="55">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="55">
          <name>$arity</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="70" package="">
        <name>getName</name>
        <type>function</type>
        <docblock line="65">
          <description><![CDATA[Gets the name of the operator.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="return" description="The human name of the operator, e.g. 'Conjunction'." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="80" package="">
        <name>getArity</name>
        <type>function</type>
        <docblock line="75">
          <description><![CDATA[Gets the arity of the operator.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="75" name="return" description="The arity of the operator." type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ParserUtilities.php" hash="c8d8d4e89a32c8df033fa26c6389dd33" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Exception">\GoTableaux\Exception\Parser</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux" line="30" package="Syntax">
      <name>ParserUtilities</name>
      <full_name>\GoTableaux\ParserUtilities</full_name>
      <extends/>
      <docblock line="26">
        <description><![CDATA[Collects utilities for sentence parsers.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="26" name="package" description="Syntax"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="39" package="">
        <name>trimSeparators</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[Trims separator (whitespace) characters from beginning and end of a string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="param" description="The string to trim." type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="32" name="param" description="The vocabulary whose separators to trim." type="\GoTableaux\Vocabulary" variable="$vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
          <tag line="32" name="return" description="The trimmed string." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$string</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="39">
          <name>$vocabulary</name>
          <default><![CDATA[]]></default>
          <type>Vocabulary</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="51" package="">
        <name>removeSeparators</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[Removes separator (whitespace) characters from a string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="param" description="The string to replace." type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="44" name="param" description="The vocabulary whose separators to remove." type="\GoTableaux\Vocabulary" variable="$vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
          <tag line="44" name="return" description="The string with all separators removed." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$string</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="51">
          <name>$vocabulary</name>
          <default><![CDATA[]]></default>
          <type>Vocabulary</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="63" package="">
        <name>dropOuterParens</name>
        <type>function</type>
        <docblock line="56">
          <description><![CDATA[Drops outer parentheses from a string, if they exist.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="param" description="The string to be parsed." type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="56" name="param" description="The vocabulary to use." type="\GoTableaux\Vocabulary" variable="$vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
          <tag line="56" name="return" description="The resulting string." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$string</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="63">
          <name>$vocabulary</name>
          <default><![CDATA[]]></default>
          <type>Vocabulary</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="82" package="">
        <name>removeAllParens</name>
        <type>function</type>
        <docblock line="75">
          <description><![CDATA[Removes all parentheses from a string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="75" name="param" description="The string from which to remove parentheses." type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="75" name="param" description="The vocabulary to use." type="\GoTableaux\Vocabulary" variable="$vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
          <tag line="75" name="return" description="The string with parentheses removed." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="82">
          <name>$string</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="82">
          <name>$vocabulary</name>
          <default><![CDATA[]]></default>
          <type>Vocabulary</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="95" package="">
        <name>addOuterParens</name>
        <type>function</type>
        <docblock line="88">
          <description><![CDATA[Adds outer parentheses to a string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="88" name="param" description="The string to be added to." type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="88" name="param" description="The vocabulary to use." type="\GoTableaux\Vocabulary" variable="$vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
          <tag line="88" name="return" description="The resulting string." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="95">
          <name>$string</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="95">
          <name>$vocabulary</name>
          <default><![CDATA[]]></default>
          <type>Vocabulary</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="112" package="">
        <name>closePosFromOpenPos</name>
        <type>function</type>
        <docblock line="102">
          <description><![CDATA[Finds a string's for the corresponding close mark of an open mark at the
given position.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="102" name="param" description="The string to scan." type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="102" name="param" description="String position of open mark." type="integer" variable="$openPos">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="102" name="param" description="The vocabulary to use." type="\GoTableaux\Vocabulary" variable="$vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
          <tag line="102" name="return" description="The position of the corresponding close mark." type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="102" name="throws" description="Exception\Parser} on parsing error." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
        </docblock>
        <argument line="112">
          <name>$string</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="112">
          <name>$openPos</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="112">
          <name>$vocabulary</name>
          <default><![CDATA[]]></default>
          <type>Vocabulary</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="GoTableaux" line="144" package="">
        <name>grabParenGroup</name>
        <type>function</type>
        <docblock line="131">
          <description><![CDATA[Parses first complete parenthesized group in a string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="131" name="param" description="The string to be parsed. Must contain at least one parenthesized group." type="string" variable="$str">
            <type by_reference="false">string</type>
          </tag>
          <tag line="131" name="param" description="The vocabulary to use." type="\GoTableaux\Vocabulary" variable="$vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
          <tag line="131" name="param" description="Whether to include the outer parentheses in the returned string. Default is false." type="boolean" variable="$includeOuter">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="131" name="param" description="String offset at which to start searching." type="integer" variable="$offset">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="131" name="return" description="Everything inside the first parenthesized group. Includes outer parentheses if $includeOuter is set to true." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="131" name="throws" description="Exception\Parser} on no parentheses in string, or parsing error." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
        </docblock>
        <argument line="144">
          <name>$str</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="144">
          <name>$vocabulary</name>
          <default><![CDATA[]]></default>
          <type>Vocabulary</type>
        </argument>
        <argument line="144">
          <name>$includeOuter</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
        <argument line="144">
          <name>$offset</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Proof/Tableau.php" hash="5764c40d94fec7668add45686a8a58c7" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <notice line="47" code="50013">Parameter $attachToTableau could not be found in createBranch()</notice>
    </parse_markers>
    <namespace-alias name="TableauException">\GoTableaux\Exception\Tableau</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Proof" line="31" package="GoTableaux">
      <name>Tableau</name>
      <full_name>\GoTableaux\Proof\Tableau</full_name>
      <extends>\GoTableaux\Proof</extends>
      <docblock line="26">
        <description><![CDATA[Represents a tableau for an argument.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="26" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="38" package="Default">
        <name>$branches</name>
        <default><![CDATA[array()]]></default>
        <docblock line="33">
          <description><![CDATA[Holds the branches on the tree.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="Array of {@link Branch} objects." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="33" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="45" package="Default">
        <name>$structure</name>
        <default><![CDATA[]]></default>
        <docblock line="40">
          <description><![CDATA[Holds the tree structure.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="var" description="" type="\GoTableaux\Proof\Structure">
            <type by_reference="false">\GoTableaux\Proof\Structure</type>
          </tag>
          <tag line="40" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="55" package="">
        <name>createBranch</name>
        <type>function</type>
        <docblock line="47">
          <description><![CDATA[Creates a new branch and attaches it to the tableau.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="param" description="Node or array of nodes to add to the branch." type="\GoTableaux\Proof\Node|array" variable="$nodes">
            <type by_reference="false">\GoTableaux\Proof\Node</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="47" name="param" description="Whether to attach the branch to the tableau. Default is true." type="boolean" variable="$attachToTableau">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="47" name="return" description="The created instance." type="\GoTableaux\Proof\Branch">
            <type by_reference="false">\GoTableaux\Proof\Branch</type>
          </tag>
        </docblock>
        <argument line="55">
          <name>$nodes</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="72" package="">
        <name>attach</name>
        <type>function</type>
        <docblock line="64">
          <description><![CDATA[Attaches one or more branches to the tree.]]></description>
          <long-description><![CDATA[<p>Ignores branches that are already on the tree.</p>]]></long-description>
          <tag line="64" name="param" description="The branch or array of branches to add." type="\GoTableaux\Proof\Branch|array" variable="$branches">
            <type by_reference="false">\GoTableaux\Proof\Branch</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="64" name="return" description="Current instance." type="\GoTableaux\Proof\Tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
        </docblock>
        <argument line="72">
          <name>$branches</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="91" package="">
        <name>getBranches</name>
        <type>function</type>
        <docblock line="86">
          <description><![CDATA[Gets all branches on the tree.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="86" name="return" description="Array of {@link Branch}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="101" package="">
        <name>getOpenBranches</name>
        <type>function</type>
        <docblock line="96">
          <description><![CDATA[Gets all open branches on the tree.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="96" name="return" description="Array of {@link Branch} objects." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="114" package="">
        <name>hasOpenBranches</name>
        <type>function</type>
        <docblock line="109">
          <description><![CDATA[Checks whether there are any open branches on the tree.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="109" name="return" description="Whether there are any open branches." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="125" package="">
        <name>detach</name>
        <type>function</type>
        <docblock line="119">
          <description><![CDATA[Removes one or more branches from the tree.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="119" name="param" description="The branch or array of branches to remove." type="\GoTableaux\Proof\Branch|array" variable="$branches">
            <type by_reference="false">\GoTableaux\Proof\Branch</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="119" name="return" description="Current instance." type="\GoTableaux\Proof\Tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
        </docblock>
        <argument line="125">
          <name>$branches</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="141" package="">
        <name>clearBranches</name>
        <type>function</type>
        <docblock line="136">
          <description><![CDATA[Clears all branches from the tree.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="136" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="151" package="">
        <name>getStructure</name>
        <type>function</type>
        <docblock line="146">
          <description><![CDATA[Gets the tableau's tree structure representation.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="146" name="return" description="The tree structure." type="\GoTableaux\Proof\Structure">
            <type by_reference="false">\GoTableaux\Proof\Structure</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="166" package="">
        <name>copy</name>
        <type>function</type>
        <docblock line="161">
          <description><![CDATA[Copies the tree and all its branches.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="161" name="return" description="The cloned tree." type="\GoTableaux\Proof\Tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Proof/TableauBranch/ManyValued.php" hash="bbc0f94d97e1e4c0007f645b50a0b721" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="110" code="50014">Name of argument $firstOperatorName does not match with the DocBlock's name $operatorName in getNodesByTwoOperatorNamesAndDesignation()</error>
      <error line="110" code="50014">Name of argument $secondOperatorName does not match with the DocBlock's name $isDesignated in getNodesByTwoOperatorNamesAndDesignation()</error>
      <error line="110" code="50014">Name of argument $isDesignated does not match with the DocBlock's name $untickedOnly in getNodesByTwoOperatorNamesAndDesignation()</error>
      <error line="110" code="50015">Argument $untickedOnly is missing from the Docblock of getNodesByTwoOperatorNamesAndDesignation()</error>
      <notice line="110" code="50013">Parameter $operatorName could not be found in getNodesByTwoOperatorNamesAndDesignation()</notice>
      <error line="128" code="50012">No short description for method _addNode()</error>
      <error line="128" code="50015">Argument $node is missing from the Docblock of _addNode()</error>
      <error line="137" code="50012">No short description for method _removeNode()</error>
      <error line="137" code="50015">Argument $node is missing from the Docblock of _removeNode()</error>
    </parse_markers>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <namespace-alias name="Sentence">\GoTableaux\Sentence</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="ManyValuedSentenceNode">\GoTableaux\Proof\TableauNode\Sentence\ManyValued</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Proof\TableauBranch" line="33" package="GoTableaux">
      <name>ManyValued</name>
      <full_name>\GoTableaux\Proof\TableauBranch\ManyValued</full_name>
      <extends>\GoTableaux\Proof\TableauBranch</extends>
      <docblock line="29">
        <description><![CDATA[Represents a many-valued logic tableau branch.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="29" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="40" package="Default">
        <name>$designatedNodes</name>
        <default><![CDATA[array()]]></default>
        <docblock line="35">
          <description><![CDATA[Holds the designated nodes]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="35" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauBranch" line="49" package="">
        <name>createNodeWithDesignation</name>
        <type>function</type>
        <docblock line="42">
          <description><![CDATA[Creates a node on the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="param" description="The sentence to place on the node." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="42" name="param" description="The designation marker for the node." type="boolean" variable="$isDesignated">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="42" name="return" description="Current instance." type="\GoTableaux\Proof\TableauBranch\ManyValuedBranch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch\ManyValuedBranch</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
        <argument line="49">
          <name>$isDesignated</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauBranch" line="61" package="">
        <name>hasSentenceWithDesignation</name>
        <type>function</type>
        <docblock line="54">
          <description><![CDATA[Checks whether a sentence is on the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="param" description="The sentence to search for." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="54" name="param" description="Whether the sentence should be designated." type="boolean" variable="$isDesignated">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="54" name="return" description="Whether the branch has a node with that sentence." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="61">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
        <argument line="61">
          <name>$isDesignated</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauBranch" line="75" package="">
        <name>getDesignatedNodes</name>
        <type>function</type>
        <docblock line="68">
          <description><![CDATA[Gets all designated sentence nodes on the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="68" name="param" description="Whether to limit results to unticked nodes. Default is false." type="boolean" variable="$untickedOnly">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="68" name="return" description="Array of {@link ManyValuedSentenceNode}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$untickedOnly</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauBranch" line="88" package="">
        <name>getUndesignatedNodes</name>
        <type>function</type>
        <docblock line="81">
          <description><![CDATA[Gets all undesignated sentence nodes on the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="81" name="param" description="Whether to limit results to unticked nodes. Default is false." type="boolean" variable="$untickedOnly">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="81" name="return" description="Array of {@link ManyValuedSentenceNode}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="88">
          <name>$untickedOnly</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauBranch" line="101" package="">
        <name>getNodesByOperatorNameAndDesignation</name>
        <type>function</type>
        <docblock line="93">
          <description><![CDATA[Gets all nodes that have a certain operator name and designation.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="93" name="param" description="The name of the operator." type="string" variable="$operatorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="93" name="param" description="Whether the nodes should be designated." type="boolean" variable="$isDesignated">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="93" name="param" description="Whether to restrict to unticked nodes." type="boolean" variable="$untickedOnly">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="93" name="return" description="Array of {@link ManyValuedSentenceNode}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="101">
          <name>$operatorName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="101">
          <name>$isDesignated</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="101">
          <name>$untickedOnly</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauBranch" line="119" package="">
        <name>getNodesByTwoOperatorNamesAndDesignation</name>
        <type>function</type>
        <docblock line="110">
          <description><![CDATA[Gets all nodes that have a two operator names and a certain designation.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="110" name="param" description="The name of the operator." type="string" variable="$operatorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="110" name="param" description="Whether the nodes should be designated." type="boolean" variable="$isDesignated">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="110" name="param" description="Whether to restrict to unticked nodes." type="boolean" variable="$untickedOnly">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="110" name="return" description="Array of {@link ManyValuedSentenceNode}s." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="110" name="see" description="\GoTableaux\Proof\TableauBranch\Branch::getNodesByTwoOperatorNames()" refers="\GoTableaux\Proof\TableauBranch\Branch::getNodesByTwoOperatorNames()"/>
        </docblock>
        <argument line="119">
          <name>$firstOperatorName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="119">
          <name>$secondOperatorName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="119">
          <name>$isDesignated</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="119">
          <name>$untickedOnly</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux\Proof\TableauBranch" line="131" package="">
        <name>_addNode</name>
        <type>function</type>
        <docblock line="128">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="128" name="access" description="private"/>
        </docblock>
        <argument line="131">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauBranch" line="140" package="">
        <name>_removeNode</name>
        <type>function</type>
        <docblock line="137">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="137" name="access" description="private"/>
        </docblock>
        <argument line="140">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Proof/TableauBranch/Modal/ManyValued.php" hash="627a1e6653f6df8985b82e10fd6ad37d" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="101" code="50012">No short description for method _addNode()</error>
      <error line="101" code="50015">Argument $node is missing from the Docblock of _addNode()</error>
      <error line="111" code="50012">No short description for method _removeNode()</error>
      <error line="111" code="50015">Argument $node is missing from the Docblock of _removeNode()</error>
    </parse_markers>
    <namespace-alias name="Sentence">\GoTableaux\Sentence</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="SentenceNode">\GoTableaux\Proof\TableauNode\Sentence</namespace-alias>
    <namespace-alias name="MVMSentenceNode">\GoTableaux\Proof\TableauNode\Sentence\Modal\ManyValued</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Proof\TableauBranch\Modal" line="34" package="GoTableaux">
      <name>ManyValued</name>
      <full_name>\GoTableaux\Proof\TableauBranch\Modal\ManyValued</full_name>
      <extends>\GoTableaux\Proof\TableauBranch\Modal</extends>
      <docblock line="29">
        <description><![CDATA[Represents a tableau branch with designation markers for a many-valued
modal logic.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="29" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="41" package="Default">
        <name>$designatedNodes</name>
        <default><![CDATA[array()]]></default>
        <docblock line="36">
          <description><![CDATA[Holds the designated nodes.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="36" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauBranch\Modal" line="51" package="">
        <name>createSentenceNodeAtIndexWithDesignation</name>
        <type>function</type>
        <docblock line="43">
          <description><![CDATA[Adds a sentence node to the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="param" description="The sentence to place on the node." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="43" name="param" description="The world index to place on the node." type="integer" variable="$i">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="43" name="param" description="The designation flag of the node." type="boolean" variable="$isDesignated">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="43" name="return" description="Current instance." type="\GoTableaux\Proof\TableauBranch\Modal\ManyValuedModalBranch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch\Modal\ManyValuedModalBranch</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
        <argument line="51">
          <name>$i</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="51">
          <name>$isDesignated</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauBranch\Modal" line="65" package="">
        <name>hasSentenceAtIndexWithDesignation</name>
        <type>function</type>
        <docblock line="57">
          <description><![CDATA[Checks whether a sentence node with the given attributes is on the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="param" description="The sentence to search for." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="57" name="param" description="The world index of the node." type="integer" variable="$i">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="57" name="param" description="The designation flag of the node." type="boolean" variable="$isDesignated">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="57" name="return" description="Whether such a node is on the branch." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
        <argument line="65">
          <name>$i</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="65">
          <name>$isDesignated</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauBranch\Modal" line="83" package="">
        <name>getDesignatedNodes</name>
        <type>function</type>
        <docblock line="76">
          <description><![CDATA[Gets all designated sentence nodes on the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="76" name="param" description="Whether to limit results to unticked nodes. Default is false." type="boolean" variable="$untickedOnly">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="76" name="return" description="Array of {@link ManyValuedModalSentenceNode}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="83">
          <name>$untickedOnly</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauBranch\Modal" line="96" package="">
        <name>getUndesignatedNodes</name>
        <type>function</type>
        <docblock line="89">
          <description><![CDATA[Gets all undesignated sentence nodes on the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="89" name="param" description="Whether to limit results to unticked nodes. Default is false." type="boolean" variable="$untickedOnly">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="89" name="return" description="Array of {@link ManyValuedModalSentenceNode}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="96">
          <name>$untickedOnly</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux\Proof\TableauBranch\Modal" line="104" package="">
        <name>_addNode</name>
        <type>function</type>
        <docblock line="101">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="101" name="access" description="private"/>
        </docblock>
        <argument line="104">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauBranch\Modal" line="114" package="">
        <name>_removeNode</name>
        <type>function</type>
        <docblock line="111">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="111" name="access" description="private"/>
        </docblock>
        <argument line="114">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Proof/TableauBranch/Modal.php" hash="9f3b6ce251cf70151b8950c844eda95a" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <critical line="35" code="50019">No short description for property $accessNodes</critical>
      <error line="145" code="50014">Name of argument $i does not match with the DocBlock's name $index in createSentenceNodeAtIndex()</error>
      <notice line="145" code="50013">Parameter $index could not be found in createSentenceNodeAtIndex()</notice>
    </parse_markers>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="AccessNode">\GoTableaux\Proof\TableauNode\Access</namespace-alias>
    <namespace-alias name="Sentence">\GoTableaux\Sentence</namespace-alias>
    <namespace-alias name="ModalSentenceNode">\GoTableaux\Proof\TableauNode\Sentence\Modal</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Proof\TableauBranch" line="33" package="GoTableaux">
      <name>Modal</name>
      <full_name>\GoTableaux\Proof\TableauBranch\Modal</full_name>
      <extends>\GoTableaux\Proof\TableauBranch</extends>
      <docblock line="29">
        <description><![CDATA[Represents a modal logic tableau branch.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="29" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="39" package="Default">
        <name>$accessNodes</name>
        <default><![CDATA[array()]]></default>
        <docblock line="35">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="35" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="46" package="Default">
        <name>$accessRelation</name>
        <default><![CDATA[array()]]></default>
        <docblock line="41">
          <description><![CDATA[Hashes the access relation.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="41" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="41" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="53" package="Default">
        <name>$indexes</name>
        <default><![CDATA[array()]]></default>
        <docblock line="48">
          <description><![CDATA[Hashes the indexes on the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="48" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="48" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauBranch" line="62" package="">
        <name>createAccessNode</name>
        <type>function</type>
        <docblock line="55">
          <description><![CDATA[Adds a new access node for the given two integer indexes.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="55" name="param" description="The first index." type="integer" variable="$i">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="55" name="param" description="The second index." type="integer" variable="$j">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="55" name="return" description="Current instance." type="\GoTableaux\Proof\TableauBranch\ModalBranch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch\ModalBranch</type>
          </tag>
        </docblock>
        <argument line="62">
          <name>$i</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="62">
          <name>$j</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauBranch" line="72" package="">
        <name>getAccessNodes</name>
        <type>function</type>
        <docblock line="67">
          <description><![CDATA[Gets all modal access nodes on the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="67" name="return" description="Array of {@link AccessNode}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauBranch" line="82" package="">
        <name>getIndexes</name>
        <type>function</type>
        <docblock line="77">
          <description><![CDATA[Gets all world indexes that appear on the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="77" name="return" description="Array of unique integer indexes that appear on the branch." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauBranch" line="92" package="">
        <name>getReflexiveIndexes</name>
        <type>function</type>
        <docblock line="87">
          <description><![CDATA[Gets all world indexes that "see" themselves.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="87" name="return" description="Array of unique integer indexes that have reflexive nodes." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauBranch" line="107" package="">
        <name>accesses</name>
        <type>function</type>
        <docblock line="100">
          <description><![CDATA[Checks whether a given world index accesses another.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="100" name="param" description="The world that wants to access." type="integer" variable="$i">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="100" name="param" description="The world that wants to be accessed." type="integer" variable="$j">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="100" name="return" description="Whether the one world accesses the other." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="107">
          <name>$i</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="107">
          <name>$j</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauBranch" line="120" package="">
        <name>getAccessRelation</name>
        <type>function</type>
        <docblock line="112">
          <description><![CDATA[Gets the access relation.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="112" name="param" description="The index whose access relation to get." type="integer" variable="$i">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="112" name="return" description="If $i is set, then the array of indexes that $i access is returned. Otherwise, a two-dimensional array of the access relation is returned." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="120">
          <name>$i</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauBranch" line="134" package="">
        <name>indexIsTransitive</name>
        <type>function</type>
        <docblock line="127">
          <description><![CDATA[Checks whether a given world index represents a transitive world.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="127" name="param" description="The world index to check for transitivity." type="integer" variable="$i">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="127" name="param" description="&amp;$firstMissing The first counterexample, if found." type="integer|null" variable="$firstMissing">
            <type by_reference="false">integer</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="127" name="return" description="Whether the world index is transitive." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="134">
          <name>$i</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="134">
          <name>$firstMissing</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauBranch" line="152" package="">
        <name>createSentenceNodeAtIndex</name>
        <type>function</type>
        <docblock line="145">
          <description><![CDATA[Adds a new sentence node to the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="145" name="param" description="The sentence to add." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="145" name="param" description="The world index of the node." type="integer" variable="$index">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="145" name="return" description="Current instance." type="\GoTableaux\Proof\TableauBranch\ModalBranch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch\ModalBranch</type>
          </tag>
        </docblock>
        <argument line="152">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
        <argument line="152">
          <name>$i</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauBranch" line="164" package="">
        <name>hasSentenceAtIndex</name>
        <type>function</type>
        <docblock line="157">
          <description><![CDATA[Checks for existence of sentence node with given sentence and index.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="157" name="param" description="The sentence to search for." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="157" name="param" description="The index to search for." type="integer" variable="$i">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="157" name="return" description="Whether such a sentence node is on the branch." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="164">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
        <argument line="164">
          <name>$i</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux\Proof\TableauBranch" line="179" package="">
        <name>_addAccessRelationship</name>
        <type>function</type>
        <docblock line="171">
          <description><![CDATA[Stores an access relationship.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="171" name="param" description="The first index." type="integer" variable="$i">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="171" name="param" description="The second index." type="integer" variable="$j">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="171" name="return" description="Current instance." type="\GoTableaux\Proof\TableauBranch\ModalBranch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch\ModalBranch</type>
          </tag>
          <tag line="171" name="access" description="private"/>
        </docblock>
        <argument line="179">
          <name>$i</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="179">
          <name>$j</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux\Proof\TableauBranch" line="192" package="">
        <name>_addIndex</name>
        <type>function</type>
        <docblock line="185">
          <description><![CDATA[Stores an index on the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="185" name="param" description="The index to store." type="integer" variable="$i">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="185" name="return" description="Current instance." type="\GoTableaux\Proof\TableauBranch\ModalBranch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch\ModalBranch</type>
          </tag>
          <tag line="185" name="access" description="private"/>
        </docblock>
        <argument line="192">
          <name>$i</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux\Proof\TableauBranch" line="208" package="">
        <name>_addNode</name>
        <type>function</type>
        <docblock line="201">
          <description><![CDATA[Adds a node to the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="201" name="param" description="The node to add." type="\GoTableaux\Proof\TableauNode" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
          <tag line="201" name="return" description="Current instance." type="\GoTableaux\Proof\TableauBranch\ModalBranch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch\ModalBranch</type>
          </tag>
          <tag line="201" name="access" description="private"/>
        </docblock>
        <argument line="208">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauBranch" line="226" package="">
        <name>_removeNode</name>
        <type>function</type>
        <docblock line="219">
          <description><![CDATA[Removes a node from the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="219" name="param" description="The node to remove." type="\GoTableaux\Proof\TableauNode" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
          <tag line="219" name="return" description="Current instance." type="\GoTableaux\Proof\TableauBranch\ModalBranch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch\ModalBranch</type>
          </tag>
          <tag line="219" name="access" description="private"/>
        </docblock>
        <argument line="226">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Proof/TableauBranch/Propositional.php" hash="b7901dc84faae6878e6e4a3938de00ba" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Sentence">\GoTableaux\Sentence</namespace-alias>
    <namespace-alias name="SentenceNode">\GoTableaux\Proof\TableauNode\Sentence</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Proof\TableauBranch" line="31" package="GoTableaux">
      <name>Propositional</name>
      <full_name>\GoTableaux\Proof\TableauBranch\Propositional</full_name>
      <extends>\GoTableaux\Proof\TableauBranch</extends>
      <docblock line="27">
        <description><![CDATA[Represents a propositional logic tableau branch.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauBranch" line="39" package="">
        <name>createNode</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Creates a node on the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="param" description="The sentence to place on the node." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="33" name="return" description="Current instance." type="\GoTableaux\Proof\TableauBranch\PropositionalBranch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch\PropositionalBranch</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauBranch" line="50" package="">
        <name>hasSentence</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[Checks whether a sentence is on the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="param" description="The sentence to search for." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="44" name="return" description="Whether the branch has a node with that sentence." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Proof/TableauBranch.php" hash="2405470cdfd74e2049b0ba9b2dd693e5" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="166" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $node in hasNode()</error>
      <error line="244" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $node in tickNode()</error>
      <error line="257" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $node in _addNode()</error>
      <error line="278" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $node in _removeNode()</error>
    </parse_markers>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Proof" line="29" package="GoTableaux">
      <name>TableauBranch</name>
      <full_name>\GoTableaux\Proof\TableauBranch</full_name>
      <extends/>
      <docblock line="25">
        <description><![CDATA[Represents a tableau branch.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="25" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="36" package="Default">
        <name>$nodes</name>
        <default><![CDATA[array()]]></default>
        <docblock line="31">
          <description><![CDATA[Holds the {@link Node nodes} of the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="31" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="43" package="Default">
        <name>$tickedNodes</name>
        <default><![CDATA[array()]]></default>
        <docblock line="38">
          <description><![CDATA[Holds the ticked {@link Node}s.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="38" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="50" package="Default">
        <name>$sentenceNodes</name>
        <default><![CDATA[array()]]></default>
        <docblock line="45">
          <description><![CDATA[Holds the {@link SentenceNode}s of the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="45" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="57" package="Default">
        <name>$closed</name>
        <default><![CDATA[false]]></default>
        <docblock line="52">
          <description><![CDATA[Tracks whether the branch is closed.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="52" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="64" package="Default">
        <name>$tableau</name>
        <default><![CDATA[]]></default>
        <docblock line="59">
          <description><![CDATA[Holds a reference to the tableau.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="var" description="" type="\GoTableaux\Proof\Tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="59" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="73" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="66">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[<p>Initializes the tableau.</p>]]></long-description>
          <tag line="66" name="param" description="The tableau of the branch." type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
        </docblock>
        <argument line="73">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="83" package="">
        <name>getTableau</name>
        <type>function</type>
        <docblock line="78">
          <description><![CDATA[Gets the tableau.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="78" name="return" description="The tableau." type="\GoTableaux\Proof\Tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="94" package="">
        <name>getNodes</name>
        <type>function</type>
        <docblock line="88">
          <description><![CDATA[Gets the nodes on the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="88" name="param" description="Whether to limit search to nodes that are unticked." type="boolean" variable="$untickedOnly">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="88" name="return" description="Array of {@link Node}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="94">
          <name>$untickedOnly</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="106" package="">
        <name>getSentenceNodes</name>
        <type>function</type>
        <docblock line="100">
          <description><![CDATA[Gets all sentence nodes on the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="100" name="param" description="Whether to limit search to nodes that are unticked." type="boolean" variable="$untickedOnly">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="100" name="return" description="Array of {@link SentenceNode}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="106">
          <name>$untickedOnly</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="118" package="">
        <name>hasNodeWithSentence</name>
        <type>function</type>
        <docblock line="112">
          <description><![CDATA[Checks whether a sentence is on the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="112" name="param" description="The sentence to search for." type="\GoTableaux\Proof\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Proof\Sentence</type>
          </tag>
          <tag line="112" name="return" description="Whether the branch has a node with that sentence." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="118">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="130" package="">
        <name>getUntickedNodes</name>
        <type>function</type>
        <docblock line="125">
          <description><![CDATA[Gets all nodes on the branch that are unticked relative to the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="125" name="return" description="Array of {@link Node}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="140" package="">
        <name>getTickedNodes</name>
        <type>function</type>
        <docblock line="135">
          <description><![CDATA[Gets all nodes on the branch that are ticked relative to the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="135" name="return" description="Array of {@link Node}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="150" package="">
        <name>close</name>
        <type>function</type>
        <docblock line="145">
          <description><![CDATA[Closes the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="145" name="return" description="Current instance." type="\GoTableaux\Proof\Branch">
            <type by_reference="false">\GoTableaux\Proof\Branch</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="161" package="">
        <name>isClosed</name>
        <type>function</type>
        <docblock line="156">
          <description><![CDATA[Checks whether the branch is closed.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="156" name="return" description="Whether the branch is closed." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="172" package="">
        <name>hasNode</name>
        <type>function</type>
        <docblock line="166">
          <description><![CDATA[Checks whether a node is on the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="166" name="param" description="The node to check." type="\GoTableaux\Proof\Node" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\Node</type>
          </tag>
          <tag line="166" name="return" description="Whether the node is on the branch." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="172">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>TableauNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="182" package="">
        <name>copy</name>
        <type>function</type>
        <docblock line="177">
          <description><![CDATA[Clones the branch. Maintains references to the nodes.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="177" name="return" description="The new copy." type="\GoTableaux\Proof\Branch">
            <type by_reference="false">\GoTableaux\Proof\Branch</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="196" package="">
        <name>branch</name>
        <type>function</type>
        <docblock line="188">
          <description><![CDATA[Branches the branch.]]></description>
          <long-description><![CDATA[<p>Copies the branch, attaches the copy to the tableau, and returns the new
branch.</p>]]></long-description>
          <tag line="188" name="return" description="The new branch" type="\GoTableaux\Proof\Branch">
            <type by_reference="false">\GoTableaux\Proof\Branch</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="212" package="">
        <name>getNodesByOperatorName</name>
        <type>function</type>
        <docblock line="203">
          <description><![CDATA[Gets any {@link SentenceNode}s on the branch that have a given operator
as its sentence's main connective.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="203" name="param" description="The name of the operator." type="string" variable="$operatorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="203" name="param" description="Whether to include unticked nodes only. Default is false." type="boolean" variable="$untickedOnly">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="203" name="return" description="Array of {@link SentenceNode}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="212">
          <name>$operatorName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="212">
          <name>$untickedOnly</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="233" package="">
        <name>getNodesByTwoOperatorNames</name>
        <type>function</type>
        <docblock line="220">
          <description><![CDATA[Gets any {@link SentenceNode}s by two operator names.]]></description>
          <long-description><![CDATA[<p>Returns sentence nodes whose first operator is a given operator, and
whose first operand is a molecular sentence with the given second
operator.</p>]]></long-description>
          <tag line="220" name="param" description="The name of the first operator." type="string" variable="$firstOperatorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="220" name="param" description="The name of the second operator." type="string" variable="$secondOperatorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="220" name="param" description="Whether to include unticked nodes only. Default is false." type="boolean" variable="$untickedOnly">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="220" name="return" description="The resulting array of {@link SentenceNode}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="233">
          <name>$firstOperatorName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="233">
          <name>$secondOperatorName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="233">
          <name>$untickedOnly</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="250" package="">
        <name>tickNode</name>
        <type>function</type>
        <docblock line="244">
          <description><![CDATA[Ticks a node relative to the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="244" name="param" description="The node to tick." type="\GoTableaux\Proof\Node" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\Node</type>
          </tag>
          <tag line="244" name="return" description="Current instance." type="\GoTableaux\Proof\Branch">
            <type by_reference="false">\GoTableaux\Proof\Branch</type>
          </tag>
        </docblock>
        <argument line="250">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>TableauNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux\Proof" line="263" package="">
        <name>_addNode</name>
        <type>function</type>
        <docblock line="257">
          <description><![CDATA[Adds a node to the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="257" name="param" description="The node to add." type="\GoTableaux\Proof\Node" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\Node</type>
          </tag>
          <tag line="257" name="return" description="Current instance." type="\GoTableaux\Proof\Branch">
            <type by_reference="false">\GoTableaux\Proof\Branch</type>
          </tag>
        </docblock>
        <argument line="263">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>TableauNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="285" package="">
        <name>_removeNode</name>
        <type>function</type>
        <docblock line="278">
          <description><![CDATA[Removes all references to a node from the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="278" name="param" description="The node to remove. If the node is on the branch in multiple places, each reference is removed." type="\GoTableaux\Proof\Node" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\Node</type>
          </tag>
          <tag line="278" name="return" description="Current instance." type="\GoTableaux\Proof\Branch">
            <type by_reference="false">\GoTableaux\Proof\Branch</type>
          </tag>
        </docblock>
        <argument line="285">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>TableauNode</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Proof/TableauNode/Access.php" hash="5c1614f3efa103df2513d770593fb9a6" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Proof\TableauNode" line="28" package="GoTableaux">
      <name>Access</name>
      <full_name>\GoTableaux\Proof\TableauNode\Access</full_name>
      <extends>\GoTableaux\Proof\TableauNode</extends>
      <implements>\GoTableaux\Proof\TableauNode\Modal</implements>
      <docblock line="24">
        <description><![CDATA[Represents a modal logic access relation node.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="35" package="Default">
        <name>$i</name>
        <default><![CDATA[]]></default>
        <docblock line="30">
          <description><![CDATA[Holds a reference to the seeing world index.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="30" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="42" package="Default">
        <name>$j</name>
        <default><![CDATA[]]></default>
        <docblock line="37">
          <description><![CDATA[Holds a reference to the seen world index.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="37" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="52" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[<p>Sets the indexes of the node.</p>]]></long-description>
          <tag line="44" name="param" description="The first index." type="integer" variable="$i">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="44" name="param" description="The second index." type="integer" variable="$j">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$i</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="52">
          <name>$j</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="63" package="">
        <name>setI</name>
        <type>function</type>
        <docblock line="57">
          <description><![CDATA[Sets the first index.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="param" description="The index." type="integer" variable="$i">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="57" name="return" description="Current instance" type="\GoTableaux\Proof\TableauNode\AccessNode">
            <type by_reference="false">\GoTableaux\Proof\TableauNode\AccessNode</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$i</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="74" package="">
        <name>getI</name>
        <type>function</type>
        <docblock line="69">
          <description><![CDATA[Gets the first index]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="69" name="return" description="The first index." type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="85" package="">
        <name>setJ</name>
        <type>function</type>
        <docblock line="79">
          <description><![CDATA[Sets the second index.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="79" name="param" description="The second index." type="integer" variable="$j">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="79" name="return" description="Current instance." type="\GoTableaux\Proof\TableauNode\AccessNode">
            <type by_reference="false">\GoTableaux\Proof\TableauNode\AccessNode</type>
          </tag>
        </docblock>
        <argument line="85">
          <name>$j</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="96" package="">
        <name>getJ</name>
        <type>function</type>
        <docblock line="91">
          <description><![CDATA[Gets the second index.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="91" name="return" description="The second index." type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Proof/TableauNode/ManyValued.php" hash="75c85fbba71a819ed97b4b36038ef830" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <interface namespace="GoTableaux\Proof\TableauNode" line="28" package="GoTableaux">
      <name>ManyValued</name>
      <full_name>\GoTableaux\Proof\TableauNode\ManyValued</full_name>
      <extends/>
      <docblock line="24">
        <description><![CDATA[Signifies a many-valued tableau node that has a designation marker.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="35" package="">
        <name>isDesignated</name>
        <type>function</type>
        <docblock line="30">
          <description><![CDATA[Returns whether the node is designated.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="return" description="Whether the node is designated." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="Proof/TableauNode/Modal.php" hash="a4084df628e3239878f45779d24f8013" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <interface namespace="GoTableaux\Proof\TableauNode" line="28" package="GoTableaux">
      <name>Modal</name>
      <full_name>\GoTableaux\Proof\TableauNode\Modal</full_name>
      <extends/>
      <docblock line="24">
        <description><![CDATA[Signifies a modal tableau node that has at least one index.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="35" package="">
        <name>getI</name>
        <type>function</type>
        <docblock line="30">
          <description><![CDATA[Returns the index, or the first index, of a modal node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="return" description="The index, or first index of the node." type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="Proof/TableauNode/Sentence/ManyValued.php" hash="b2b15b191380e052c996b9a863dc0bf0" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Proof\TableauNode\Sentence" line="28" package="GoTableaux">
      <name>ManyValued</name>
      <full_name>\GoTableaux\Proof\TableauNode\Sentence\ManyValued</full_name>
      <extends>\GoTableaux\Proof\TableauNode\Sentence</extends>
      <implements>\GoTableaux\Proof\TableauNode\ManyValued</implements>
      <docblock line="24">
        <description><![CDATA[Represents a sentence node on a branch of a many-valued logic tableau.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="35" package="Default">
        <name>$isDesignated</name>
        <default><![CDATA[]]></default>
        <docblock line="30">
          <description><![CDATA[Holds the designation flag.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="30" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode\Sentence" line="45" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="37">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[<p>Sets the sentence and designation flag.</p>]]></long-description>
          <tag line="37" name="param" description="The sentence to place on the node." type="\GoTableaux\Proof\TableauNode\Sentence\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Proof\TableauNode\Sentence\Sentence</type>
          </tag>
          <tag line="37" name="param" description="Whether the sentence is designated at $i." type="boolean" variable="$isDesignated">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
        <argument line="45">
          <name>$isDesignated</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode\Sentence" line="57" package="">
        <name>setDesignation</name>
        <type>function</type>
        <docblock line="51">
          <description><![CDATA[Sets the designation flag.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="param" description="Whether the sentence is designated at the node." type="boolean" variable="$isDesignated">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="51" name="return" description="Current instance." type="\GoTableaux\Proof\TableauNode\Sentence\ManyValuedSentenceNode">
            <type by_reference="false">\GoTableaux\Proof\TableauNode\Sentence\ManyValuedSentenceNode</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$isDesignated</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode\Sentence" line="68" package="">
        <name>isDesignated</name>
        <type>function</type>
        <docblock line="63">
          <description><![CDATA[Gets whether the sentence is designated at the world index.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="return" description="Whether the sentence is designated at the node." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Proof/TableauNode/Sentence/Modal/ManyValued.php" hash="ceec99c204fc8716cb2459e354a118e4" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Proof\TableauNode\Sentence\Modal" line="28" package="GoTableaux">
      <name>ManyValued</name>
      <full_name>\GoTableaux\Proof\TableauNode\Sentence\Modal\ManyValued</full_name>
      <extends>\GoTableaux\Proof\TableauNode\Sentence\Modal</extends>
      <implements>\GoTableaux\Proof\TableauNode\ManyValued</implements>
      <docblock line="24">
        <description><![CDATA[Represents a sentence node on a branch of a many-valued modal logic tableau.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="35" package="Default">
        <name>$isDesignated</name>
        <default><![CDATA[]]></default>
        <docblock line="30">
          <description><![CDATA[Holds the designation flag.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="30" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode\Sentence\Modal" line="46" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="37">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[<p>Sets the sentence, index, and designation flag.</p>]]></long-description>
          <tag line="37" name="param" description="The sentence to place on the node." type="\GoTableaux\Proof\TableauNode\Sentence\Modal\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Proof\TableauNode\Sentence\Modal\Sentence</type>
          </tag>
          <tag line="37" name="param" description="The &quot;world&quot; index of the node." type="integer" variable="$i">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="37" name="param" description="Whether the sentence is designated at $i." type="boolean" variable="$isDesignated">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="46">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
        <argument line="46">
          <name>$i</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="46">
          <name>$isDesignated</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode\Sentence\Modal" line="59" package="">
        <name>setDesignation</name>
        <type>function</type>
        <docblock line="52">
          <description><![CDATA[Sets the designation flag.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="param" description="Whether the sentence is designated at the world index of the node." type="boolean" variable="$isDesignated">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="52" name="return" description="Current instance." type="\GoTableaux\Proof\TableauNode\Sentence\Modal\DesignationModalSentenceNode">
            <type by_reference="false">\GoTableaux\Proof\TableauNode\Sentence\Modal\DesignationModalSentenceNode</type>
          </tag>
        </docblock>
        <argument line="59">
          <name>$isDesignated</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode\Sentence\Modal" line="70" package="">
        <name>isDesignated</name>
        <type>function</type>
        <docblock line="65">
          <description><![CDATA[Gets whether the sentence is designated at the world index.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="return" description="Whether the sentence is designated at the world index." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Proof/TableauNode/Sentence/Modal.php" hash="be4e119b100ec8cf8a93a239f2436023" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Proof\TableauNode\Sentence" line="31" package="GoTableaux">
      <name>Modal</name>
      <full_name>\GoTableaux\Proof\TableauNode\Sentence\Modal</full_name>
      <extends>\GoTableaux\Proof\TableauNode\Sentence</extends>
      <implements>\GoTableaux\Proof\TableauNode\Modal</implements>
      <docblock line="24">
        <description><![CDATA[Represents a modal sentence tableau node.]]></description>
        <long-description><![CDATA[<p>A modal sentence node has a sentence and a "world" integer index.</p>]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="37" package="Default">
        <name>$i</name>
        <default><![CDATA[]]></default>
        <docblock line="33">
          <description><![CDATA[Holds a reference to the "world" index.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode\Sentence" line="47" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="39">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[<p>Sets the sentence by calling the parent constructor, and sets the index.</p>]]></long-description>
          <tag line="39" name="param" description="The sentence to place on the node." type="\GoTableaux\Proof\TableauNode\Sentence\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Proof\TableauNode\Sentence\Sentence</type>
          </tag>
          <tag line="39" name="param" description="The index of the node." type="integer" variable="$i">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="47">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
        <argument line="47">
          <name>$i</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode\Sentence" line="59" package="">
        <name>setI</name>
        <type>function</type>
        <docblock line="53">
          <description><![CDATA[Sets the index.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="53" name="param" description="The index." type="integer" variable="$i">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="53" name="return" description="Current instance." type="\GoTableaux\Proof\TableauNode\Sentence\ModalSentenceNode">
            <type by_reference="false">\GoTableaux\Proof\TableauNode\Sentence\ModalSentenceNode</type>
          </tag>
        </docblock>
        <argument line="59">
          <name>$i</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode\Sentence" line="69" package="">
        <name>getI</name>
        <type>function</type>
        <docblock line="64">
          <description><![CDATA[Gets the index.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="64" name="return" description="The index." type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Proof/TableauNode/Sentence.php" hash="f8c9f012d66b5e8bb7628e56f5bdd49b" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Proof\TableauNode" line="28" package="GoTableaux">
      <name>Sentence</name>
      <full_name>\GoTableaux\Proof\TableauNode\Sentence</full_name>
      <extends>\GoTableaux\Proof\TableauNode</extends>
      <docblock line="24">
        <description><![CDATA[Represents a sentence tableau node.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="34" package="Default">
        <name>$sentence</name>
        <default><![CDATA[]]></default>
        <docblock line="30">
          <description><![CDATA[Holds a reference to the sentence on the node]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="\GoTableaux\Proof\TableauNode\Sentence">
            <type by_reference="false">\GoTableaux\Proof\TableauNode\Sentence</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="43" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="36">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[<p>Sets the sentence.</p>]]></long-description>
          <tag line="36" name="param" description="The sentence to place on the node." type="\GoTableaux\Proof\TableauNode\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Proof\TableauNode\Sentence</type>
          </tag>
        </docblock>
        <argument line="43">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="54" package="">
        <name>setSentence</name>
        <type>function</type>
        <docblock line="48">
          <description><![CDATA[Sets the sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="48" name="param" description="The sentence to place on the node." type="\GoTableaux\Proof\TableauNode\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Proof\TableauNode\Sentence</type>
          </tag>
          <tag line="48" name="return" description="Current instance." type="\GoTableaux\Proof\TableauNode\SentenceNode">
            <type by_reference="false">\GoTableaux\Proof\TableauNode\SentenceNode</type>
          </tag>
        </docblock>
        <argument line="54">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="64" package="">
        <name>getSentence</name>
        <type>function</type>
        <docblock line="59">
          <description><![CDATA[Gets the sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="return" description="The sentence on the node." type="\GoTableaux\Proof\TableauNode\Sentence">
            <type by_reference="false">\GoTableaux\Proof\TableauNode\Sentence</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Proof/TableauNode.php" hash="595f6ab37d09d69993d0666cfc051bca" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $branch in tickAtBranch()</error>
      <error line="43" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $branch in isTickedAtBranch()</error>
    </parse_markers>
    <class final="false" abstract="true" namespace="GoTableaux\Proof" line="28" package="GoTableaux">
      <name>TableauNode</name>
      <full_name>\GoTableaux\Proof\TableauNode</full_name>
      <extends/>
      <docblock line="24">
        <description><![CDATA[Represents a node on a branch.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="37" package="">
        <name>tickAtBranch</name>
        <type>function</type>
        <docblock line="30">
          <description><![CDATA[Ticks the node relative to a branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="param" description="The branch relative to which to tick the node." type="\GoTableaux\Proof\Branch" variable="$branch">
            <type by_reference="false">\GoTableaux\Proof\Branch</type>
          </tag>
          <tag line="30" name="return" description="Current instance." type="\GoTableaux\Proof\Node">
            <type by_reference="false">\GoTableaux\Proof\Node</type>
          </tag>
        </docblock>
        <argument line="37">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="49" package="">
        <name>isTickedAtBranch</name>
        <type>function</type>
        <docblock line="43">
          <description><![CDATA[Checks whether the node is ticked relative to a particular branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="param" description="The branch relative to which to check." type="\GoTableaux\Proof\Branch" variable="$branch">
            <type by_reference="false">\GoTableaux\Proof\Branch</type>
          </tag>
          <tag line="43" name="return" description="Whether the node is ticked relative to $branch." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Proof/TableauStructure.php" hash="7aa2566ac03098773f23a59cdd11976c" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <critical line="40" code="50019">No short description for property $tableau</critical>
      <critical line="46" code="50019">No short description for property $nodes</critical>
      <critical line="52" code="50019">No short description for property $tickedNodes</critical>
      <critical line="58" code="50019">No short description for property $structures</critical>
      <critical line="64" code="50019">No short description for property $closed</critical>
      <error line="83" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $node in findBranchesWithNode()</error>
      <error line="164" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $node in nodeIsTicked()</error>
    </parse_markers>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Proof" line="38" package="GoTableaux">
      <name>TableauStructure</name>
      <full_name>\GoTableaux\Proof\TableauStructure</full_name>
      <extends/>
      <docblock line="26">
        <description><![CDATA[Represents the proper 'tree' structure of a tableau.]]></description>
        <long-description><![CDATA[<p>This is a simple composition structure class which takes a {@link Tableau}
object and creates a tree structure from its branches. Thinking of a branch
as a tuple of nodes, a single node can appear on more than one branch. This
is helpful in applying rules. This class collapses common nodes into one
structure. A structure comprises an array of {@link Node} objects, and an
array of self-similar Structure objects.</p>]]></long-description>
        <tag line="26" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="44" package="Default">
        <name>$tableau</name>
        <default><![CDATA[]]></default>
        <docblock line="40">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="var" description="" type="\GoTableaux\Proof\Tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="40" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="50" package="Default">
        <name>$nodes</name>
        <default><![CDATA[array()]]></default>
        <docblock line="46">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="var" description="Array of {@link Node} objects." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="46" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="56" package="Default">
        <name>$tickedNodes</name>
        <default><![CDATA[array()]]></default>
        <docblock line="52">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="var" description="Array of {@link Node} objects." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="52" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="62" package="Default">
        <name>$structures</name>
        <default><![CDATA[array()]]></default>
        <docblock line="58">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="var" description="Array of self-similar objects." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="58" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="68" package="Default">
        <name>$closed</name>
        <default><![CDATA[false]]></default>
        <docblock line="64">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="64" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="64" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux\Proof" line="76" package="">
        <name>getInstance</name>
        <type>function</type>
        <docblock line="70">
          <description><![CDATA[Creates an instance from a tableau.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="70" name="param" description="The tableau whose structure to represent." type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="70" name="return" description="New instance." type="\GoTableaux\Proof\Structure">
            <type by_reference="false">\GoTableaux\Proof\Structure</type>
          </tag>
        </docblock>
        <argument line="76">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="GoTableaux\Proof" line="90" package="">
        <name>findBranchesWithNode</name>
        <type>function</type>
        <docblock line="83">
          <description><![CDATA[Gets all branches that have a particular node on them.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="83" name="param" description="Array of {@link Branch}es to search." type="array" variable="$searchBranches">
            <type by_reference="false">array</type>
          </tag>
          <tag line="83" name="param" description="The node to search for." type="\GoTableaux\Proof\Node" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\Node</type>
          </tag>
          <tag line="83" name="return" description="Array of branches." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="90">
          <name>$searchBranches</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="90">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>TableauNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="GoTableaux\Proof" line="104" package="">
        <name>findNodesCommonToBranches</name>
        <type>function</type>
        <docblock line="98">
          <description><![CDATA[Gets all nodes that are on each of an array of branches.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="98" name="param" description="Array of {@link Branch}es." type="array" variable="$branches">
            <type by_reference="false">array</type>
          </tag>
          <tag line="98" name="return" description="Array of common {@link Node}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$branches</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="126" package="">
        <name>setTableau</name>
        <type>function</type>
        <docblock line="120">
          <description><![CDATA[Sets the tableau to represent.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="120" name="param" description="The tableau whose structure to represent." type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="120" name="return" description="Current instance." type="\GoTableaux\Proof\Structure">
            <type by_reference="false">\GoTableaux\Proof\Structure</type>
          </tag>
        </docblock>
        <argument line="126">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="137" package="">
        <name>build</name>
        <type>function</type>
        <docblock line="132">
          <description><![CDATA[Builds the tree structure.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="132" name="return" description="Current instance." type="\GoTableaux\Proof\Structure">
            <type by_reference="false">\GoTableaux\Proof\Structure</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="149" package="">
        <name>getNodes</name>
        <type>function</type>
        <docblock line="144">
          <description><![CDATA[Gets the nodes of the current structure.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="144" name="return" description="Array of {@link Node}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="159" package="">
        <name>getStructures</name>
        <type>function</type>
        <docblock line="154">
          <description><![CDATA[Gets the child structures of the current structure.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="154" name="return" description="Array of {@link Structure}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="170" package="">
        <name>nodeIsTicked</name>
        <type>function</type>
        <docblock line="164">
          <description><![CDATA[Checks whether a node is ticked relative to the current structure.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="164" name="param" description="The node to check." type="\GoTableaux\Proof\Node" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\Node</type>
          </tag>
          <tag line="164" name="return" description="Whether the node is ticked." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="170">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>TableauNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="180" package="">
        <name>isClosed</name>
        <type>function</type>
        <docblock line="175">
          <description><![CDATA[Checks whether the structure is closed.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="175" name="return" description="Whether the structure is closed." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux\Proof" line="192" package="">
        <name>structurize</name>
        <type>function</type>
        <docblock line="185">
          <description><![CDATA[Recursive structurizing function.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="185" name="param" description="Array of {@link Branch}es to structurize." type="array" variable="$branches">
            <type by_reference="false">array</type>
          </tag>
          <tag line="185" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="185" name="access" description="private"/>
        </docblock>
        <argument line="192">
          <name>$branches</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Proof.php" hash="879cc7b5df85eaf8c486f0b55fade776" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="true" namespace="GoTableaux" line="29" package="Proof">
      <name>Proof</name>
      <full_name>\GoTableaux\Proof</full_name>
      <extends/>
      <docblock line="24">
        <description><![CDATA[Represents a proof.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Proof"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="36" package="Default">
        <name>$argument</name>
        <default><![CDATA[]]></default>
        <docblock line="31">
          <description><![CDATA[Holds the argument for the proof.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="var" description="" type="\GoTableaux\Argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="31" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="43" package="Default">
        <name>$proofSystem</name>
        <default><![CDATA[]]></default>
        <docblock line="38">
          <description><![CDATA[Holds a reference to the proof system.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="" type="\GoTableaux\ProofSystem">
            <type by_reference="false">\GoTableaux\ProofSystem</type>
          </tag>
          <tag line="38" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="51" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="45">
          <description><![CDATA[Constructor. Initializes argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="param" description="Argument for the proof." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="45" name="param" description="The proof system of the proof." type="\GoTableaux\ProofSystem" variable="$proofSystem">
            <type by_reference="false">\GoTableaux\ProofSystem</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
        <argument line="51">
          <name>$proofSystem</name>
          <default><![CDATA[]]></default>
          <type>ProofSystem</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="62" package="">
        <name>getArgument</name>
        <type>function</type>
        <docblock line="57">
          <description><![CDATA[Gets the Argument object.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="return" description="The argument." type="\GoTableaux\Argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="72" package="">
        <name>getProofSystem</name>
        <type>function</type>
        <docblock line="67">
          <description><![CDATA[Gets the ProofSystem object.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="67" name="return" description="The proof's proof system." type="\GoTableaux\ProofSystem">
            <type by_reference="false">\GoTableaux\ProofSystem</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="82" package="">
        <name>isValid</name>
        <type>function</type>
        <docblock line="77">
          <description><![CDATA[Checks whether the proof is valid]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="77" name="return" description="Whether the proof is valid." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ProofSystem/TableauxSystem/Bivalent.php" hash="1d9b5900ea1069f4c55352e33c82fe6f" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="36" code="50018">No DocBlock was found for property $branchClass</error>
      <error line="38" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $tableau in buildTrunk()</error>
      <error line="53" code="50010">No DocBlock was found for method induceModel()</error>
    </parse_markers>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Argument">\GoTableaux\Argument</namespace-alias>
    <namespace-alias name="Tableau">\GoTableaux\Proof\Tableau</namespace-alias>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <class final="false" abstract="true" namespace="GoTableaux\ProofSystem\TableauxSystem" line="33" package="GoTableaux">
      <name>Bivalent</name>
      <full_name>\GoTableaux\ProofSystem\TableauxSystem\Bivalent</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem</extends>
      <docblock line="29">
        <description><![CDATA[Represents a bivalent propositional tableaux system.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="29" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="36" package="Default">
        <name>$branchClass</name>
        <default><![CDATA['Propositional']]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem" line="46" package="">
        <name>buildTrunk</name>
        <type>function</type>
        <docblock line="38">
          <description><![CDATA[Builds a modal tableau trunk.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="param" description="The modal tableau." type="\GoTableaux\ProofSystem\TableauxSystem\ModalTableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem\ModalTableau</type>
          </tag>
          <tag line="38" name="param" description="The argument." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="38" name="param" description="The logic of the proof system." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="38" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="46">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
        <argument line="46">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
        <argument line="46">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem" line="53" package="">
        <name>induceModel</name>
        <type>function</type>
        <argument line="53">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofSystem/TableauxSystem/BranchRule/ModalReflexiveRule.php" hash="f13bb38223da5ae200b8d383e273affc" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $branch in apply()</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\ProofSystem\TableauxSystem\BranchRule" line="28" package="GoTableaux">
      <name>ModalReflexive</name>
      <full_name>\GoTableaux\ProofSystem\TableauxSystem\BranchRule\ModalReflexive</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="24">
        <description><![CDATA[Implements the reflexivity rule for a standard modal tableaux system.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\BranchRule" line="43" package="">
        <name>apply</name>
        <type>function</type>
        <docblock line="30">
          <description><![CDATA[Implements the Reflexive Rule.]]></description>
          <long-description><![CDATA[<p>A node is reflexive exactly when both indexes are equal. This rule
searches for any indexes on the branch for which there is not currently
a reflexive node. If one is found, it adds a reflexive node with the
class {@link AccessNode}. If more than one are found, it adds
a node for least index.</p>]]></long-description>
          <tag line="30" name="param" description="The modal branch to search and apply the rule to." type="\GoTableaux\ProofSystem\TableauxSystem\BranchRule\ModalBranch" variable="$branch">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem\BranchRule\ModalBranch</type>
          </tag>
          <tag line="30" name="param" description="The Tableaux system." type="\GoTableaux\ProofSystem\TableauxSystem\BranchRule\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem\BranchRule\Logic</type>
          </tag>
          <tag line="30" name="return" description="Whether the rule was applied." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="43">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
        <argument line="43">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofSystem/TableauxSystem/BranchRule/ModalTransitiveRule.php" hash="1e2ba56444e706bbabd58fa3eccd39be" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $branch in apply()</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\ProofSystem\TableauxSystem\BranchRule" line="28" package="GoTableaux">
      <name>ModalTransitive</name>
      <full_name>\GoTableaux\ProofSystem\TableauxSystem\BranchRule\ModalTransitive</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</implements>
      <docblock line="24">
        <description><![CDATA[Implements the transitivity rule for a modal tableaux system.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\BranchRule" line="41" package="">
        <name>apply</name>
        <type>function</type>
        <docblock line="30">
          <description><![CDATA[Implements the Transitive Rule.]]></description>
          <long-description><![CDATA[<p>A world index is transitive exactly when it access all worlds that are
accessed by all the worlds it accesses. The first non-transitive index
found is remedied.</p>]]></long-description>
          <tag line="30" name="param" description="The modal branch to search and apply the rule to." type="\GoTableaux\ProofSystem\TableauxSystem\BranchRule\ModalBranch" variable="$branch">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem\BranchRule\ModalBranch</type>
          </tag>
          <tag line="30" name="param" description="The Tableaux system." type="\GoTableaux\ProofSystem\TableauxSystem\BranchRule\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem\BranchRule\Logic</type>
          </tag>
          <tag line="30" name="return" description="Whether the rule was applied." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
        <argument line="41">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofSystem/TableauxSystem/BranchRule.php" hash="0863d5559a8c82f1c51de9ff0443bb32" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $branch in apply()</error>
    </parse_markers>
    <interface namespace="GoTableaux\ProofSystem\TableauxSystem" line="28" package="GoTableaux">
      <name>BranchRule</name>
      <full_name>\GoTableaux\ProofSystem\TableauxSystem\BranchRule</full_name>
      <extends/>
      <docblock line="24">
        <description><![CDATA[Represents a tableau rule that applies to a branch.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem" line="45" package="">
        <name>apply</name>
        <type>function</type>
        <docblock line="30">
          <description><![CDATA[Applies the rule to a branch.]]></description>
          <long-description><![CDATA[<p>The implementation should first check to determine whether the rule
applies to the branch. If so, nodes should be added and ticked
accordingly. If the rule is a branching rule, a new branch (or branches)
should be created as a copy of the original branch and returned. Since
$branch is a reference, any alterations on it will be reflected on the
original tableau.</p>]]></long-description>
          <tag line="30" name="param" description="The branch to which to apply the rule." type="\GoTableaux\ProofSystem\TableauxSystem\Branch" variable="$branch">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem\Branch</type>
          </tag>
          <tag line="30" name="param" description="The logic." type="\GoTableaux\ProofSystem\TableauxSystem\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem\Logic</type>
          </tag>
          <tag line="30" name="return" description="Whether the rule did apply." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="30" name="throws" description="RuleException} on any errors." type="\GoTableaux\ProofSystem\TableauxSystem\{@link">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem\{@link</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
        <argument line="45">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="ProofSystem/TableauxSystem/ClosureRule.php" hash="d8aa5d307d0ab071ac466c922b877abc" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $branch in doesApply()</error>
    </parse_markers>
    <interface namespace="GoTableaux\ProofSystem\TableauxSystem" line="28" package="GoTableaux">
      <name>ClosureRule</name>
      <full_name>\GoTableaux\ProofSystem\TableauxSystem\ClosureRule</full_name>
      <extends/>
      <docblock line="24">
        <description><![CDATA[Represents a tableau closure rule.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem" line="42" package="">
        <name>doesApply</name>
        <type>function</type>
        <docblock line="30">
          <description><![CDATA[Determines whether a branch should be closed, according to the
implementation of the rule.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="param" description="The branch to check for applicability." type="\GoTableaux\ProofSystem\TableauxSystem\Branch" variable="$branch">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem\Branch</type>
          </tag>
          <tag line="30" name="param" description="The logic." type="\GoTableaux\ProofSystem\TableauxSystem\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem\Logic</type>
          </tag>
          <tag line="30" name="return" description="Whether the closure rule applies, and thus whether the branch should be closed. In the default implementation of Tableau::build(), the closing of the branch occurs when true is returned." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="30" name="throws" description="TableauException}" type="\GoTableaux\ProofSystem\TableauxSystem\{@link">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem\{@link</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
        <argument line="42">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="ProofSystem/TableauxSystem/ManyValued.php" hash="124f0ac139c57e36ea5555ba456bba6f" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="36" code="50018">No DocBlock was found for property $branchClass</error>
      <error line="52" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $tableau in buildTrunk()</error>
      <error line="67" code="50010">No DocBlock was found for method induceModel()</error>
    </parse_markers>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Argument">\GoTableaux\Argument</namespace-alias>
    <namespace-alias name="Tableau">\GoTableaux\Proof\Tableau</namespace-alias>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <class final="false" abstract="true" namespace="GoTableaux\ProofSystem\TableauxSystem" line="33" package="GoTableaux">
      <name>ManyValued</name>
      <full_name>\GoTableaux\ProofSystem\TableauxSystem\ManyValued</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem</extends>
      <docblock line="29">
        <description><![CDATA[Represents a many-valued propositional tableaux system.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="29" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="36" package="Default">
        <name>$branchClass</name>
        <default><![CDATA['ManyValued']]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem" line="45" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="38">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[<p>Adds designation marker meta symbols.</p>]]></long-description>
          <tag line="38" name="param" description="logic The logic of the proof system." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem" line="60" package="">
        <name>buildTrunk</name>
        <type>function</type>
        <docblock line="52">
          <description><![CDATA[Builds a modal tableau trunk.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="param" description="The modal tableau." type="\GoTableaux\ProofSystem\TableauxSystem\ModalTableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem\ModalTableau</type>
          </tag>
          <tag line="52" name="param" description="The argument." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="52" name="param" description="The logic of the proof system." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="52" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="60">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
        <argument line="60">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
        <argument line="60">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem" line="67" package="">
        <name>induceModel</name>
        <type>function</type>
        <argument line="67">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofSystem/TableauxSystem/Modal/ManyValued.php" hash="098823ecbf814bc1c372b322fa40ffd8" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="35" code="50018">No DocBlock was found for property $branchClass</error>
      <error line="37" code="50010">No DocBlock was found for method buildTrunk()</error>
      <error line="44" code="50010">No DocBlock was found for method induceModel()</error>
    </parse_markers>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Argument">\GoTableaux\Argument</namespace-alias>
    <namespace-alias name="Tableau">\GoTableaux\Proof\Tableau</namespace-alias>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\ProofSystem\TableauxSystem\Modal" line="33" package="GoTableaux">
      <name>ManyValued</name>
      <full_name>\GoTableaux\ProofSystem\TableauxSystem\Modal\ManyValued</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Modal</extends>
      <docblock line="29">
        <description><![CDATA[Represents a tableaux system for a many-valued modal logic.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="29" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="35" package="Default">
        <name>$branchClass</name>
        <default><![CDATA['ManyValued']]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Modal" line="37" package="">
        <name>buildTrunk</name>
        <type>function</type>
        <argument line="37">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
        <argument line="37">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
        <argument line="37">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Modal" line="44" package="">
        <name>induceModel</name>
        <type>function</type>
        <argument line="44">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofSystem/TableauxSystem/Modal.php" hash="656f0a8b48843f1cd84279e8960fb9c9" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="36" code="50018">No DocBlock was found for property $branchClass</error>
      <error line="52" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $tableau in buildTrunk()</error>
      <error line="67" code="50010">No DocBlock was found for method induceModel()</error>
    </parse_markers>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Argument">\GoTableaux\Argument</namespace-alias>
    <namespace-alias name="Tableau">\GoTableaux\Proof\Tableau</namespace-alias>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <class final="false" abstract="true" namespace="GoTableaux\ProofSystem\TableauxSystem" line="33" package="GoTableaux">
      <name>Modal</name>
      <full_name>\GoTableaux\ProofSystem\TableauxSystem\Modal</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem</extends>
      <docblock line="29">
        <description><![CDATA[Represents a bivalent modal tableaux system.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="29" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="36" package="Default">
        <name>$branchClass</name>
        <default><![CDATA['Modal']]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem" line="45" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="38">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[<p>Adds world and access relation meta symbols.</p>]]></long-description>
          <tag line="38" name="param" description="logic The logic of the proof system." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem" line="60" package="">
        <name>buildTrunk</name>
        <type>function</type>
        <docblock line="52">
          <description><![CDATA[Builds a modal tableau trunk.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="param" description="The modal tableau." type="\GoTableaux\ProofSystem\TableauxSystem\ModalTableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem\ModalTableau</type>
          </tag>
          <tag line="52" name="param" description="The argument." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="52" name="param" description="The logic of the proof system." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="52" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="60">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
        <argument line="60">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
        <argument line="60">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem" line="67" package="">
        <name>induceModel</name>
        <type>function</type>
        <argument line="67">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofSystem/TableauxSystem.php" hash="9ba1fbcc70e49c50d5457c55ab380bec" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <critical line="53" code="50019">No short description for property $closureRule</critical>
      <critical line="59" code="50019">No short description for property $branchRules</critical>
      <error line="106" code="50014">Name of argument $branchRules does not match with the DocBlock's name $branchRule in addBranchRules()</error>
      <notice line="106" code="50013">Parameter $branchRule could not be found in addBranchRules()</notice>
      <error line="168" code="50010">No DocBlock was found for method constructProofForArgument()</error>
      <error line="188" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $tableau in isValidProof()</error>
    </parse_markers>
    <namespace-alias name="Settings">\GoTableaux\Settings</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Argument">\GoTableaux\Argument</namespace-alias>
    <namespace-alias name="Proof">\GoTableaux\Proof</namespace-alias>
    <namespace-alias name="Tableau">\GoTableaux\Proof\Tableau</namespace-alias>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="TableauException">\GoTableaux\Exception\Tableau</namespace-alias>
    <namespace-alias name="LoaderException">\GoTableaux\Exception\Loader</namespace-alias>
    <class final="false" abstract="true" namespace="GoTableaux\ProofSystem" line="37" package="GoTableaux">
      <name>TableauxSystem</name>
      <full_name>\GoTableaux\ProofSystem\TableauxSystem</full_name>
      <extends>\GoTableaux\ProofSystem</extends>
      <docblock line="33">
        <description><![CDATA[Represents a tableaux proof system.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="33" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="45" package="Default">
        <name>$branchRuleClasses</name>
        <default><![CDATA[array()]]></default>
        <docblock line="39">
          <description><![CDATA[Defines the branch rule classes names for the logic.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="39" name="see" description="\GoTableaux\ProofSystem\TableauxSystem::__construct()" refers="\GoTableaux\ProofSystem\TableauxSystem::__construct()"/>
          <tag line="39" name="see" description="\GoTableaux\ProofSystem\TableauxSystem::addBranchRules()" refers="\GoTableaux\ProofSystem\TableauxSystem::addBranchRules()"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="51" package="Default">
        <name>$branchClass</name>
        <default><![CDATA['TableauBranch']]></default>
        <docblock line="47">
          <description><![CDATA[Defines the branch class name for the tableaux.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="57" package="Default">
        <name>$closureRule</name>
        <default><![CDATA[]]></default>
        <docblock line="53">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="53" name="var" description="" type="\GoTableaux\ProofSystem\ClosureRule">
            <type by_reference="false">\GoTableaux\ProofSystem\ClosureRule</type>
          </tag>
          <tag line="53" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="62" package="Default">
        <name>$branchRules</name>
        <default><![CDATA[array()]]></default>
        <docblock line="59">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="var" description="Array of {@link BranchRule}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem" line="71" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="64">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[<p>Adds tickMarker and closeMarker meta symbols.</p>]]></long-description>
          <tag line="64" name="param" description="logic The logic of the proof system." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
        </docblock>
        <argument line="71">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem" line="83" package="">
        <name>getClosureRule</name>
        <type>function</type>
        <docblock line="78">
          <description><![CDATA[Gets the closure rule.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="78" name="return" description="The closure rule." type="\GoTableaux\ProofSystem\ClosureRule">
            <type by_reference="false">\GoTableaux\ProofSystem\ClosureRule</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem" line="99" package="">
        <name>applyClosureRule</name>
        <type>function</type>
        <docblock line="92">
          <description><![CDATA[Applies the closure rule to a tableau.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="92" name="param" description="The tableau to which to apply closure rule." type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="92" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="92" name="throws" description="TableauException} on empty closure rule." type="\GoTableaux\ProofSystem\{@link">
            <type by_reference="false">\GoTableaux\ProofSystem\{@link</type>
          </tag>
        </docblock>
        <argument line="99">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem" line="112" package="">
        <name>addBranchRules</name>
        <type>function</type>
        <docblock line="106">
          <description><![CDATA[Adds tableau rules. Duplicate entries are ignored.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="106" name="param" description="The branch rule(s) to add." type="\GoTableaux\ProofSystem\BranchRule|array" variable="$branchRule">
            <type by_reference="false">\GoTableaux\ProofSystem\BranchRule</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="106" name="return" description="Current Instance." type="\GoTableaux\ProofSystem\TableauxSystem">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem</type>
          </tag>
        </docblock>
        <argument line="112">
          <name>$branchRules</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem" line="131" package="">
        <name>getBranchRules</name>
        <type>function</type>
        <docblock line="125">
          <description><![CDATA[Gets the tableau branch rules.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="125" name="return" description="Array of {@link BranchRule}s." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="125" name="throws" description="" type="\GoTableaux\ProofSystem\"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem" line="163" package="">
        <name>getBranchClass</name>
        <type>function</type>
        <docblock line="158">
          <description><![CDATA[Gets the branch class name.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="158" name="return" description="Branch class name." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem" line="168" package="">
        <name>constructProofForArgument</name>
        <type>function</type>
        <argument line="168">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem" line="195" package="">
        <name>isValidProof</name>
        <type>function</type>
        <docblock line="188">
          <description><![CDATA[Checks whether a Tableau is a valid proof.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="188" name="param" description="The tableau whose validity to check." type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="188" name="return" description="Whether the tableau is a valid proof." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="188" name="throws" description="ProofException} when $proof is of wrong type." type="\GoTableaux\ProofSystem\{@link">
            <type by_reference="false">\GoTableaux\ProofSystem\{@link</type>
          </tag>
        </docblock>
        <argument line="195">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem" line="210" package="">
        <name>getCountermodel</name>
        <type>function</type>
        <docblock line="200">
          <description><![CDATA[Gets a counterexample from a Tableau proof.]]></description>
          <long-description><![CDATA[<p>A counterexample for a tableaux system is a model induced from an open
branch.</p>]]></long-description>
          <tag line="200" name="param" description="The tableau from which to build the counterexample" type="\GoTableaux\Proof" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="200" name="return" description="The countermodel extracted from the proof." type="\GoTableaux\ProofSystem\Model">
            <type by_reference="false">\GoTableaux\ProofSystem\Model</type>
          </tag>
          <tag line="200" name="throws" description="TableauException} on no open branches or type error." type="\GoTableaux\ProofSystem\{@link">
            <type by_reference="false">\GoTableaux\ProofSystem\{@link</type>
          </tag>
        </docblock>
        <argument line="210">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux\ProofSystem" line="225" package="">
        <name>induceModel</name>
        <type>function</type>
        <docblock line="219">
          <description><![CDATA[Induces a model from an open branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="219" name="param" description="The open branch from which to induce a model" type="\GoTableaux\Proof\TableauBranch" variable="$branch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
          <tag line="219" name="return" description="The induced model." type="\GoTableaux\ProofSystem\Model">
            <type by_reference="false">\GoTableaux\ProofSystem\Model</type>
          </tag>
        </docblock>
        <argument line="225">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux\ProofSystem" line="235" package="">
        <name>buildTrunk</name>
        <type>function</type>
        <docblock line="227">
          <description><![CDATA[Constructs the initial list (trunk) for an argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="227" name="param" description="The tableau to attach the" type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="227" name="param" description="The argument for which to build the trunk." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="227" name="param" description="The logic of the proof system." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="227" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="235">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
        <argument line="235">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
        <argument line="235">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofSystem.php" hash="d0ef93fe0548fb84b90b5be4bb539957" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <critical line="37" code="50019">No short description for property $metaSymbolNames</critical>
    </parse_markers>
    <class final="false" abstract="true" namespace="GoTableaux" line="28" package="Proof">
      <name>ProofSystem</name>
      <full_name>\GoTableaux\ProofSystem</full_name>
      <extends/>
      <docblock line="24">
        <description><![CDATA[Represents a proof system.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Proof"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="35" package="Default">
        <name>$logic</name>
        <default><![CDATA[]]></default>
        <docblock line="30">
          <description><![CDATA[Holds a reference to the logic instance.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="\GoTableaux\Logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="30" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="40" package="Default">
        <name>$metaSymbolNames</name>
        <default><![CDATA[array()]]></default>
        <docblock line="37">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="var" description="Array of meta symbol names." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="47" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="42">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="param" description="The logic for the proof system to use." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
        </docblock>
        <argument line="47">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="59" package="">
        <name>getLogic</name>
        <type>function</type>
        <docblock line="52">
          <description><![CDATA[Gets the logic instance.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="return" description="The logic instance." type="\GoTableaux\Logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="52" name="throws" description="ProofException} on empty logic." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
          <tag line="52" name="see" description="\GoTableaux\Logic::__construct()" refers="\GoTableaux\Logic::__construct()"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="69" package="">
        <name>getMetaSymbolNames</name>
        <type>function</type>
        <docblock line="64">
          <description><![CDATA[Gets the meta symbols names.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="64" name="return" description="The meta symbol names." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux" line="80" package="">
        <name>constructProofForArgument</name>
        <type>function</type>
        <docblock line="74">
          <description><![CDATA[Constructs a proof for an argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="74" name="param" description="The argument for which to construct the proof." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="74" name="return" description="$proof The constructed proof object." type="\GoTableaux\Poof">
            <type by_reference="false">\GoTableaux\Poof</type>
          </tag>
        </docblock>
        <argument line="80">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux" line="89" package="">
        <name>isValidProof</name>
        <type>function</type>
        <docblock line="82">
          <description><![CDATA[Checks whether a putative proof is valid.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="82" name="param" description="The proof whose validity to check." type="\GoTableaux\Proof" variable="$proof">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="82" name="return" description="Whether the proof is valid." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="82" name="throws" description="ProofException} on type errors." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
        </docblock>
        <argument line="89">
          <name>$proof</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux" line="98" package="">
        <name>getCountermodel</name>
        <type>function</type>
        <docblock line="91">
          <description><![CDATA[Gets a counterexample from a proof.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="91" name="param" description="The (putative) proof from which to get a counterexample." type="\GoTableaux\Proof" variable="$proof">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="91" name="return" description="The countermodel built from the proof." type="\GoTableaux\Model">
            <type by_reference="false">\GoTableaux\Model</type>
          </tag>
          <tag line="91" name="throws" description="ProofException} on type errors." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
        </docblock>
        <argument line="98">
          <name>$proof</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofWriter/Tableau/JSON.php" hash="db6bfe3cbbe11e64efa39ee6f1ff6c78" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Structure">\GoTableaux\Proof\TableauStructure</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\ProofWriter\Tableau" line="30" package="GoTableaux">
      <name>JSON</name>
      <full_name>\GoTableaux\ProofWriter\Tableau\JSON</full_name>
      <extends>\GoTableaux\ProofWriter\Tableau</extends>
      <docblock line="26">
        <description><![CDATA[Represents a JSON tableau proof writer.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="26" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter\Tableau" line="38" package="">
        <name>writeStructure</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[Makes a string representation of a tableau structure.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="param" description="The tableau structure to represent." type="\GoTableaux\Proof\TableauStructure" variable="$structure">
            <type by_reference="false">\GoTableaux\Proof\TableauStructure</type>
          </tag>
          <tag line="32" name="return" description="The string representation of the structure." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="38">
          <name>$structure</name>
          <default><![CDATA[]]></default>
          <type>Structure</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofWriter/Tableau/LaTeX_Qtree.php" hash="9acbe2b602f370fe21747f7c0fd9ea64" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="33" code="50018">No DocBlock was found for property $translations</error>
      <error line="42" code="50018">No DocBlock was found for property $tableauxCommands</error>
      <error line="51" code="50010">No DocBlock was found for method writeWorldIndex()</error>
      <error line="129" code="50010">No DocBlock was found for method formatCommand()</error>
    </parse_markers>
    <namespace-alias name="Proof">\GoTableaux\Proof</namespace-alias>
    <namespace-alias name="Structure">\GoTableaux\Proof\TableauStructure</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\ProofWriter\Tableau" line="31" package="GoTableaux">
      <name>LaTeX_Qtree</name>
      <full_name>\GoTableaux\ProofWriter\Tableau\LaTeX_Qtree</full_name>
      <extends>\GoTableaux\ProofWriter\Tableau</extends>
      <docblock line="27">
        <description><![CDATA[Writes tableaux using the LaTeX Qtree package.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="33" package="Default">
        <name>$translations</name>
        <default><![CDATA[array(
		'closeMarker' 			=> '\GTcloseMarker',
		'designatedMarker' 		=> '\GTdesignatedMarker',
		'undesignatedMarker' 	=> '\GTundesignatedMarker',
		'worldSymbol' 			=> '\GTworldSymbol',
		'accessRelationSymbol' 	=> '\GTaccessRelationSymbol',
		'tickMarker'			=> '\GTtickMarker',
	)]]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="42" package="Default">
        <name>$tableauxCommands</name>
        <default><![CDATA[array(
		'closeMarker' 			=> '\times',
		'designatedMarker' 		=> '+',
		'undesignatedMarker' 	=> '-',
		'worldSymbol' 			=> 'w',
		'accessRelationSymbol' 	=> '\mathcal{R}',
		'tickMarker'			=> '\bullet',
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter\Tableau" line="51" package="">
        <name>writeWorldIndex</name>
        <type>function</type>
        <argument line="51">
          <name>$index</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter\Tableau" line="65" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="56">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[<p>Decorates the sentence writer with the LaTeX decorator; sets default
LaTeX translations, and removes the tickMarker translation.</p>]]></long-description>
          <tag line="56" name="param" description="The with which to initialize the writer." type="\GoTableaux\Proof" variable="$proof">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="56" name="param" description="The sentence notation type to use." type="string" variable="$sentenceWriterType">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$proof</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
        <argument line="65">
          <name>$sentenceWriterType</name>
          <default><![CDATA['Standard']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter\Tableau" line="79" package="">
        <name>writeProof</name>
        <type>function</type>
        <docblock line="73">
          <description><![CDATA[Makes a string representation of a proof.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="param" description="The proof to represent." type="\GoTableaux\Proof" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="73" name="return" description="The string representation." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter\Tableau" line="101" package="">
        <name>writeStructure</name>
        <type>function</type>
        <docblock line="95">
          <description><![CDATA[Makes a string representation of a tableau structure.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="95" name="param" description="The tableau structure to represent." type="\GoTableaux\Proof\TableauStructure" variable="$structure">
            <type by_reference="false">\GoTableaux\Proof\TableauStructure</type>
          </tag>
          <tag line="95" name="return" description="The string representation of the structure." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="101">
          <name>$structure</name>
          <default><![CDATA[]]></default>
          <type>Structure</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter\Tableau" line="124" package="">
        <name>writeProofBody</name>
        <type>function</type>
        <docblock line="118">
          <description><![CDATA[Writes the body of the proof.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="118" name="param" description="The proof whose body to write." type="\GoTableaux\Proof" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="118" name="return" description="The string representation." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="124">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter\Tableau" line="129" package="">
        <name>formatCommand</name>
        <type>function</type>
        <argument line="129">
          <name>$command</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofWriter/Tableau/Simple.php" hash="36c79a6072823709dcd4516ea847106a" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Structure">\GoTableaux\Proof\TableauStructure</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\ProofWriter\Tableau" line="30" package="GoTableaux">
      <name>Simple</name>
      <full_name>\GoTableaux\ProofWriter\Tableau\Simple</full_name>
      <extends>\GoTableaux\ProofWriter\Tableau</extends>
      <docblock line="26">
        <description><![CDATA[Represents a simple tableau proof writer.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="26" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter\Tableau" line="38" package="">
        <name>writeStructure</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[Makes a string representation of a tableau structure.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="param" description="The tableau structure to represent." type="\GoTableaux\Proof\TableauStructure" variable="$structure">
            <type by_reference="false">\GoTableaux\Proof\TableauStructure</type>
          </tag>
          <tag line="32" name="return" description="The string representation of the structure." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="38">
          <name>$structure</name>
          <default><![CDATA[]]></default>
          <type>Structure</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofWriter/Tableau.php" hash="750c61a255f01b4a6f1703f66146f9c2" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="53" code="50010">No DocBlock was found for method writeCloseMarker()</error>
      <error line="58" code="50010">No DocBlock was found for method writeDesignationMarker()</error>
      <error line="63" code="50010">No DocBlock was found for method writeTickMarker()</error>
      <error line="68" code="50010">No DocBlock was found for method writeWorldIndex()</error>
      <error line="99" code="50014">Name of argument $tableau does not match with the DocBlock's name $tableauOrStructure in getArray()</error>
      <notice line="99" code="50013">Parameter $tableauOrStructure could not be found in getArray()</notice>
      <notice line="99" code="50013">Parameter $logic could not be found in getArray()</notice>
      <error line="112" code="50010">No DocBlock was found for method writeProof()</error>
      <error line="179" code="50010">No DocBlock was found for method writeStructure()</error>
    </parse_markers>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Proof">\GoTableaux\Proof</namespace-alias>
    <namespace-alias name="SentenceWriter">\GoTableaux\SentenceWriter</namespace-alias>
    <namespace-alias name="TableauStructure">\GoTableaux\Proof\TableauStructure</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="SentenceNode">\GoTableaux\Proof\TableauNode\Sentence</namespace-alias>
    <namespace-alias name="AccessNode">\GoTableaux\Proof\TableauNode\Access</namespace-alias>
    <namespace-alias name="ModalNode">\GoTableaux\Proof\TableauNode\Modal</namespace-alias>
    <namespace-alias name="ManyValuedNode">\GoTableaux\Proof\TableauNode\ManyValued</namespace-alias>
    <class final="false" abstract="true" namespace="GoTableaux\ProofWriter" line="38" package="GoTableaux">
      <name>Tableau</name>
      <full_name>\GoTableaux\ProofWriter\Tableau</full_name>
      <extends>\GoTableaux\ProofWriter</extends>
      <docblock line="34">
        <description><![CDATA[Represents a tableaux writer.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="34" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="44" package="Default">
        <name>$translations</name>
        <default><![CDATA[array(
		'tickMarker'			=> '^',
		'closeMarker' 			=> '[><]',
		'designatedMarker' 		=> '+',
		'undesignatedMarker' 	=> '-',
		'worldSymbol' 			=> 'w',
		'accessRelationSymbol' 	=> 'R',
	)]]></default>
        <docblock line="40">
          <description><![CDATA[Translations for tableau-wide markings.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="53" package="">
        <name>writeCloseMarker</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="58" package="">
        <name>writeDesignationMarker</name>
        <type>function</type>
        <argument line="58">
          <name>$isDesignated</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="63" package="">
        <name>writeTickMarker</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="68" package="">
        <name>writeWorldIndex</name>
        <type>function</type>
        <argument line="68">
          <name>$index</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="81" package="">
        <name>writeNode</name>
        <type>function</type>
        <docblock line="73">
          <description><![CDATA[Writes a node based on its type.]]></description>
          <long-description><![CDATA[<p>Calls the appropriate functions based on the type of node.</p>]]></long-description>
          <tag line="73" name="param" description="The node to write." type="\GoTableaux\Proof\TableauNode" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
          <tag line="73" name="return" description="The string representation of the node." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="107" package="">
        <name>getArray</name>
        <type>function</type>
        <docblock line="99">
          <description><![CDATA[Gets a formatted data array of a tableau.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="99" name="param" description="Tableau or Structure object to get data from." type="\GoTableaux\Proof" variable="$tableauOrStructure">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="99" name="param" description="The logic, required if first parameter is a Structure." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="99" name="return" description="Formatted data array." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="107">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="112" package="">
        <name>writeProof</name>
        <type>function</type>
        <argument line="112">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="123" package="">
        <name>getClassesForNode</name>
        <type>function</type>
        <docblock line="117">
          <description><![CDATA[Gets type information about a node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="117" name="param" description="The node to examine." type="\GoTableaux\Proof\TableauNode" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
          <tag line="117" name="return" description="The classes to which the node belongs." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="123">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="144" package="">
        <name>getArrayForStructure</name>
        <type>function</type>
        <docblock line="137">
          <description><![CDATA[Creates an array structure with tree structure data for exporting.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="137" name="param" description="The tree structure to serialize." type="\GoTableaux\Proof\TableauStructure" variable="$structure">
            <type by_reference="false">\GoTableaux\Proof\TableauStructure</type>
          </tag>
          <tag line="137" name="param" description="" type="integer" variable="$n">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="137" name="return" description="The tree data." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="144">
          <name>$structure</name>
          <default><![CDATA[]]></default>
          <type>TableauStructure</type>
        </argument>
        <argument line="144">
          <name>$n</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="179" package="">
        <name>writeStructure</name>
        <type>function</type>
        <argument line="179">
          <name>$structure</name>
          <default><![CDATA[]]></default>
          <type>TableauStructure</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofWriter.php" hash="4eda38f2fb59931422f06b1eac26ac42" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <critical line="33" code="50019">No short description for property $translations</critical>
      <critical line="39" code="50019">No short description for property $sentenceWriter</critical>
      <critical line="45" code="50019">No short description for property $vocabulary</critical>
    </parse_markers>
    <namespace-alias name="WriterException">\GoTableaux\Exception\Writer</namespace-alias>
    <namespace-alias name="SentenceWriterDecorator">\GoTableaux\SentenceWriter\Decorator</namespace-alias>
    <class final="false" abstract="true" namespace="GoTableaux" line="31" package="Proof">
      <name>ProofWriter</name>
      <full_name>\GoTableaux\ProofWriter</full_name>
      <extends/>
      <docblock line="27">
        <description><![CDATA[Writes proofs.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="Proof"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="37" package="Default">
        <name>$translations</name>
        <default><![CDATA[array()]]></default>
        <docblock line="33">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="43" package="Default">
        <name>$sentenceWriter</name>
        <default><![CDATA[]]></default>
        <docblock line="39">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="var" description="" type="\GoTableaux\SentenceWriter">
            <type by_reference="false">\GoTableaux\SentenceWriter</type>
          </tag>
          <tag line="39" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="48" package="Default">
        <name>$vocabulary</name>
        <default><![CDATA[]]></default>
        <docblock line="45">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="var" description="" type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="58" package="">
        <name>getInstance</name>
        <type>function</type>
        <docblock line="50">
          <description><![CDATA[Gets a child instance.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="param" description="The proof to write." type="\GoTableaux\Proof" variable="$proof">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="50" name="param" description="Proof writer type." type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="50" name="param" description="The type of sentence writer to use." type="string" variable="$sentenceWriterType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="50" name="return" description="Created instance." type="\GoTableaux\ProofWriter">
            <type by_reference="false">\GoTableaux\ProofWriter</type>
          </tag>
        </docblock>
        <argument line="58">
          <name>$proof</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
        <argument line="58">
          <name>$type</name>
          <default><![CDATA['Simple']]></default>
          <type/>
        </argument>
        <argument line="58">
          <name>$sentenceWriterType</name>
          <default><![CDATA['Standard']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="71" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="65">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="param" description="The proof to write." type="\GoTableaux\Proof" variable="$proof">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="65" name="param" description="The type of sentence writer to use." type="string" variable="$sentenceWriterType">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="71">
          <name>$proof</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
        <argument line="71">
          <name>$sentenceWriterType</name>
          <default><![CDATA['Standard']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="84" package="">
        <name>addTranslations</name>
        <type>function</type>
        <docblock line="77">
          <description><![CDATA[Adds translations.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="77" name="param" description="The translations to add, where key is to be translated into value." type="array" variable="$translations">
            <type by_reference="false">array</type>
          </tag>
          <tag line="77" name="return" description="Current instance." type="\GoTableaux\ProofWriter">
            <type by_reference="false">\GoTableaux\ProofWriter</type>
          </tag>
        </docblock>
        <argument line="84">
          <name>$translations</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="96" package="">
        <name>removeTranslation</name>
        <type>function</type>
        <docblock line="90">
          <description><![CDATA[Removes a translation.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="90" name="param" description="Name of the translation to remove." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="90" name="return" description="Current instance." type="\GoTableaux\ProofWriter">
            <type by_reference="false">\GoTableaux\ProofWriter</type>
          </tag>
        </docblock>
        <argument line="96">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="108" package="">
        <name>getTranslation</name>
        <type>function</type>
        <docblock line="102">
          <description><![CDATA[Gets a translation.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="102" name="param" description="Name of the translation." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="102" name="return" description="The translation." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="108">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="120" package="">
        <name>getSentenceWriter</name>
        <type>function</type>
        <docblock line="115">
          <description><![CDATA[Gets the sentence writer object.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="115" name="return" description="The sentence writer." type="\GoTableaux\SentenceWriter">
            <type by_reference="false">\GoTableaux\SentenceWriter</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="131" package="">
        <name>setSentenceWriter</name>
        <type>function</type>
        <docblock line="125">
          <description><![CDATA[Sets the sentence writer object.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="125" name="param" description="The sentence writer to set." type="\GoTableaux\SentenceWriter" variable="$sentenceWriter">
            <type by_reference="false">\GoTableaux\SentenceWriter</type>
          </tag>
          <tag line="125" name="return" description="Current instance." type="\GoTableaux\ProofWriter">
            <type by_reference="false">\GoTableaux\ProofWriter</type>
          </tag>
        </docblock>
        <argument line="131">
          <name>$sentenceWriter</name>
          <default><![CDATA[]]></default>
          <type>SentenceWriter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="143" package="">
        <name>decorateSentenceWriter</name>
        <type>function</type>
        <docblock line="137">
          <description><![CDATA[Decorates the sentence writer.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="137" name="param" description="Type of decorator." type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="137" name="return" description="Current instance." type="\GoTableaux\ProofWriter">
            <type by_reference="false">\GoTableaux\ProofWriter</type>
          </tag>
        </docblock>
        <argument line="143">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="156" package="">
        <name>writeSentence</name>
        <type>function</type>
        <docblock line="148">
          <description><![CDATA[Writes a sentence.]]></description>
          <long-description><![CDATA[<p>Delegates to sentence writer.</p>]]></long-description>
          <tag line="148" name="param" description="The sentence to write." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="148" name="return" description="The string representation of the sentence." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="156">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="169" package="">
        <name>writeArgumentOfProof</name>
        <type>function</type>
        <docblock line="161">
          <description><![CDATA[Writes a proof's argument.]]></description>
          <long-description><![CDATA[<p>Delegates to $this->sentenceWriter.</p>]]></long-description>
          <tag line="161" name="param" description="The proof whose argument to write." type="\GoTableaux\Proof" variable="$proof">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="161" name="return" description="The string for the argument." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="169">
          <name>$proof</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux" line="180" package="">
        <name>getArray</name>
        <type>function</type>
        <docblock line="174">
          <description><![CDATA[Gets a formatted data array of a proof.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="174" name="param" description="Proof to get data from." type="\GoTableaux\Proof" variable="$proof">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="174" name="return" description="Formatted data array." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="180">
          <name>$proof</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux" line="188" package="">
        <name>writeProof</name>
        <type>function</type>
        <docblock line="182">
          <description><![CDATA[Makes a string representation of a proof.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="182" name="param" description="The proof to represent." type="\GoTableaux\Proof" variable="$proof">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="182" name="return" description="The string representation." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="188">
          <name>$proof</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Sentence/Atomic.php" hash="ee67204847a2010dd475fdbf6b8ff063" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Sentence" line="28" package="Syntax">
      <name>Atomic</name>
      <full_name>\GoTableaux\Sentence\Atomic</full_name>
      <extends>\GoTableaux\Sentence</extends>
      <docblock line="24">
        <description><![CDATA[Represents an atomic sentence.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Syntax"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="35" package="Default">
        <name>$symbol</name>
        <default><![CDATA[]]></default>
        <docblock line="30">
          <description><![CDATA[Atomic symbol, e.g. 'A' or 'B'.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="30" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="42" package="Default">
        <name>$subscript</name>
        <default><![CDATA[]]></default>
        <docblock line="37">
          <description><![CDATA[Subscript of the atomic symbol.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="37" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Sentence" line="50" package="">
        <name>setSymbol</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[Sets the atomic symbol.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="param" description="The symbol, e.g. 'A' or 'B'." type="string" variable="$symbol">
            <type by_reference="false">string</type>
          </tag>
          <tag line="44" name="return" description="Current instance." type="\GoTableaux\Sentence\Atomic">
            <type by_reference="false">\GoTableaux\Sentence\Atomic</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$symbol</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Sentence" line="61" package="">
        <name>getSymbol</name>
        <type>function</type>
        <docblock line="56">
          <description><![CDATA[Gets the atomic symbol.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="return" description="The atomic symbol, e.g. 'A' or 'B'." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Sentence" line="72" package="">
        <name>setSubscript</name>
        <type>function</type>
        <docblock line="66">
          <description><![CDATA[Sets the subscript of the atomic symbol.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="66" name="param" description="The subscript." type="integer" variable="$subscript">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="66" name="return" description="Current instance." type="\GoTableaux\Sentence\Atomic">
            <type by_reference="false">\GoTableaux\Sentence\Atomic</type>
          </tag>
        </docblock>
        <argument line="72">
          <name>$subscript</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Sentence" line="83" package="">
        <name>getSubscript</name>
        <type>function</type>
        <docblock line="78">
          <description><![CDATA[Gets the subscript of the atomic symbol.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="78" name="return" description="The subscript." type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Sentence/Molecular.php" hash="997b5fceb645df97824280327ffdf1ab" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Exception">\GoTableaux\Exception\Vocabulary</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Sentence" line="29" package="Syntax">
      <name>Molecular</name>
      <full_name>\GoTableaux\Sentence\Molecular</full_name>
      <extends>\GoTableaux\Sentence</extends>
      <docblock line="25">
        <description><![CDATA[Represents a molecular sentence.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="25" name="package" description="Syntax"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="36" package="Default">
        <name>$operator</name>
        <default><![CDATA[]]></default>
        <docblock line="31">
          <description><![CDATA[Holds an Operator instance.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="var" description="" type="\GoTableaux\Sentence\Operator">
            <type by_reference="false">\GoTableaux\Sentence\Operator</type>
          </tag>
          <tag line="31" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="43" package="Default">
        <name>$operands</name>
        <default><![CDATA[array()]]></default>
        <docblock line="38">
          <description><![CDATA[Holds the operands.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="Array of {@link Sentence} objects." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="38" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Sentence" line="51" package="">
        <name>setOperator</name>
        <type>function</type>
        <docblock line="45">
          <description><![CDATA[Sets the operator]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="param" description="The operator object of the sentence." type="\GoTableaux\Sentence\Operator" variable="$operator">
            <type by_reference="false">\GoTableaux\Sentence\Operator</type>
          </tag>
          <tag line="45" name="return" description="Current instance." type="\GoTableaux\Sentence\MolecularSentence">
            <type by_reference="false">\GoTableaux\Sentence\MolecularSentence</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type>Operator</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Sentence" line="63" package="">
        <name>addOperand</name>
        <type>function</type>
        <docblock line="57">
          <description><![CDATA[Adds an operand, or many operands.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="param" description="The operand(s) to add." type="\GoTableaux\Sentence\Sentence|array" variable="$operand">
            <type by_reference="false">\GoTableaux\Sentence\Sentence</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="57" name="return" description="Current instance." type="\GoTableaux\Sentence\MolecularSentence">
            <type by_reference="false">\GoTableaux\Sentence\MolecularSentence</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$operand</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux\Sentence" line="79" package="">
        <name>_addOperand</name>
        <type>function</type>
        <docblock line="72">
          <description><![CDATA[Adds an operand, with type forcing.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="72" name="param" description="" type="\GoTableaux\Sentence\Sentence" variable="$operand">
            <type by_reference="false">\GoTableaux\Sentence\Sentence</type>
          </tag>
          <tag line="72" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="72" name="access" description="private"/>
        </docblock>
        <argument line="79">
          <name>$operand</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Sentence" line="91" package="">
        <name>getOperator</name>
        <type>function</type>
        <docblock line="86">
          <description><![CDATA[Gets the Operator object.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="86" name="return" description="The sentence's operator." type="\GoTableaux\Sentence\Operator">
            <type by_reference="false">\GoTableaux\Sentence\Operator</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Sentence" line="102" package="">
        <name>setOperands</name>
        <type>function</type>
        <docblock line="96">
          <description><![CDATA[Sets the operands.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="96" name="param" description="Array of {@link Sentence}s." type="array" variable="$operands">
            <type by_reference="false">array</type>
          </tag>
          <tag line="96" name="return" description="Current isntace." type="\GoTableaux\Sentence\MolecularSentence">
            <type by_reference="false">\GoTableaux\Sentence\MolecularSentence</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$operands</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Sentence" line="114" package="">
        <name>getOperands</name>
        <type>function</type>
        <docblock line="109">
          <description><![CDATA[Gets the operands.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="109" name="return" description="The sentence's operands. An array of {@link Sentence} objects." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Sentence.php" hash="d488acdedb8bb646bb4697a08d3a5409" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="AtomicSentence">\GoTableaux\Sentence\Atomic</namespace-alias>
    <namespace-alias name="MolecularSentence">\GoTableaux\Sentence\Molecular</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux" line="31" package="GoTableaux">
      <name>Sentence</name>
      <full_name>\GoTableaux\Sentence</full_name>
      <extends/>
      <docblock line="27">
        <description><![CDATA[Represents a sentence.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="40" package="">
        <name>createAtomic</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Creates an atomic sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="param" description="The atomic symbol, e.g. 'A' or 'B'." type="string" variable="$symbol">
            <type by_reference="false">string</type>
          </tag>
          <tag line="33" name="param" description="The subscript. Default is 0." type="integer" variable="$subscript">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="33" name="return" description="The created instance." type="\GoTableaux\Sentence\Atomic">
            <type by_reference="false">\GoTableaux\Sentence\Atomic</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$symbol</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="40">
          <name>$subscript</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="53" package="">
        <name>createMolecular</name>
        <type>function</type>
        <docblock line="46">
          <description><![CDATA[Creates a molecular sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="param" description="Operator instance." type="\GoTableaux\Operator" variable="$operator">
            <type by_reference="false">\GoTableaux\Operator</type>
          </tag>
          <tag line="46" name="param" description="Array of Sentence objects." type="array" variable="$operands">
            <type by_reference="false">array</type>
          </tag>
          <tag line="46" name="return" description="The created instance." type="\GoTableaux\Sentence\Molecular">
            <type by_reference="false">\GoTableaux\Sentence\Molecular</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type>Operator</type>
        </argument>
        <argument line="53">
          <name>$operands</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="64" package="">
        <name>getOperatorName</name>
        <type>function</type>
        <docblock line="59">
          <description><![CDATA[Gets the operator name.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="return" description="The name of the operator, or false if atomic." type="string|false">
            <type by_reference="false">string</type>
            <type by_reference="false">false</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="77" package="">
        <name>sameForm</name>
        <type>function</type>
        <docblock line="70">
          <description><![CDATA[Compares two sentences for form and atomic symbol identity.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="70" name="param" description="The first sentence." type="\GoTableaux\Sentence" variable="$sentence_a">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="70" name="param" description="The second sentence." type="\GoTableaux\Sentence" variable="$sentence_b">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="70" name="return" description="Whether the sentences have the same form and atomic symbols." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="77">
          <name>$sentence_a</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
        <argument line="77">
          <name>$sentence_b</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="99" package="">
        <name>sameFormInArray</name>
        <type>function</type>
        <docblock line="92">
          <description><![CDATA[Checks whether $haystack has a sentence with the same form as $needle.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="92" name="param" description="The sentence to check." type="\GoTableaux\Sentence" variable="$needle">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="92" name="param" description="Array of {@link Sentence}s to search." type="array" variable="$haystack">
            <type by_reference="false">array</type>
          </tag>
          <tag line="92" name="return" description="Whether a sentence with the same form is found." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="99">
          <name>$needle</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
        <argument line="99">
          <name>$haystack</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="SentenceParser/Polish.php" hash="da8e023e1c2dc68099faf1c74d97fc18" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="58" code="50018">No DocBlock was found for property $operandStack</error>
      <error line="60" code="50010">No DocBlock was found for method readRPN()</error>
    </parse_markers>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <namespace-alias name="ParserUtilities">\GoTableaux\ParserUtilities</namespace-alias>
    <namespace-alias name="ParserException">\GoTableaux\Exception\Parser</namespace-alias>
    <namespace-alias name="Vocabulary">\GoTableaux\Vocabulary</namespace-alias>
    <namespace-alias name="Sentence">\GoTableaux\Sentence</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\SentenceParser" line="33" package="GoTableaux">
      <name>Polish</name>
      <full_name>\GoTableaux\SentenceParser\Polish</full_name>
      <extends>\GoTableaux\SentenceParser</extends>
      <docblock line="29">
        <description><![CDATA[Represents the standard sentence parser.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="29" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="58" package="Default">
        <name>$operandStack</name>
        <default><![CDATA[array()]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceParser" line="41" package="">
        <name>stringToSentence</name>
        <type>function</type>
        <docblock line="35">
          <description><![CDATA[Creates a {@link Sentence sentence} from a string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="param" description="The string to interpret." type="string" variable="$sentenceStr">
            <type by_reference="false">string</type>
          </tag>
          <tag line="35" name="return" description="The resulting instance." type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$sentenceStr</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="GoTableaux\SentenceParser" line="60" package="">
        <name>readRPN</name>
        <type>function</type>
        <argument line="60">
          <name>$input</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="SentenceParser/Standard.php" hash="73bdd6da70b6b73187da4d7c39832a3a" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <namespace-alias name="ParserUtilities">\GoTableaux\ParserUtilities</namespace-alias>
    <namespace-alias name="ParserException">\GoTableaux\Exception\Parser</namespace-alias>
    <namespace-alias name="Vocabulary">\GoTableaux\Vocabulary</namespace-alias>
    <namespace-alias name="Sentence">\GoTableaux\Sentence</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\SentenceParser" line="33" package="Syntax">
      <name>Standard</name>
      <full_name>\GoTableaux\SentenceParser\Standard</full_name>
      <extends>\GoTableaux\SentenceParser</extends>
      <docblock line="29">
        <description><![CDATA[Represents the standard sentence parser.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="29" name="package" description="Syntax"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceParser" line="41" package="">
        <name>stringToSentence</name>
        <type>function</type>
        <docblock line="35">
          <description><![CDATA[Creates a {@link Sentence sentence} from a string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="param" description="The string to interpret." type="string" variable="$sentenceStr">
            <type by_reference="false">string</type>
          </tag>
          <tag line="35" name="return" description="The resulting instance." type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$sentenceStr</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="GoTableaux\SentenceParser" line="96" package="">
        <name>_readSentence</name>
        <type>function</type>
        <docblock line="88">
          <description><![CDATA[Reads a string for the first occurrence of a sentence expression.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="88" name="param" description="The string to read." type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="88" name="return" description="The first sentence string." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="88" name="throws" description="ParserException} on parse error." type="\GoTableaux\SentenceParser\{@link">
            <type by_reference="false">\GoTableaux\SentenceParser\{@link</type>
          </tag>
          <tag line="88" name="access" description="private"/>
        </docblock>
        <argument line="96">
          <name>$string</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="SentenceParser.php" hash="ad584dfe25aec00eb929c6f17df911e7" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="ParserException">\GoTableaux\Exception\Parser</namespace-alias>
    <class final="false" abstract="true" namespace="GoTableaux" line="30" package="Syntax">
      <name>SentenceParser</name>
      <full_name>\GoTableaux\SentenceParser</full_name>
      <extends/>
      <docblock line="26">
        <description><![CDATA[Represents a sentence parser.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="26" name="package" description="Syntax"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="37" package="Default">
        <name>$vocabulary</name>
        <default><![CDATA[]]></default>
        <docblock line="32">
          <description><![CDATA[Holds the vocabulary.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="" type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
          <tag line="32" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="45" package="">
        <name>getInstance</name>
        <type>function</type>
        <docblock line="39">
          <description><![CDATA[Creates a child instance.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="param" description="The vocabulary for the parser to use." type="\GoTableaux\Vocabulary" variable="$vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
          <tag line="39" name="param" description="The type of parser to create." type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$vocabulary</name>
          <default><![CDATA[]]></default>
          <type>Vocabulary</type>
        </argument>
        <argument line="45">
          <name>$type</name>
          <default><![CDATA['Standard']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="58" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="51">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[<p>Sets the vocabulary.</p>]]></long-description>
          <tag line="51" name="param" description="The vocabulary for the parser to use." type="\GoTableaux\Vocabulary" variable="$vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
        </docblock>
        <argument line="58">
          <name>$vocabulary</name>
          <default><![CDATA[]]></default>
          <type>Vocabulary</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="68" package="">
        <name>getVocabulary</name>
        <type>function</type>
        <docblock line="63">
          <description><![CDATA[Gets the vocabulary.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="return" description="The parser's vocabulary." type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="81" package="">
        <name>parseAtomic</name>
        <type>function</type>
        <docblock line="73">
          <description><![CDATA[Parses an atomic sentence string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="param" description="The string to parse." type="string" variable="$sentenceStr">
            <type by_reference="false">string</type>
          </tag>
          <tag line="73" name="return" description="The resulting sentence instance." type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="73" name="throws" description="ParserException}." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
          <tag line="73" name="access" description="private"/>
        </docblock>
        <argument line="81">
          <name>$sentenceStr</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux" line="107" package="">
        <name>stringToSentence</name>
        <type>function</type>
        <docblock line="100">
          <description><![CDATA[Creates a {@link Sentence sentence} instance from a string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="100" name="param" description="The string to interpret." type="string" variable="$sentenceStr">
            <type by_reference="false">string</type>
          </tag>
          <tag line="100" name="return" description="The resulting instance." type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="100" name="throws" description="ParserException} on any errors in parsing the input string." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
        </docblock>
        <argument line="107">
          <name>$sentenceStr</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="SentenceWriter/Polish/LaTeXDecorator.php" hash="b218a2dff83762733c3987cf7b6841e1" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $sentenceWriter</error>
      <error line="32" code="50018">No DocBlock was found for property $operatorTranslations</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\SentenceWriter\Polish" line="28" package="GoTableaux">
      <name>LaTeXDecorator</name>
      <full_name>\GoTableaux\SentenceWriter\Polish\LaTeXDecorator</full_name>
      <extends>\GoTableaux\SentenceWriter\Standard\LaTeXDecorator</extends>
      <docblock line="24">
        <description><![CDATA[Sets default operator translations for Polish notation.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="30" package="Default">
        <name>$sentenceWriter</name>
        <default><![CDATA[]]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="32" package="Default">
        <name>$operatorTranslations</name>
        <default><![CDATA[array(
		'Conjunction' => '\mathsf{K}',
		'Disjunction' => '\mathsf{A}',
		'Negation'	  => '\mathsf{N}',
		'Material Conditional' 		=> '\mathsf{C}',
		'Material Biconditional' 	=> '\mathsf{E}',
		'Conditional' => '\mathsf{V}',
	)]]></default>
      </property>
    </class>
  </file>
  <file path="SentenceWriter/Polish.php" hash="ac6e6f76606995fe67a406dda5dcc5bb" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="32" code="50018">No DocBlock was found for property $operatorTranslations</error>
      <error line="40" code="50010">No DocBlock was found for method writeAtomicSymbol()</error>
    </parse_markers>
    <namespace-alias name="MolecularSentence">\GoTableaux\Sentence\Molecular</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\SentenceWriter" line="30" package="GoTableaux">
      <name>Polish</name>
      <full_name>\GoTableaux\SentenceWriter\Polish</full_name>
      <extends>\GoTableaux\SentenceWriter</extends>
      <docblock line="26">
        <description><![CDATA[Writes sentences in Polish notation.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="26" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="32" package="Default">
        <name>$operatorTranslations</name>
        <default><![CDATA[array(
		'Conjunction' => 'K',
		'Disjunction' => 'A',
		'Negation'	  => 'N',
		'Material Conditional' 		=> 'M',
		'Material Biconditional' 	=> 'Q',
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceWriter" line="40" package="">
        <name>writeAtomicSymbol</name>
        <type>function</type>
        <argument line="40">
          <name>$symbol</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceWriter" line="51" package="">
        <name>writeMolecular</name>
        <type>function</type>
        <docblock line="45">
          <description><![CDATA[Makes a string representation of a molecular sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="param" description="The molecular sentence to represent." type="\GoTableaux\Sentence\Molecular" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence\Molecular</type>
          </tag>
          <tag line="45" name="return" description="The string representation of the sentence." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>MolecularSentence</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="SentenceWriter/Standard/LaTeXDecorator.php" hash="0d65f69987f2763bc15805c764b84840" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="36" code="50018">No DocBlock was found for property $sentenceWriter</error>
      <error line="39" code="50018">No DocBlock was found for property $operatorTranslations</error>
      <error line="41" code="50018">No DocBlock was found for property $standardOperatorSymbols</error>
      <error line="63" code="50010">No DocBlock was found for method writeSubscript()</error>
      <error line="68" code="50010">No DocBlock was found for method writeOperator()</error>
      <error line="74" code="50010">No DocBlock was found for method getOperatorSymbolCommands()</error>
      <error line="79" code="50010">No DocBlock was found for method formatCommand()</error>
    </parse_markers>
    <namespace-alias name="Vocabulary">\GoTableaux\Vocabulary</namespace-alias>
    <namespace-alias name="Sentence">\GoTableaux\Sentence</namespace-alias>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <namespace-alias name="AtomicSentence">\GoTableaux\Sentence\Atomic</namespace-alias>
    <namespace-alias name="MolecularSentence">\GoTableaux\Sentence\Molecular</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\SentenceWriter\Standard" line="34" package="GoTableaux">
      <name>LaTeXDecorator</name>
      <full_name>\GoTableaux\SentenceWriter\Standard\LaTeXDecorator</full_name>
      <extends>\GoTableaux\SentenceWriter\Standard</extends>
      <docblock line="30">
        <description><![CDATA[Decorates a sentence writer for LaTeX.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="30" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="36" package="Default">
        <name>$sentenceWriter</name>
        <default><![CDATA[]]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="39" package="Default">
        <name>$operatorTranslations</name>
        <default><![CDATA[array()]]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="41" package="Default">
        <name>$standardOperatorSymbols</name>
        <default><![CDATA[array(
		'Conjunction' => '\wedge',
		'Disjunction' => '\vee',
		'Negation'	  => '\neg ',
		'Material Conditional' 	=> '\supset',
		'Material Biconditional' => '\equiv',
		'Conditional' => '\rightarrow',
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux\SentenceWriter\Standard" line="55" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="50">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="param" description="The vocabulary." type="\GoTableaux\Vocabulary" variable="$vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
        </docblock>
        <argument line="55">
          <name>$vocabulary</name>
          <default><![CDATA[]]></default>
          <type>Vocabulary</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceWriter\Standard" line="63" package="">
        <name>writeSubscript</name>
        <type>function</type>
        <argument line="63">
          <name>$subscript</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceWriter\Standard" line="68" package="">
        <name>writeOperator</name>
        <type>function</type>
        <argument line="68">
          <name>$operatorOrName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceWriter\Standard" line="74" package="">
        <name>getOperatorSymbolCommands</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceWriter\Standard" line="79" package="">
        <name>formatCommand</name>
        <type>function</type>
        <argument line="79">
          <name>$command</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="SentenceWriter/Standard.php" hash="3bb01b107055fe74813c1485ad31c78b" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="WriterException">\GoTableaux\Exception\Writer</namespace-alias>
    <namespace-alias name="MolecularSentence">\GoTableaux\Sentence\Molecular</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\SentenceWriter" line="31" package="GoTableaux">
      <name>Standard</name>
      <full_name>\GoTableaux\SentenceWriter\Standard</full_name>
      <extends>\GoTableaux\SentenceWriter</extends>
      <docblock line="27">
        <description><![CDATA[Writes sentences in standard notation.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceWriter" line="39" package="">
        <name>writeMolecular</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Makes a string representation of a molecular sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="param" description="The molecular sentence to represent." type="\GoTableaux\Sentence\Molecular" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence\Molecular</type>
          </tag>
          <tag line="33" name="return" description="The string representation of the sentence." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>MolecularSentence</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="SentenceWriter.php" hash="079b52bb43699e99f97deee305dfefa1" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="316" code="50015">Argument $sentence is missing from the Docblock of _writeSentence()</error>
    </parse_markers>
    <namespace-alias name="AtomicSentence">\GoTableaux\Sentence\Atomic</namespace-alias>
    <namespace-alias name="MolecularSentence">\GoTableaux\Sentence\Molecular</namespace-alias>
    <class final="false" abstract="true" namespace="GoTableaux" line="31" package="GoTableaux">
      <name>SentenceWriter</name>
      <full_name>\GoTableaux\SentenceWriter</full_name>
      <extends/>
      <docblock line="27">
        <description><![CDATA[Writes sentences.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="37" package="Default">
        <name>$operatorTranslations</name>
        <default><![CDATA[array()]]></default>
        <docblock line="33">
          <description><![CDATA[Defines the standard operator translations, if any.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="43" package="Default">
        <name>$operatorStrings</name>
        <default><![CDATA[array()]]></default>
        <docblock line="39">
          <description><![CDATA[Holds the operator strings.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="50" package="Default">
        <name>$options</name>
        <default><![CDATA[array( 
		'printZeroSubscripts' => false,
		'dropOuterParentheses' => true,
	)]]></default>
        <docblock line="45">
          <description><![CDATA[Holds the options.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="45" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="60" package="Default">
        <name>$vocabulary</name>
        <default><![CDATA[]]></default>
        <docblock line="55">
          <description><![CDATA[Holds the vocabulary]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="55" name="var" description="" type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
          <tag line="55" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="69" package="">
        <name>getInstance</name>
        <type>function</type>
        <docblock line="62">
          <description><![CDATA[Creates a child instance.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="62" name="param" description="The vocabulary for the writer to use." type="\GoTableaux\Vocabulary" variable="$vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
          <tag line="62" name="param" description="Type of writer to instantiate, default is 'Standard'." type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="62" name="return" description="New instance." type="\GoTableaux\SentenceWriter">
            <type by_reference="false">\GoTableaux\SentenceWriter</type>
          </tag>
        </docblock>
        <argument line="69">
          <name>$vocabulary</name>
          <default><![CDATA[]]></default>
          <type>Vocabulary</type>
        </argument>
        <argument line="69">
          <name>$type</name>
          <default><![CDATA['Standard']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="81" package="">
        <name>getDecoratorInstance</name>
        <type>function</type>
        <docblock line="75">
          <description><![CDATA[Gets a decorator instance of a given type for a sentence writer.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="75" name="param" description="The sentence writer for the instance to decorate." type="\GoTableaux\SentenceWriter" variable="$sentenceWriter">
            <type by_reference="false">\GoTableaux\SentenceWriter</type>
          </tag>
          <tag line="75" name="param" description="The decorator type to instantiate." type="string" variable="$decoratorType">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$sentenceWriter</name>
          <default><![CDATA[]]></default>
          <type>SentenceWriter</type>
        </argument>
        <argument line="81">
          <name>$decoratorType</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux" line="100" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="93">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[<p>Sets the vocabulary.</p>]]></long-description>
          <tag line="93" name="param" description="The vocabulary for the writer to use." type="\GoTableaux\Vocabulary" variable="$vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
        </docblock>
        <argument line="100">
          <name>$vocabulary</name>
          <default><![CDATA[]]></default>
          <type>Vocabulary</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="110" package="">
        <name>getVocabulary</name>
        <type>function</type>
        <docblock line="105">
          <description><![CDATA[Gets the vocabulary.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="105" name="return" description="The writer's vocabulary." type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="121" package="">
        <name>setVocabulary</name>
        <type>function</type>
        <docblock line="115">
          <description><![CDATA[Sets the vocabulary.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="115" name="param" description="" type="\GoTableaux\Vocabulary" variable="$vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
          <tag line="115" name="return" description="Current instance." type="\GoTableaux\SentenceWriter">
            <type by_reference="false">\GoTableaux\SentenceWriter</type>
          </tag>
        </docblock>
        <argument line="121">
          <name>$vocabulary</name>
          <default><![CDATA[]]></default>
          <type>Vocabulary</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="132" package="">
        <name>getOption</name>
        <type>function</type>
        <docblock line="126">
          <description><![CDATA[Gets the value of a single option.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="126" name="param" description="The name of the option to get." type="string" variable="$option">
            <type by_reference="false">string</type>
          </tag>
          <tag line="126" name="return" description="The value of the option." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="132">
          <name>$option</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="142" package="">
        <name>getOptions</name>
        <type>function</type>
        <docblock line="137">
          <description><![CDATA[Gets all the options.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="137" name="return" description="The options. Key is option name, value is option value." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="154" package="">
        <name>setOption</name>
        <type>function</type>
        <docblock line="147">
          <description><![CDATA[Sets an option.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="147" name="param" description="The option to set." type="string" variable="$option">
            <type by_reference="false">string</type>
          </tag>
          <tag line="147" name="param" description="The value of the option to set." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="147" name="return" description="Current instance." type="\GoTableaux\SentenceWriter">
            <type by_reference="false">\GoTableaux\SentenceWriter</type>
          </tag>
        </docblock>
        <argument line="154">
          <name>$option</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="154">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="166" package="">
        <name>setOptions</name>
        <type>function</type>
        <docblock line="159">
          <description><![CDATA[Sets many options.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="159" name="param" description="Array of options to set. Key is option name, value is option value." type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="159" name="return" description="Current instance." type="\GoTableaux\SentenceWriter">
            <type by_reference="false">\GoTableaux\SentenceWriter</type>
          </tag>
        </docblock>
        <argument line="166">
          <name>$options</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="178" package="">
        <name>getOperatorString</name>
        <type>function</type>
        <docblock line="172">
          <description><![CDATA[Gets the string for an operator by its name.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="172" name="param" description="The name of the operator." type="string" variable="$operatorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="172" name="return" description="The string for the operator." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="178">
          <name>$operatorName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="194" package="">
        <name>setOperatorStrings</name>
        <type>function</type>
        <docblock line="188">
          <description><![CDATA[Sets the strings to use for some operators.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="188" name="param" description="Key is operator name, value is string." type="array" variable="$strings">
            <type by_reference="false">array</type>
          </tag>
          <tag line="188" name="return" description="Current instance." type="\GoTableaux\SentenceWriter">
            <type by_reference="false">\GoTableaux\SentenceWriter</type>
          </tag>
        </docblock>
        <argument line="194">
          <name>$strings</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="206" package="">
        <name>writeOperator</name>
        <type>function</type>
        <docblock line="200">
          <description><![CDATA[Writes an operator.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="200" name="param" description="Operator object or name of operator." type="\GoTableaux\Operator|string" variable="$operatorOrName">
            <type by_reference="false">\GoTableaux\Operator</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="200" name="return" description="String representation of the operator." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="206">
          <name>$operatorOrName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="218" package="">
        <name>writeSubscript</name>
        <type>function</type>
        <docblock line="212">
          <description><![CDATA[Writes a subscript index.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="212" name="param" description="The subscript index to write." type="integer" variable="$subscript">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="212" name="return" description="The string representation of the subscript index." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="218">
          <name>$subscript</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="230" package="">
        <name>writeAtomicSymbol</name>
        <type>function</type>
        <docblock line="224">
          <description><![CDATA[Writes an atomic symbol.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="224" name="param" description="The atomic symbol to write." type="string" variable="$symbol">
            <type by_reference="false">string</type>
          </tag>
          <tag line="224" name="return" description="The representation of the atomic symbol." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="230">
          <name>$symbol</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="241" package="">
        <name>writeAtomic</name>
        <type>function</type>
        <docblock line="235">
          <description><![CDATA[Writes an atomic sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="235" name="param" description="The atomic sentence to represent." type="\GoTableaux\Sentence\Atomic" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence\Atomic</type>
          </tag>
          <tag line="235" name="return" description="The string representation of the atomic sentence." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="241">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>AtomicSentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="256" package="">
        <name>writeSentence</name>
        <type>function</type>
        <docblock line="250">
          <description><![CDATA[Makes a string representation of a sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="250" name="param" description="The sentence to write." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="250" name="return" description="The string representation of the sentence." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="256">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="272" package="">
        <name>writeSentences</name>
        <type>function</type>
        <docblock line="266">
          <description><![CDATA[Makes an array of string representations of {@link Sentence}s.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="266" name="param" description="The sentences to write." type="array" variable="$sentences">
            <type by_reference="false">array</type>
          </tag>
          <tag line="266" name="return" description="An array of string representations of the sentences." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="272">
          <name>$sentences</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="286" package="">
        <name>getArgumentArray</name>
        <type>function</type>
        <docblock line="280">
          <description><![CDATA[Makes a formatted Argument array.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="280" name="param" description="The argument to format." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="280" name="return" description="Formatted argument array." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="286">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="300" package="">
        <name>writeArgument</name>
        <type>function</type>
        <docblock line="294">
          <description><![CDATA[Makes a string representation of an argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="294" name="param" description="The argument to write." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="294" name="return" description="The string representation of the argument." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="300">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux" line="314" package="">
        <name>writeMolecular</name>
        <type>function</type>
        <docblock line="308">
          <description><![CDATA[Makes a string representation of a molecular sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="308" name="param" description="The sentence to write." type="\GoTableaux\Sentence\Molecular" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence\Molecular</type>
          </tag>
          <tag line="308" name="return" description="The string representation of the sentence." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="314">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>MolecularSentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux" line="319" package="">
        <name>_writeSentence</name>
        <type>function</type>
        <docblock line="316">
          <description><![CDATA[Recursive function for writing sentences.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="319">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Settings.php" hash="b9a5870cbe69aa3072dc977b847bcaae" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux" line="33" package="GoTableaux">
      <name>Settings</name>
      <full_name>\GoTableaux\Settings</full_name>
      <extends/>
      <docblock line="29">
        <description><![CDATA[Stores the settings.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="29" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="40" package="Default">
        <name>$settings</name>
        <default><![CDATA[]]></default>
        <docblock line="35">
          <description><![CDATA[Holds the settings.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="35" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="48" package="">
        <name>read</name>
        <type>function</type>
        <docblock line="42">
          <description><![CDATA[Reads a setting.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="param" description="The setting to read." type="string" variable="$setting">
            <type by_reference="false">string</type>
          </tag>
          <tag line="42" name="return" description="The setting's value, or null if not set." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="48">
          <name>$setting</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="62" package="">
        <name>write</name>
        <type>function</type>
        <docblock line="55">
          <description><![CDATA[Writes a setting.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="55" name="param" description="The setting to write." type="string" variable="$setting">
            <type by_reference="false">string</type>
          </tag>
          <tag line="55" name="param" description="The value to write." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="55" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="62">
          <name>$setting</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="62">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Utilities.php" hash="5aaad9a681ed7795bddeb2e20e22f86b" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <notice line="59" code="50013">Parameter $arr,... could not be found in arraysAreIdentical()</notice>
      <notice line="113" code="50013">Parameter $var,... could not be found in debug()</notice>
      <notice line="137" code="50013">Parameter $var could not be found in debug()</notice>
    </parse_markers>
    <function namespace="GoTableaux" line="143" package="GoTableaux">
      <name>debug</name>
      <type>function</type>
      <docblock line="137">
        <description><![CDATA[Alias for Utilities::debug()]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="137" name="package" description="GoTableaux"/>
        <tag line="137" name="param" description="" type="mixed" variable="$var">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="137" name="return" description="" type="void">
          <type by_reference="false">void</type>
        </tag>
      </docblock>
    </function>
    <class final="false" abstract="false" namespace="GoTableaux" line="28" package="GoTableaux">
      <name>Utilities</name>
      <full_name>\GoTableaux\Utilities</full_name>
      <extends/>
      <docblock line="24">
        <description><![CDATA[Collects general PHP utilities.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="37" package="">
        <name>arrayDiff</name>
        <type>function</type>
        <docblock line="30">
          <description><![CDATA[Strictly subtracts one array from the other.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="param" description="The first array." type="array" variable="$a">
            <type by_reference="false">array</type>
          </tag>
          <tag line="30" name="param" description="The array of items to subtract." type="array" variable="$b">
            <type by_reference="false">array</type>
          </tag>
          <tag line="30" name="return" description="The resulting array." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="37">
          <name>$a</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="37">
          <name>$b</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="51" package="">
        <name>arrayUnique</name>
        <type>function</type>
        <docblock line="45">
          <description><![CDATA[Produces a strictly unique array.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="param" description="The array to make unique." type="array" variable="$arr">
            <type by_reference="false">array</type>
          </tag>
          <tag line="45" name="return" description="The unique array." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$arr</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="66" package="">
        <name>arraysAreIdentical</name>
        <type>function</type>
        <docblock line="59">
          <description><![CDATA[Compares arrays of objects against identity.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="param" description="Variable list of arrays to compare." type="array" variable="$arr,...">
            <type by_reference="false">array</type>
          </tag>
          <tag line="59" name="return" description="True if each array has the same keys referencing identical objects." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="85" package="">
        <name>sortByStrLen</name>
        <type>function</type>
        <docblock line="78">
          <description><![CDATA[Sorts two strings by their length.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="78" name="param" description="The first string." type="string" variable="$a">
            <type by_reference="false">string</type>
          </tag>
          <tag line="78" name="param" description="The second string." type="string" variable="$b">
            <type by_reference="false">string</type>
          </tag>
          <tag line="78" name="return" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="85">
          <name>$a</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="85">
          <name>$b</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="100" package="">
        <name>strPosArr</name>
        <type>function</type>
        <docblock line="90">
          <description><![CDATA[Searches a string for the first occurrence of any string in a given array.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="90" name="param" description="The string to search." type="string" variable="$haystack">
            <type by_reference="false">string</type>
          </tag>
          <tag line="90" name="param" description="An array of strings to seek." type="array" variable="$needles">
            <type by_reference="false">array</type>
          </tag>
          <tag line="90" name="param" description="The offset of $haystack at which to begin." type="integer" variable="$offset">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="90" name="param" description="&amp;$match Holds the first match." type="string" variable="$match">
            <type by_reference="false">string</type>
          </tag>
          <tag line="90" name="return" description="Position of $haystack at which the first match was found, OR false if no match is found." type="integer|boolean">
            <type by_reference="false">integer</type>
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="100">
          <name>$haystack</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="100">
          <name>$needles</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="100">
          <name>$offset</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
        <argument line="100">
          <name>$match</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="120" package="">
        <name>debug</name>
        <type>function</type>
        <docblock line="113">
          <description><![CDATA[Prints debugging information, if the debug setting is set to true.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="113" name="param" description="Variables to print information about." type="mixed" variable="$var,...">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="113" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="113" name="see" description="\GoTableaux\config.php" refers="\GoTableaux\config.php"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Vocabulary.php" hash="62f892b4b8c6de07683f33460eaa50c6" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="VocabularyException">\GoTableaux\Exception\Vocabulary</namespace-alias>
    <namespace-alias name="AtomicSentence">\GoTableaux\Sentence\Atomic</namespace-alias>
    <namespace-alias name="MolecularSentence">\GoTableaux\Sentence\Molecular</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux" line="32" package="Syntax">
      <name>Vocabulary</name>
      <full_name>\GoTableaux\Vocabulary</full_name>
      <extends/>
      <docblock line="28">
        <description><![CDATA[Represents a vocabulary.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="28" name="package" description="Syntax"/>
      </docblock>
      <constant namespace="GoTableaux" line="80" package="Default">
        <name>OPER_TERNARY</name>
        <value><![CDATA[3]]></value>
      </constant>
      <constant namespace="GoTableaux" line="81" package="Default">
        <name>OPER_BINARY</name>
        <value><![CDATA[2]]></value>
      </constant>
      <constant namespace="GoTableaux" line="82" package="Default">
        <name>OPER_UNARY</name>
        <value><![CDATA[1]]></value>
      </constant>
      <constant namespace="GoTableaux" line="83" package="Default">
        <name>ATOMIC</name>
        <value><![CDATA[0]]></value>
      </constant>
      <constant namespace="GoTableaux" line="84" package="Default">
        <name>PUNCT_OPEN</name>
        <value><![CDATA[-1]]></value>
      </constant>
      <constant namespace="GoTableaux" line="85" package="Default">
        <name>PUNCT_CLOSE</name>
        <value><![CDATA[-2]]></value>
      </constant>
      <constant namespace="GoTableaux" line="86" package="Default">
        <name>PUNCT_SEPARATOR</name>
        <value><![CDATA[-3]]></value>
      </constant>
      <constant namespace="GoTableaux" line="87" package="Default">
        <name>CTRL_SUBSCRIPT</name>
        <value><![CDATA[-4]]></value>
      </constant>
      <constant namespace="GoTableaux" line="88" package="Default">
        <name>NUMERIC_CHAR</name>
        <value><![CDATA[-5]]></value>
      </constant>
      <property final="false" static="false" visibility="protected" line="41" package="Default">
        <name>$items</name>
        <default><![CDATA[array()]]></default>
        <docblock line="34">
          <description><![CDATA[Holds a hash of all vocabulary items, including operators.]]></description>
          <long-description><![CDATA[<p>Key is item symbol; value is type flag.</p>]]></long-description>
          <tag line="34" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="34" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="50" package="Default">
        <name>$operatorSymbols</name>
        <default><![CDATA[array()]]></default>
        <docblock line="43">
          <description><![CDATA[Holds the operator symbols.]]></description>
          <long-description><![CDATA[<p>Key is symbol, value is operator name.</p>]]></long-description>
          <tag line="43" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="43" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="59" package="Default">
        <name>$operators</name>
        <default><![CDATA[array()]]></default>
        <docblock line="52">
          <description><![CDATA[Holds the operators.]]></description>
          <long-description><![CDATA[<p>Key is operator name; value is {@link Operator operator} object.</p>]]></long-description>
          <tag line="52" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="52" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="71" package="Default">
        <name>$sentences</name>
        <default><![CDATA[array()]]></default>
        <docblock line="61">
          <description><![CDATA[Holds the set of sentences.]]></description>
          <long-description><![CDATA[<p>This is used for tracking {@link Sentence} instances, to ensure object
identity with sentence form identity. Key is sentence string relative to
a {@link SentenceParser parser}, value is {@link Sentence sentence} object.</p>]]></long-description>
          <tag line="61" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="61" name="see" description="\GoTableaux\Vocabulary::registerSentence()" refers="\GoTableaux\Vocabulary::registerSentence()"/>
          <tag line="61" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="77" package="Default">
        <name>$atomicSentences</name>
        <default><![CDATA[array()]]></default>
        <docblock line="73">
          <description><![CDATA[Holds the set of {@link Sentence\Atomic atomic sentences}.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="97" package="">
        <name>createWithLexicon</name>
        <type>function</type>
        <docblock line="90">
          <description><![CDATA[Creates an instance with a lexicon.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="90" name="param" description="Array of lexical items. For format, see the {@link Vocabulary::__consruct() constructor}." type="array" variable="$lexicon">
            <type by_reference="false">array</type>
          </tag>
          <tag line="90" name="return" description="The created instance." type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
        </docblock>
        <argument line="97">
          <name>$lexicon</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="108" package="">
        <name>isOperatorType</name>
        <type>function</type>
        <docblock line="102">
          <description><![CDATA[Checks whether a type flag is of an operator.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="102" name="param" description="The type flag." type="integer" variable="$flag">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="102" name="return" description="True if flag is of an operator, false otherwise." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="108">
          <name>$flag</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="134" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="113">
          <description><![CDATA[Constructor. Initializes lexicon.]]></description>
          <long-description><![CDATA[<p>Example:</p>

<pre><code><?php
$vocabulary = new Vocabulary( array(
    'openMarks' => array('(', '['),
    'closeMarks' => array(')', ']'),
    'atomicSymbols' => array('A', 'B', 'C'),
    'subscripts' => array('_'),
    'separators' => array(' '),
    'operatorSymbols' => array(
        '&' => array('Conjunction' => 2),
        '~' => array('Negation'  => 1)
    )
));
?>
</code></pre>]]></long-description>
          <tag line="113" name="param" description="Structured array of lexical items." type="array" variable="$lexicon">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="134">
          <name>$lexicon</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="145" package="">
        <name>addAtomicSymbol</name>
        <type>function</type>
        <docblock line="139">
          <description><![CDATA[Adds an atomic symbol.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="139" name="param" description="Symbol to be added (single character)." type="string" variable="$symbol">
            <type by_reference="false">string</type>
          </tag>
          <tag line="139" name="return" description="The current instance." type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
        </docblock>
        <argument line="145">
          <name>$symbol</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="157" package="">
        <name>getAtomicSymbols</name>
        <type>function</type>
        <docblock line="150">
          <description><![CDATA[Gets the atomic symbols.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="150" name="param" description="When true, returns a single character. Default is false." type="integer" variable="$single">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="150" name="return" description="Array of characters, or single character." type="array|string">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="157">
          <name>$single</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="168" package="">
        <name>addSubscriptSymbol</name>
        <type>function</type>
        <docblock line="162">
          <description><![CDATA[Sets the symbol used for subscripting atomic symbols]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="162" name="param" description="Symbol to use." type="string" variable="$symbol">
            <type by_reference="false">string</type>
          </tag>
          <tag line="162" name="return" description="The current instance." type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
        </docblock>
        <argument line="168">
          <name>$symbol</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="180" package="">
        <name>getSubscriptSymbols</name>
        <type>function</type>
        <docblock line="173">
          <description><![CDATA[Gets the subscript symbol.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="173" name="param" description="When true, returns a single character. Default is false." type="integer" variable="$single">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="173" name="return" description="Array of characters, or single character." type="array|string">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="180">
          <name>$single</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="191" package="">
        <name>addOpenMark</name>
        <type>function</type>
        <docblock line="185">
          <description><![CDATA[Adds an opening punctuation symbol, e.g. '('.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="185" name="param" description="Symbol to be added (single character)." type="string" variable="$symbol">
            <type by_reference="false">string</type>
          </tag>
          <tag line="185" name="return" description="The current instance." type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
        </docblock>
        <argument line="191">
          <name>$symbol</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="203" package="">
        <name>getOpenMarks</name>
        <type>function</type>
        <docblock line="196">
          <description><![CDATA[Gets the open marks.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="196" name="param" description="When true, returns a single character. Default is false." type="integer" variable="$single">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="196" name="return" description="Array of characters, or single character." type="array|string">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="203">
          <name>$single</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="214" package="">
        <name>addCloseMark</name>
        <type>function</type>
        <docblock line="208">
          <description><![CDATA[Adds a closing punctuation symbol, e.g. ')'.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="208" name="param" description="Symbol to be added (single character)." type="string" variable="$symbol">
            <type by_reference="false">string</type>
          </tag>
          <tag line="208" name="return" description="The current instance." type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
        </docblock>
        <argument line="214">
          <name>$symbol</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="226" package="">
        <name>getCloseMarks</name>
        <type>function</type>
        <docblock line="219">
          <description><![CDATA[Gets the close marks.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="219" name="param" description="When true, returns a single character. Default is false." type="integer" variable="$single">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="219" name="return" description="Array of characters, or single character." type="array|string">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="226">
          <name>$single</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="237" package="">
        <name>addSeparator</name>
        <type>function</type>
        <docblock line="231">
          <description><![CDATA[Adds a separator symbol, e.g. a space character.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="231" name="param" description="Symbol to be added (single character)." type="string" variable="$symbol">
            <type by_reference="false">string</type>
          </tag>
          <tag line="231" name="return" description="The current instance." type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
        </docblock>
        <argument line="237">
          <name>$symbol</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="249" package="">
        <name>getSeparators</name>
        <type>function</type>
        <docblock line="242">
          <description><![CDATA[Gets the separators.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="242" name="param" description="When true, returns a single character. Default is false." type="integer" variable="$single">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="242" name="return" description="Array of characters, or single character." type="array|string">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="249">
          <name>$single</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="263" package="">
        <name>createOperator</name>
        <type>function</type>
        <docblock line="254">
          <description><![CDATA[Creates an operator and adds it to the vocabulary items.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="254" name="param" description="Operator symbol." type="string" variable="$symbol">
            <type by_reference="false">string</type>
          </tag>
          <tag line="254" name="param" description="Arity of operator, either 1 or 2." type="integer" variable="$arity">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="254" name="param" description="Human name of the operator, e.g. 'Conjunction'." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="254" name="return" description="Operator instance." type="\GoTableaux\Operator">
            <type by_reference="false">\GoTableaux\Operator</type>
          </tag>
          <tag line="254" name="throws" description="VocabularyException} on errors." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
        </docblock>
        <argument line="263">
          <name>$symbol</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="263">
          <name>$arity</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="263">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="295" package="">
        <name>getOperatorSymbols</name>
        <type>function</type>
        <docblock line="287">
          <description><![CDATA[Gets all operator symbols.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="287" name="param" description="Arity of operators to get. Default is null, which returns all operator symbols." type="integer" variable="$arity">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="287" name="return" description="Array of operator symbols. Key is operator symbol, value is operator's arity." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="295">
          <name>$arity</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="311" package="">
        <name>getOperatorNames</name>
        <type>function</type>
        <docblock line="304">
          <description><![CDATA[Gets operator names with symbols for keys.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="304" name="param" description="Arity of operators to get. Default is null, which returns all operator names." type="integer" variable="$arity">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="304" name="return" description="Array of operator names with symbols for keys." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="311">
          <name>$arity</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="328" package="">
        <name>getOperatorByName</name>
        <type>function</type>
        <docblock line="321">
          <description><![CDATA[Gets Operator object by its name.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="321" name="param" description="Operator name." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="321" name="return" description="Operator object." type="\GoTableaux\Operator">
            <type by_reference="false">\GoTableaux\Operator</type>
          </tag>
          <tag line="321" name="throws" description="VocabularyException} when no operator is found." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
        </docblock>
        <argument line="328">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="343" package="">
        <name>getOperatorBySymbol</name>
        <type>function</type>
        <docblock line="335">
          <description><![CDATA[Gets Operator object by its symbol.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="335" name="param" description="Operator symbol." type="string" variable="$symbol">
            <type by_reference="false">string</type>
          </tag>
          <tag line="335" name="return" description="Operator instance." type="\GoTableaux\Operator">
            <type by_reference="false">\GoTableaux\Operator</type>
          </tag>
          <tag line="335" name="throws" description="VocabularyException} when $symbol is not an operator symbol in the vocabulary." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
        </docblock>
        <argument line="343">
          <name>$symbol</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="358" package="">
        <name>getSymbolForOperator</name>
        <type>function</type>
        <docblock line="351">
          <description><![CDATA[Gets the symbol used for a particular operator.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="351" name="param" description="Operator object or name of operator." type="\GoTableaux\Operator|string" variable="$operator">
            <type by_reference="false">\GoTableaux\Operator</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="351" name="return" description="Operator symbol." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="351" name="throws" description="VocabularyException} when operator is not in the vocabulary." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
        </docblock>
        <argument line="358">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="374" package="">
        <name>getSymbolType</name>
        <type>function</type>
        <docblock line="367">
          <description><![CDATA[Gets item type by symbol.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="367" name="param" description="The symbol in the vocabulary." type="string" variable="$symbol">
            <type by_reference="false">string</type>
          </tag>
          <tag line="367" name="return" description="Type flag of the symbol." type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="367" name="throws" description="VocabularyException} when symbol is not a vocabulary item." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
        </docblock>
        <argument line="374">
          <name>$symbol</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="393" package="">
        <name>registerSentence</name>
        <type>function</type>
        <docblock line="383">
          <description><![CDATA[Adds a sentence to the vocabulary, maintaining uniqueness.]]></description>
          <long-description><![CDATA[<p>If the sentence, or one of the same form is already in the vocabulary,
then that sentence is returned. Otherwise the passed sentence is
returned.</p>]]></long-description>
          <tag line="383" name="param" description="The sentence to add." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="383" name="return" description="Old or new sentence." type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
        </docblock>
        <argument line="393">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="419" package="">
        <name>getSentences</name>
        <type>function</type>
        <docblock line="414">
          <description><![CDATA[Gets the set of sentences.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="414" name="return" description="Array of {@link Sentence}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux" line="431" package="">
        <name>insertLexicon</name>
        <type>function</type>
        <docblock line="424">
          <description><![CDATA[Adds an array of lexical items to the vocabulary.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="424" name="param" description="Array of lexical items. For format, see the {@link Vocabulary::__construct() constructor}." type="array" variable="$lexicon">
            <type by_reference="false">array</type>
          </tag>
          <tag line="424" name="return" description="Current instance." type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
        </docblock>
        <argument line="431">
          <name>$lexicon</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux" line="465" package="">
        <name>addSymbol</name>
        <type>function</type>
        <docblock line="457">
          <description><![CDATA[Adds a symbol to the vocabulary.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="457" name="param" description="Single character symbol, novel to vocabulary instance." type="string" variable="$symbol">
            <type by_reference="false">string</type>
          </tag>
          <tag line="457" name="param" description="The symbol's type flag." type="integer" variable="$typeFlag">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="457" name="return" description="Current instance." type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
          <tag line="457" name="throws" description="VocabularyException}." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
        </docblock>
        <argument line="465">
          <name>$symbol</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="465">
          <name>$typeFlag</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux" line="489" package="">
        <name>getItems</name>
        <type>function</type>
        <docblock line="481">
          <description><![CDATA[Gets all items in vocabulary of a type flag.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="481" name="param" description="Type flag or array of type flags." type="integer|array" variable="$typeFlag">
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="481" name="param" description="Whether to return a single character" type="boolean" variable="$single">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="481" name="return" description="Array of vocabulary items, or, if $single is true, a single character string." type="array|string">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="489">
          <name>$typeFlag</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="489">
          <name>$single</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <package name="" full_name=""/>
  <package name="CPL" full_name="CPL"/>
  <package name="Default" full_name="Default"/>
  <package name="Exceptions" full_name="Exceptions"/>
  <package name="FDE" full_name="FDE"/>
  <package name="GO" full_name="GO"/>
  <package name="GoTableaux" full_name="GoTableaux"/>
  <package name="LP" full_name="LP"/>
  <package name="Lukasiewicz" full_name="Lukasiewicz"/>
  <package name="ModelTheory" full_name="ModelTheory"/>
  <package name="Proof" full_name="Proof"/>
  <package name="StrongKleene" full_name="StrongKleene"/>
  <package name="Syntax" full_name="Syntax"/>
  <namespace name="GoTableaux" full_name="GoTableaux">
    <namespace name="Exception" full_name="GoTableaux\Exception"/>
    <namespace name="Logic" full_name="GoTableaux\Logic">
      <namespace name="CPL" full_name="GoTableaux\Logic\CPL">
        <namespace name="ProofSystem" full_name="GoTableaux\Logic\CPL\ProofSystem">
          <namespace name="BranchRule" full_name="GoTableaux\Logic\CPL\ProofSystem\BranchRule"/>
        </namespace>
      </namespace>
      <namespace name="FDE" full_name="GoTableaux\Logic\FDE">
        <namespace name="ProofSystem" full_name="GoTableaux\Logic\FDE\ProofSystem">
          <namespace name="BranchRule" full_name="GoTableaux\Logic\FDE\ProofSystem\BranchRule"/>
        </namespace>
      </namespace>
      <namespace name="GO" full_name="GoTableaux\Logic\GO">
        <namespace name="ProofSystem" full_name="GoTableaux\Logic\GO\ProofSystem">
          <namespace name="BranchRule" full_name="GoTableaux\Logic\GO\ProofSystem\BranchRule"/>
        </namespace>
      </namespace>
      <namespace name="LP" full_name="GoTableaux\Logic\LP">
        <namespace name="ProofSystem" full_name="GoTableaux\Logic\LP\ProofSystem"/>
      </namespace>
      <namespace name="Lukasiewicz" full_name="GoTableaux\Logic\Lukasiewicz">
        <namespace name="ProofSystem" full_name="GoTableaux\Logic\Lukasiewicz\ProofSystem">
          <namespace name="BranchRule" full_name="GoTableaux\Logic\Lukasiewicz\ProofSystem\BranchRule"/>
        </namespace>
      </namespace>
      <namespace name="StrongKleene" full_name="GoTableaux\Logic\StrongKleene">
        <namespace name="ProofSystem" full_name="GoTableaux\Logic\StrongKleene\ProofSystem"/>
      </namespace>
    </namespace>
    <namespace name="Proof" full_name="GoTableaux\Proof">
      <namespace name="TableauBranch" full_name="GoTableaux\Proof\TableauBranch">
        <namespace name="Modal" full_name="GoTableaux\Proof\TableauBranch\Modal"/>
      </namespace>
      <namespace name="TableauNode" full_name="GoTableaux\Proof\TableauNode">
        <namespace name="Sentence" full_name="GoTableaux\Proof\TableauNode\Sentence">
          <namespace name="Modal" full_name="GoTableaux\Proof\TableauNode\Sentence\Modal"/>
        </namespace>
      </namespace>
    </namespace>
    <namespace name="ProofSystem" full_name="GoTableaux\ProofSystem">
      <namespace name="TableauxSystem" full_name="GoTableaux\ProofSystem\TableauxSystem">
        <namespace name="BranchRule" full_name="GoTableaux\ProofSystem\TableauxSystem\BranchRule"/>
        <namespace name="Modal" full_name="GoTableaux\ProofSystem\TableauxSystem\Modal"/>
      </namespace>
    </namespace>
    <namespace name="ProofWriter" full_name="GoTableaux\ProofWriter">
      <namespace name="Tableau" full_name="GoTableaux\ProofWriter\Tableau"/>
    </namespace>
    <namespace name="Sentence" full_name="GoTableaux\Sentence"/>
    <namespace name="SentenceParser" full_name="GoTableaux\SentenceParser"/>
    <namespace name="SentenceWriter" full_name="GoTableaux\SentenceWriter">
      <namespace name="Polish" full_name="GoTableaux\SentenceWriter\Polish"/>
      <namespace name="Standard" full_name="GoTableaux\SentenceWriter\Standard"/>
    </namespace>
  </namespace>
  <marker count="0">todo</marker>
  <deprecated count="0"/>
</project>
