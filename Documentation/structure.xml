<?xml version="1.0" encoding="utf-8"?>
<project version="2.0.0a2" title="GoTableaux">
  <file path="Argument.php" hash="1704e46e669951749ba6b33ba6ab21be" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux" line="28" package="GoTableaux">
      <name>Argument</name>
      <full_name>\GoTableaux\Argument</full_name>
      <extends/>
      <docblock line="24">
        <description><![CDATA[Represents an argument as a set of premises and one conclusion.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="35" package="Default">
        <name>$premises</name>
        <default><![CDATA[array()]]></default>
        <docblock line="30">
          <description><![CDATA[The set of premises. An array of {@link Sentence} objects.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="30" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="42" package="Default">
        <name>$conclusion</name>
        <default><![CDATA[]]></default>
        <docblock line="37">
          <description><![CDATA[The conclusion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="var" description="" type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="37" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="51" package="">
        <name>createWithPremisesAndConclusion</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[Creates an argument with given premises and conclusion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="param" description="The premises of the argument." type="array" variable="$premises">
            <type by_reference="false">array</type>
          </tag>
          <tag line="44" name="param" description="The conclusion of the argument." type="\GoTableaux\Sentence" variable="$conclusion">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="44" name="return" description="The created instance." type="\GoTableaux\Argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$premises</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="51">
          <name>$conclusion</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="63" package="">
        <name>addPremise</name>
        <type>function</type>
        <docblock line="57">
          <description><![CDATA[Adds a premise to the argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="param" description="The premise to add." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="57" name="return" description="Current instance." type="\GoTableaux\Argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="75" package="">
        <name>addPremises</name>
        <type>function</type>
        <docblock line="69">
          <description><![CDATA[Adds multiple premises to the argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="69" name="param" description="The premises as an array of {@link Sentence} objects." type="array" variable="$premises">
            <type by_reference="false">array</type>
          </tag>
          <tag line="69" name="return" description="Current instance." type="\GoTableaux\Argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$premises</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="87" package="">
        <name>getPremises</name>
        <type>function</type>
        <docblock line="82">
          <description><![CDATA[Gets all the premises of the argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="82" name="return" description="Array of {@link Sentence}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="98" package="">
        <name>setConclusion</name>
        <type>function</type>
        <docblock line="92">
          <description><![CDATA[Sets the conclusion of the argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="92" name="param" description="The conclusion." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="92" name="return" description="Current instance." type="\GoTableaux\Argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
        </docblock>
        <argument line="98">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="109" package="">
        <name>getConclusion</name>
        <type>function</type>
        <docblock line="104">
          <description><![CDATA[Gets the conclusion of the argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="104" name="return" description="The conclusion." type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="config.example.php" hash="9c4a4d20bbbed407b13c91354588947f" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
  </file>
  <file path="config.php" hash="e4527422106da91b45c7cebc086a7516" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
  </file>
  <file path="Exception/Loader.php" hash="2565c1849c0365857fa4ff22e8e05372" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Exception" line="28" package="GoTableaux">
      <name>Loader</name>
      <full_name>\GoTableaux\Exception\Loader</full_name>
      <extends>\GoTableaux\Exception</extends>
      <docblock line="24">
        <description><![CDATA[Represents a loader exception.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
    </class>
  </file>
  <file path="Exception/Parser.php" hash="85e28934b040e8a3b6d7bfb3f99908ed" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Exception" line="28" package="GoTableaux">
      <name>Parser</name>
      <full_name>\GoTableaux\Exception\Parser</full_name>
      <extends>\GoTableaux\Exception</extends>
      <docblock line="24">
        <description><![CDATA[Represents a parsing exception.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="34" package="Default">
        <name>$position</name>
        <default><![CDATA[0]]></default>
        <docblock line="30">
          <description><![CDATA[Character position of parse error.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="40" package="Default">
        <name>$input</name>
        <default><![CDATA['']]></default>
        <docblock line="36">
          <description><![CDATA[Input string for which error was raised.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux\Exception" line="49" package="">
        <name>createWithOptions</name>
        <type>function</type>
        <docblock line="42">
          <description><![CDATA[Creates an instance with options array.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="param" description="Associative array of options. Possible keys are 'message', 'code', 'previous', 'position', 'input'." type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="42" name="return" description="Created instance." type="\GoTableaux\Exception\Parser">
            <type by_reference="false">\GoTableaux\Exception\Parser</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$options</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux\Exception" line="71" package="">
        <name>createWithMsgInputPos</name>
        <type>function</type>
        <docblock line="63">
          <description><![CDATA[Creates an instance with message, input, and position parameters.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="param" description="The error message." type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="63" name="param" description="The current input string." type="string" variable="$input">
            <type by_reference="false">string</type>
          </tag>
          <tag line="63" name="param" description="The input string offset at which the error occurred." type="integer" variable="$position">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="63" name="return" description="Created instance." type="\GoTableaux\Exception\Parser">
            <type by_reference="false">\GoTableaux\Exception\Parser</type>
          </tag>
        </docblock>
        <argument line="71">
          <name>$message</name>
          <default><![CDATA['']]></default>
          <type/>
        </argument>
        <argument line="71">
          <name>$input</name>
          <default><![CDATA['']]></default>
          <type/>
        </argument>
        <argument line="71">
          <name>$position</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Exception/Proof.php" hash="72debc7b07d39220d2038abe1cc85da4" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Exception" line="28" package="GoTableaux">
      <name>Proof</name>
      <full_name>\GoTableaux\Exception\Proof</full_name>
      <extends>\GoTableaux\Exception</extends>
      <docblock line="24">
        <description><![CDATA[Represents a proof exception.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
    </class>
  </file>
  <file path="Exception/Rule.php" hash="99fcae879887c0f7a8e319efcf2eb06b" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Exception" line="28" package="GoTableaux">
      <name>Rule</name>
      <full_name>\GoTableaux\Exception\Rule</full_name>
      <extends>\GoTableaux\Exception\Tableau</extends>
      <docblock line="24">
        <description><![CDATA[Represents a tableau rule exception.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
    </class>
  </file>
  <file path="Exception/Tableau.php" hash="50baf44402d9c8e6db88bab162bd9afc" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Exception" line="28" package="GoTableaux">
      <name>Tableau</name>
      <full_name>\GoTableaux\Exception\Tableau</full_name>
      <extends>\GoTableaux\Exception\Proof</extends>
      <docblock line="24">
        <description><![CDATA[Represents a tableau proof exception.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
    </class>
  </file>
  <file path="Exception/Vocabulary.php" hash="15141832a722ef250f5434b42771d89d" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Exception" line="28" package="GoTableaux">
      <name>Vocabulary</name>
      <full_name>\GoTableaux\Exception\Vocabulary</full_name>
      <extends>\GoTableaux\Exception</extends>
      <docblock line="24">
        <description><![CDATA[Represents a vocabulary exception.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
    </class>
  </file>
  <file path="Exception/Writer.php" hash="2a033e025294e896456a938952c045ac" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Exception" line="28" package="GoTableaux">
      <name>Writer</name>
      <full_name>\GoTableaux\Exception\Writer</full_name>
      <extends>\GoTableaux\Exception</extends>
      <docblock line="24">
        <description><![CDATA[Represents a tableau writer exception.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
    </class>
  </file>
  <file path="Exception.php" hash="425a1653b852eca611881dfda2220929" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux" line="27" package="GoTableaux">
      <name>Exception</name>
      <full_name>\GoTableaux\Exception</full_name>
      <extends>\Exception</extends>
      <docblock line="23">
        <description><![CDATA[Represents a program exception.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="GoTableaux"/>
      </docblock>
    </class>
  </file>
  <file path="Loader.php" hash="0d22a1ed779d4e1d33db49894faed7b2" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="LoaderException">\GoTableaux\Exception\Loader</namespace-alias>
    <constant namespace="GoTableaux" line="35" package="GoTableaux">
      <name>DS</name>
      <value><![CDATA[DIRECTORY_SEPARATOR]]></value>
      <docblock line="31">
        <description><![CDATA[Directory separator shortcut.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="31" name="package" description="GoTableaux"/>
      </docblock>
    </constant>
    <class final="false" abstract="false" namespace="GoTableaux" line="42" package="GoTableaux">
      <name>Loader</name>
      <full_name>\GoTableaux\Loader</full_name>
      <extends/>
      <docblock line="38">
        <description><![CDATA[Loads class files.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="38" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="52" package="">
        <name>loadClass</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[Loads a class file by parsing its namespace.]]></description>
          <long-description><![CDATA[<p>Registered as an autoloader.</p>]]></long-description>
          <tag line="44" name="param" description="The class name to load." type="string" variable="$class">
            <type by_reference="false">string</type>
          </tag>
          <tag line="44" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$class</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="65" package="">
        <name>loadConfig</name>
        <type>function</type>
        <docblock line="60">
          <description><![CDATA[Loads the config file.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="60" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/Rule/Closure.php" hash="805bd17c80675a130b0ee2d55ac3a3c0" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="33" code="50010">No DocBlock was found for method appliesToBranch()</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="31" package="CPL">
      <name>Closure</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\Rule\Closure</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Closure</extends>
      <docblock line="27">
        <description><![CDATA[Represents the tableaux closure rule for CPL.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="CPL"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="33" package="">
        <name>appliesToBranch</name>
        <type>function</type>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/Rule/Conjunction.php" hash="9b8ac6ccc7e5e4154364fc915ece8124" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="32" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class Conjunction</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/CPL/ProofSystem/Rule/Conjunction.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="26" package="CPL">
      <name>Conjunction</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\Rule\Conjunction</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="CPL"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator' 	=> 'Conjunction'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="32" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="32">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="32">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="32">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/Rule/Disjunction.php" hash="b48100182a29627ea3fe3830a8ba23d5" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="32" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class Disjunction</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/CPL/ProofSystem/Rule/Disjunction.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="26" package="CPL">
      <name>Disjunction</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\Rule\Disjunction</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="CPL"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator' 	=> 'Disjunction'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="32" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="32">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="32">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="32">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/Rule/DoubleNegation.php" hash="644da76379bb7fa0365fc9075162d49b" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="32" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class DoubleNegation</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/CPL/ProofSystem/Rule/DoubleNegation.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="26" package="CPL">
      <name>DoubleNegation</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\Rule\DoubleNegation</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="CPL"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator' 	=> array( 'Negation', 'Negation' )
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="32" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="32">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="32">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="32">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/Rule/MaterialBiconditional.php" hash="a01179b64429b3e1c730e390c6c93e5b" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="32" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class MaterialBiconditional</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/CPL/ProofSystem/Rule/MaterialBiconditional.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="26" package="CPL">
      <name>MaterialBiconditional</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\Rule\MaterialBiconditional</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="CPL"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator' 	=> 'Material Biconditional'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="32" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="32">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="32">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="32">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/Rule/MaterialConditional.php" hash="f1e156f5df14b868f3487568cee29913" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="32" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class MaterialConditional</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/CPL/ProofSystem/Rule/MaterialConditional.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="26" package="CPL">
      <name>MaterialConditional</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\Rule\MaterialConditional</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="CPL"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator' 	=> 'Material Conditional'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="32" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="32">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="32">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="32">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/Rule/NegatedConjunction.php" hash="3f6a34a3f32a96fa4ab0667674576de6" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="32" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedConjunction</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/CPL/ProofSystem/Rule/NegatedConjunction.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="26" package="CPL">
      <name>NegatedConjunction</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\Rule\NegatedConjunction</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="CPL"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator' 	=> array( 'Negation', 'Conjunction' )
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="32" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="32">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="32">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="32">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/Rule/NegatedDisjunction.php" hash="88bd36776bf242c25875750f0a0efea6" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="32" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedDisjunction</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/CPL/ProofSystem/Rule/NegatedDisjunction.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="26" package="CPL">
      <name>NegatedDisjunction</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\Rule\NegatedDisjunction</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="CPL"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator' 	=> array( 'Negation', 'Disjunction' )
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="32" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="32">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="32">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="32">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/Rule/NegatedMaterialBiconditional.php" hash="a39a8f3ec426e46ae832c91e69542951" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="32" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedMaterialBiconditional</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/CPL/ProofSystem/Rule/NegatedMaterialBiconditional.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="26" package="CPL">
      <name>NegatedMaterialBiconditional</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\Rule\NegatedMaterialBiconditional</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="CPL"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator' 	=> array( 'Negation', 'Material Biconditional' )
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="32" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="32">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="32">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="32">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/Rule/NegatedMaterialConditional.php" hash="28fb37e86493fb5af90dee1f62b7d51c" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="32" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedMaterialConditional</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/CPL/ProofSystem/Rule/NegatedMaterialConditional.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="26" package="CPL">
      <name>NegatedMaterialConditional</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\Rule\NegatedMaterialConditional</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="CPL"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator' 	=> array( 'Negation', 'Material Conditional' )
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="32" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="32">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="32">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="32">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem.php" hash="fc5cecd21fb00cb50be0a9770d8cf280" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="34" code="50018">No DocBlock was found for property $ruleClasses</error>
    </parse_markers>
    <namespace-alias name="Tableau">\GoTableaux\Proof\Tableau</namespace-alias>
    <namespace-alias name="Argument">\GoTableaux\Argument</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL" line="32" package="CPL">
      <name>ProofSystem</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem</extends>
      <docblock line="28">
        <description><![CDATA[Represents the Tableaux system for CPL.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="28" name="package" description="CPL"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="34" package="Default">
        <name>$ruleClasses</name>
        <default><![CDATA[array(
		'Closure',
		'Conjunction',
		'NegatedConjunction',
		'Disjunction',
		'NegatedDisjunction',
		'MaterialConditional',
		'NegatedMaterialConditional',
		'MaterialBiconditional',
		'NegatedMaterialBiconditional',
		'DoubleNegation'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL" line="55" package="">
        <name>buildTrunk</name>
        <type>function</type>
        <docblock line="47">
          <description><![CDATA[Builds the trunk of a tableau for an argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="param" description="The empty tableau." type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="47" name="param" description="The argument." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="47" name="param" description="The logic of the proof system." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="47" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="55">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
        <argument line="55">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
        <argument line="55">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL.php" hash="71a8286ff4d62da588bd050475d6c9e3" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $inheritLexiconFrom</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic" line="28" package="CPL">
      <name>CPL</name>
      <full_name>\GoTableaux\Logic\CPL</full_name>
      <extends>\GoTableaux\Logic</extends>
      <docblock line="24">
        <description><![CDATA[Represents Classical Propositional Logic.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="CPL"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$inheritLexiconFrom</name>
        <default><![CDATA['FDE']]></default>
      </property>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/Closure.php" hash="a9033ce3aa56a9ed39c1eaa3982210aa" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="33" code="50010">No DocBlock was found for method appliesToBranch()</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="31" package="FDE">
      <name>Closure</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\Closure</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Closure</extends>
      <docblock line="27">
        <description><![CDATA[Represents the tableaux closure rule for FDE.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="FDE"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>appliesToBranch</name>
        <type>function</type>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/ConjunctionDesignated.php" hash="a18ca7a9b1d50b98e6f0e95cf356b355" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class ConjunctionDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/ConjunctionDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="FDE">
      <name>ConjunctionDesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\ConjunctionDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="FDE"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator'	 => 'Conjunction',
		'designated' => true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/ConjunctionUndesignated.php" hash="c267ed6595f9bbc441357508a9eb9a24" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class ConjunctionUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/ConjunctionUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="FDE">
      <name>ConjunctionUndesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\ConjunctionUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="FDE"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator'	 => 'Conjunction',
		'designated' => false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/DisjunctionDesignated.php" hash="833923d47e78b725ba127790e7d2faa3" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class DisjunctionDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/DisjunctionDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="FDE">
      <name>DisjunctionDesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\DisjunctionDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="FDE"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator'	 => 'Disjunction',
		'designated' => true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/DisjunctionUndesignated.php" hash="0e3e2f33bfd7dc8e10f20d76f55a3b64" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class DisjunctionUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/DisjunctionUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="FDE">
      <name>DisjunctionUndesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\DisjunctionUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="FDE"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator'	 => 'Disjunction',
		'designated' => false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/DoubleNegationDesignated.php" hash="6244d2a235aee6c0126a6ad4dc10b4ae" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class DoubleNegationDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/DoubleNegationDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="FDE">
      <name>DoubleNegationDesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\DoubleNegationDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="FDE"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator'	 => array( 'Negation', 'Negation' ),
		'designated' => true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/DoubleNegationUndesignated.php" hash="62b4a4f6751b9d27adbdeba9d93e704e" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class DoubleNegationUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/DoubleNegationUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="FDE">
      <name>DoubleNegationUndesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\DoubleNegationUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="FDE"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator'	 => array( 'Negation', 'Negation' ),
		'designated' => false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/MaterialBiconditionalDesignated.php" hash="c719a3140fe2d7a0cb0280a9dd8f0bf8" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class MaterialBiconditionalDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/MaterialBiconditionalDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="FDE">
      <name>MaterialBiconditionalDesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\MaterialBiconditionalDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="FDE"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator'	 => 'Material Biconditional',
		'designated' => true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/MaterialBiconditionalUndesignated.php" hash="78ad94ccf7e860358fd6fc0056685cf1" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class MaterialBiconditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/MaterialBiconditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="FDE">
      <name>MaterialBiconditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\MaterialBiconditionalUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="FDE"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator'	 => 'Material Biconditional',
		'designated' => false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/MaterialConditionalDesignated.php" hash="33f766aae3f43ad962d0d0d3126d9213" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class MaterialConditionalDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/MaterialConditionalDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="FDE">
      <name>MaterialConditionalDesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\MaterialConditionalDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="FDE"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator'	 => 'Material Conditional',
		'designated' => true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/MaterialConditionalUndesignated.php" hash="35fc3ae9f9ea325b42e1fa380e28cff8" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class MaterialConditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/MaterialConditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="FDE">
      <name>MaterialConditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\MaterialConditionalUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="FDE"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator'	 => 'Material Conditional',
		'designated' => false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/NegatedConjunctionDesignated.php" hash="22b974dfcf7fa0f1f2cf1bc8a0e0ce3f" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedConjunctionDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/NegatedConjunctionDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="FDE">
      <name>NegatedConjunctionDesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\NegatedConjunctionDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="FDE"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator'	 => array( 'Negation', 'Conjunction' ),
		'designated' => true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/NegatedConjunctionUndesignated.php" hash="4fae67dc3c1b87738af5fab06181b4a9" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedConjunctionUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/NegatedConjunctionUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="FDE">
      <name>NegatedConjunctionUndesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\NegatedConjunctionUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="FDE"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator'	 => array( 'Negation', 'Conjunction' ),
		'designated' => false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/NegatedDisjunctionDesignated.php" hash="eb8bb142d0bff8453d08148295a9171d" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedDisjunctionDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/NegatedDisjunctionDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="FDE">
      <name>NegatedDisjunctionDesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\NegatedDisjunctionDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="FDE"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator'	 => array( 'Negation', 'Disjunction' ),
		'designated' => true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/NegatedDisjunctionUndesignated.php" hash="ff89ee454b5b81d79c20c2e0bbe0490e" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedDisjunctionUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/NegatedDisjunctionUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="FDE">
      <name>NegatedDisjunctionUndesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\NegatedDisjunctionUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="FDE"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator'	 => array( 'Negation', 'Disjunction' ),
		'designated' => false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/NegatedMaterialBiconditionalDesignated.php" hash="7cd9e2030eceb238dec3d6af30841b5f" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedMaterialBiconditionalDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/NegatedMaterialBiconditionalDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="FDE">
      <name>NegatedMaterialBiconditionalDesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\NegatedMaterialBiconditionalDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="FDE"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator'	 => array( 'Negation', 'Material Biconditional' ),
		'designated' => true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/NegatedMaterialBiconditionalUndesignated.php" hash="4101a041129548298149989a39b6b883" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedMaterialBiconditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/NegatedMaterialBiconditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="FDE">
      <name>NegatedMaterialBiconditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\NegatedMaterialBiconditionalUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="FDE"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator'	 => array( 'Negation', 'Material Biconditional' ),
		'designated' => false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/NegatedMaterialConditionalDesignated.php" hash="cc8daf256422383c707632ef8ab0832a" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedMaterialConditionalDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/NegatedMaterialConditionalDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="FDE">
      <name>NegatedMaterialConditionalDesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\NegatedMaterialConditionalDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="FDE"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator'	 => array( 'Negation', 'Material Conditional' ),
		'designated' => true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/NegatedMaterialConditionalUndesignated.php" hash="888a4a8f07b65f550bd55863b979b27b" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedMaterialConditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/NegatedMaterialConditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="FDE">
      <name>NegatedMaterialConditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\NegatedMaterialConditionalUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="FDE"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator'	 => array( 'Negation', 'Material Conditional' ),
		'designated' => false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem.php" hash="a7cd84d1d66a6454c5fad8854921d974" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="34" code="50018">No DocBlock was found for property $ruleClasses</error>
    </parse_markers>
    <namespace-alias name="Tableau">\GoTableaux\Proof\Tableau</namespace-alias>
    <namespace-alias name="Argument">\GoTableaux\Argument</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE" line="32" package="FDE">
      <name>ProofSystem</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem</extends>
      <docblock line="28">
        <description><![CDATA[Represents the FDE tableaux system.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="28" name="package" description="FDE"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="34" package="Default">
        <name>$ruleClasses</name>
        <default><![CDATA[array(
		'Closure',
		'ConjunctionDesignated',
		'ConjunctionUndesignated',
		'NegatedConjunctionDesignated',
		'NegatedConjunctionUndesignated',
		'DisjunctionDesignated',
		'DisjunctionUndesignated',
		'NegatedDisjunctionDesignated',
		'NegatedDisjunctionUndesignated',
		'MaterialConditionalDesignated',
		'MaterialConditionalUndesignated',
		'NegatedMaterialConditionalDesignated',
		'NegatedMaterialConditionalUndesignated',
		'MaterialBiconditionalDesignated',
		'MaterialBiconditionalUndesignated',
		'NegatedMaterialBiconditionalDesignated',
		'NegatedMaterialBiconditionalUndesignated',
		'DoubleNegationDesignated',
		'DoubleNegationUndesignated'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE" line="64" package="">
        <name>buildTrunk</name>
        <type>function</type>
        <docblock line="56">
          <description><![CDATA[Constructs the initial list (trunk) for an argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="param" description="The tableau to attach the" type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="56" name="param" description="The argument for which to build the trunk." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="56" name="param" description="The logic of the proof system." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="56" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="64">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
        <argument line="64">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
        <argument line="64">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE.php" hash="203c534a44860372efcb2c58055adebb" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $lexicon</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic" line="28" package="FDE">
      <name>FDE</name>
      <full_name>\GoTableaux\Logic\FDE</full_name>
      <extends>\GoTableaux\Logic</extends>
      <docblock line="24">
        <description><![CDATA[Represents First Degree Entailment Logic.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="FDE"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$lexicon</name>
        <default><![CDATA[array(
		'openMarks' 		=> array('('),
		'closeMarks' 		=> array(')'),
		'separators' 		=> array(' '),
		'subscripts' 		=> array('_'),
		'atomicSymbols' 	=> array('A', 'B', 'C', 'D', 'E', 'F'),
		'operators' 	=> array(
			'Negation' => 1,
			'Conjunction' => 2,
			'Disjunction' => 2,
			'Material Conditional' => 2,
			'Material Biconditional' => 2,
		)
	)]]></default>
      </property>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/Closure.php" hash="4317df3c12715ebdb074e12e1ef71c1e" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="33" code="50010">No DocBlock was found for method appliesToBranch()</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="31" package="GO">
      <name>Closure</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\Closure</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Closure</extends>
      <docblock line="27">
        <description><![CDATA[Represents the tableaux closure rule for GO.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="GO"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>appliesToBranch</name>
        <type>function</type>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/ConditionalUndesignated.php" hash="c8ecdf3c7ac9103410303842c2358fb0" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class ConditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/ConditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="GO">
      <name>ConditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\ConditionalUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="GO"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator' => 'Conditional',
		'designated' => false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/ConjunctionUndesignated.php" hash="40e1c6ab380c46d44b9790a966264895" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class ConjunctionUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/ConjunctionUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="GO">
      <name>ConjunctionUndesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\ConjunctionUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="GO"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator' 		=> 'Conjunction',
		'designated' 	=> false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/DisjunctionUndesignated.php" hash="4ea290db55a698b6435dd56af58ac315" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class DisjunctionUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/DisjunctionUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="GO">
      <name>DisjunctionUndesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\DisjunctionUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="GO"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator' 		=> 'Disjunction',
		'designated' 	=> false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/MaterialBiconditionalUndesignated.php" hash="dfbc18b924ef3ddfa978e94e99d60a80" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class MaterialBiconditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/MaterialBiconditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="GO">
      <name>MaterialBiconditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\MaterialBiconditionalUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="GO"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator' 		=> 'Material Biconditional',
		'designated' 	=> false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/MaterialConditionalUndesignated.php" hash="72bf914d6afec3940df5520510680801" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class MaterialConditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/MaterialConditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="GO">
      <name>MaterialConditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\MaterialConditionalUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="GO"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator' 		=> 'Material Conditional',
		'designated' 	=> false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/NegatedConditionalDesignated.php" hash="845843c270c8f9eebc2176424ea794a4" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedConditionalDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/NegatedConditionalDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="GO">
      <name>NegatedConditionalDesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\NegatedConditionalDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="GO"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator'   => array( 'Negation', 'Conditional' ),
		'designated' => true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/NegatedConditionalUndesignated.php" hash="2e2c785572670a67061a5f1867013989" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedConditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/NegatedConditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="GO">
      <name>NegatedConditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\NegatedConditionalUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="GO"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator'   => array( 'Negation', 'Conditional' ),
		'designated' => false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/NegatedConjunctionDesignated.php" hash="2a4e97087cbc91e71c6b6f899d3474cc" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedConjunctionDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/NegatedConjunctionDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="GO">
      <name>NegatedConjunctionDesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\NegatedConjunctionDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="GO"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator' 		=> array( 'Negation', 'Conjunction' ),
		'designated' 	=> true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/NegatedConjunctionUndesignated.php" hash="9b746b25df39a2a8bc37853c388be5bb" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedConjunctionUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/NegatedConjunctionUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="GO">
      <name>NegatedConjunctionUndesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\NegatedConjunctionUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="GO"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator' 		=> array( 'Negation', 'Conjunction' ),
		'designated' 	=> false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/NegatedDisjunctionDesignated.php" hash="8c1ad8766edf490e2c15ef3e14f69a8a" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedDisjunctionDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/NegatedDisjunctionDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="GO">
      <name>NegatedDisjunctionDesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\NegatedDisjunctionDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="GO"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator' 		=> array( 'Negation', 'Disjunction' ),
		'designated' 	=> true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/NegatedDisjunctionUndesignated.php" hash="66bf125462dc801d228688ffed0a0f58" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedDisjunctionUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/NegatedDisjunctionUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="GO">
      <name>NegatedDisjunctionUndesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\NegatedDisjunctionUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="GO"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator' 		=> array( 'Negation', 'Disjunction' ),
		'designated' 	=> false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/NegatedMaterialBiconditionalDesignated.php" hash="e4e660f203fc9b4924597a436857a51a" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedMaterialBiconditionalDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/NegatedMaterialBiconditionalDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="GO">
      <name>NegatedMaterialBiconditionalDesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\NegatedMaterialBiconditionalDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="GO"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator' 		=> array( 'Negation', 'Material Biconditional' ),
		'designated' 	=> true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/NegatedMaterialBiconditionalUndesignated.php" hash="9be7d45b966c3f9b4216f712e7a2b00d" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedMaterialBiconditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/NegatedMaterialBiconditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="GO">
      <name>NegatedMaterialBiconditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\NegatedMaterialBiconditionalUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="GO"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator' 		=> array( 'Negation', 'Material Biconditional' ),
		'designated' 	=> false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/NegatedMaterialConditionalDesignated.php" hash="711d645116a5ec30f16c1a4867583346" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedMaterialConditionalDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/NegatedMaterialConditionalDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="GO">
      <name>NegatedMaterialConditionalDesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\NegatedMaterialConditionalDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="GO"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator' 		=> array( 'Negation', 'Material Conditional' ),
		'designated' 	=> true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/NegatedMaterialConditionalUndesignated.php" hash="4b086df74a7ff42d0185bef8517a9e91" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedMaterialConditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/NegatedMaterialConditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="GO">
      <name>NegatedMaterialConditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\NegatedMaterialConditionalUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="GO"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator' 		=> array( 'Negation', 'Material Conditional' ),
		'designated' 	=> false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem.php" hash="4999fcbdd29e548730f43603fe33caf6" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="31" code="50018">No DocBlock was found for property $ruleClasses</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO" line="29" package="GO">
      <name>ProofSystem</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem</full_name>
      <extends>\GoTableaux\Logic\FDE\ProofSystem</extends>
      <docblock line="24">
        <description><![CDATA[Represents the Tableaux system for GO.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GO"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="31" package="Default">
        <name>$ruleClasses</name>
        <default><![CDATA[array(
		'Closure',
		'FDE.ConjunctionDesignated',
		'ConjunctionUndesignated',
		'NegatedConjunctionDesignated',
		'NegatedConjunctionUndesignated',
		'FDE.DisjunctionDesignated',
		'DisjunctionUndesignated',
		'NegatedDisjunctionDesignated',
		'NegatedDisjunctionUndesignated',
		'FDE.MaterialConditionalDesignated',
		'MaterialConditionalUndesignated',
		'NegatedMaterialConditionalDesignated',
		'NegatedMaterialConditionalUndesignated',
		'FDE.MaterialBiconditionalDesignated',
		'MaterialBiconditionalUndesignated',
		'NegatedMaterialBiconditionalDesignated',
		'NegatedMaterialBiconditionalUndesignated',
		'FDE.DoubleNegationDesignated',
		'FDE.DoubleNegationUndesignated',
		'Lukasiewicz/ConditionalDesignated',
		'ConditionalUndesignated',
		'NegatedConditionalDesignated',
		'NegatedConditionalUndesignated',
	)]]></default>
      </property>
    </class>
  </file>
  <file path="Logic/GO.php" hash="8fddf5fc6d238ea8a62c57e27fa3d72a" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $inheritLexiconFrom</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic" line="28" package="GO">
      <name>GO</name>
      <full_name>\GoTableaux\Logic\GO</full_name>
      <extends>\GoTableaux\Logic</extends>
      <docblock line="24">
        <description><![CDATA[Represents GO 3-valued Propositional Logic.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GO"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$inheritLexiconFrom</name>
        <default><![CDATA['Lukasiewicz']]></default>
      </property>
    </class>
  </file>
  <file path="Logic/LP/ProofSystem/Rule/Closure.php" hash="40d87ff9a84c1fef950414c43d841869" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="33" code="50010">No DocBlock was found for method appliesToBranch()</error>
    </parse_markers>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\LP\ProofSystem\Rule" line="31" package="LP">
      <name>Closure</name>
      <full_name>\GoTableaux\Logic\LP\ProofSystem\Rule\Closure</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Closure</extends>
      <docblock line="27">
        <description><![CDATA[Represents the LP closure rule.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="LP"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\LP\ProofSystem\Rule" line="33" package="">
        <name>appliesToBranch</name>
        <type>function</type>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/LP/ProofSystem.php" hash="53f19a0d92b82b7d648a6f26cb49564a" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $ruleClasses</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\LP" line="28" package="LP">
      <name>ProofSystem</name>
      <full_name>\GoTableaux\Logic\LP\ProofSystem</full_name>
      <extends>\GoTableaux\Logic\FDE\ProofSystem</extends>
      <docblock line="24">
        <description><![CDATA[Represents the LP tableaux system.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="LP"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$ruleClasses</name>
        <default><![CDATA[array(
		'Closure',
		'FDE.Closure',
		'FDE.ConjunctionDesignated',
		'FDE.ConjunctionUndesignated',
		'FDE.NegatedConjunctionDesignated',
		'FDE.NegatedConjunctionUndesignated',
		'FDE.DisjunctionDesignated',
		'FDE.DisjunctionUndesignated',
		'FDE.NegatedDisjunctionDesignated',
		'FDE.NegatedDisjunctionUndesignated',
		'FDE.MaterialConditionalDesignated',
		'FDE.MaterialConditionalUndesignated',
		'FDE.NegatedMaterialConditionalDesignated',
		'FDE.NegatedMaterialConditionalUndesignated',
		'FDE.MaterialBiconditionalDesignated',
		'FDE.MaterialBiconditionalUndesignated',
		'FDE.NegatedMaterialBiconditionalDesignated',
		'FDE.NegatedMaterialBiconditionalUndesignated',
		'FDE.DoubleNegationDesignated',
		'FDE.DoubleNegationUndesignated',
	)]]></default>
      </property>
    </class>
  </file>
  <file path="Logic/LP.php" hash="300ba3e7b01b7cc182e6cdf7bb94ba25" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $inheritLexiconFrom</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic" line="28" package="LP">
      <name>LP</name>
      <full_name>\GoTableaux\Logic\LP</full_name>
      <extends>\GoTableaux\Logic</extends>
      <docblock line="24">
        <description><![CDATA[Represents the Logic of Paradox.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="LP"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$inheritLexiconFrom</name>
        <default><![CDATA['FDE']]></default>
      </property>
    </class>
  </file>
  <file path="Logic/Lukasiewicz/ProofSystem/Rule/ConditionalDesignated.php" hash="90b99751d8b761cb43c62eed733b6c4d" package="Default">
    <markers>
      <todo line="45">write test that these rules would fail</todo>
    </markers>
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="34" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class ConditionalDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/Lukasiewicz/ProofSystem/Rule/ConditionalDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\Lukasiewicz\ProofSystem\Rule" line="26" package="Lukasiewicz">
      <name>ConditionalDesignated</name>
      <full_name>\GoTableaux\Logic\Lukasiewicz\ProofSystem\Rule\ConditionalDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Lukasiewicz"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator' => 'Conditional',
		'designated' => true,
		'ticked'	 => false
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\Lukasiewicz\ProofSystem\Rule" line="34" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="34">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="34">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="34">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/Lukasiewicz/ProofSystem/Rule/ConditionalUndesignated.php" hash="29e6375f2c5904092be35dfd9bcb9ba4" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="34" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class ConditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/Lukasiewicz/ProofSystem/Rule/ConditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\Lukasiewicz\ProofSystem\Rule" line="26" package="Lukasiewicz">
      <name>ConditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\Lukasiewicz\ProofSystem\Rule\ConditionalUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Lukasiewicz"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator' => 'Conditional',
		'designated' => false,
		'ticked'	 => false
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\Lukasiewicz\ProofSystem\Rule" line="34" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="34">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="34">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="34">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/Lukasiewicz/ProofSystem/Rule/NegatedConditionalDesignated.php" hash="76713f12f4013c04d503ae750e64f18f" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="34" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedConditionalDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/Lukasiewicz/ProofSystem/Rule/NegatedConditionalDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\Lukasiewicz\ProofSystem\Rule" line="26" package="Lukasiewicz">
      <name>NegatedConditionalDesignated</name>
      <full_name>\GoTableaux\Logic\Lukasiewicz\ProofSystem\Rule\NegatedConditionalDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Lukasiewicz"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator' => array( 'Negation', 'Conditional' ),
		'designated' => true,
		'ticked'	 => false
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\Lukasiewicz\ProofSystem\Rule" line="34" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="34">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="34">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="34">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/Lukasiewicz/ProofSystem/Rule/NegatedConditionalUndesignated.php" hash="1e435b5c08c01702964aceae57bd03de" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="34" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedConditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/Lukasiewicz/ProofSystem/Rule/NegatedConditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\Lukasiewicz\ProofSystem\Rule" line="26" package="Lukasiewicz">
      <name>NegatedConditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\Lukasiewicz\ProofSystem\Rule\NegatedConditionalUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Lukasiewicz"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'operator' => array( 'Negation', 'Conditional' ),
		'designated' => false,
		'ticked'	 => false
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\Lukasiewicz\ProofSystem\Rule" line="34" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="34">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="34">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="34">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/Lukasiewicz/ProofSystem.php" hash="578aed6cf78118ad7ef5692d15aeaa55" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $ruleClasses</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\Lukasiewicz" line="28" package="Lukasiewicz">
      <name>ProofSystem</name>
      <full_name>\GoTableaux\Logic\Lukasiewicz\ProofSystem</full_name>
      <extends>\GoTableaux\Logic\FDE\ProofSystem</extends>
      <docblock line="24">
        <description><![CDATA[Represents the Lukasiewicz 3 tableaux system.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Lukasiewicz"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$ruleClasses</name>
        <default><![CDATA[array(
		'StrongKleene.Closure',
		'FDE.Closure',
		'FDE.ConjunctionDesignated',
		'FDE.ConjunctionUndesignated',
		'FDE.NegatedConjunctionDesignated',
		'FDE.NegatedConjunctionUndesignated',
		'FDE.DisjunctionDesignated',
		'FDE.DisjunctionUndesignated',
		'FDE.NegatedDisjunctionDesignated',
		'FDE.NegatedDisjunctionUndesignated',
		'FDE.MaterialConditionalDesignated',
		'FDE.MaterialConditionalUndesignated',
		'FDE.NegatedMaterialConditionalDesignated',
		'FDE.NegatedMaterialConditionalUndesignated',
		'FDE.MaterialBiconditionalDesignated',
		'FDE.MaterialBiconditionalUndesignated',
		'FDE.NegatedMaterialBiconditionalDesignated',
		'FDE.NegatedMaterialBiconditionalUndesignated',
		'FDE.DoubleNegationDesignated',
		'FDE.DoubleNegationUndesignated',
		'ConditionalDesignated',
		'ConditionalUndesignated',
		'NegatedConditionalDesignated',
		'NegatedConditionalUndesignated',
	)]]></default>
      </property>
    </class>
  </file>
  <file path="Logic/Lukasiewicz.php" hash="fde22fb3a494fe37a022f20f8d524f58" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $inheritLexiconFrom</error>
      <error line="32" code="50018">No DocBlock was found for property $lexicon</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic" line="28" package="Lukasiewicz">
      <name>Lukasiewicz</name>
      <full_name>\GoTableaux\Logic\Lukasiewicz</full_name>
      <extends>\GoTableaux\Logic</extends>
      <docblock line="24">
        <description><![CDATA[Represents Lukasiewicz 3-valued logic.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Lukasiewicz"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$inheritLexiconFrom</name>
        <default><![CDATA['FDE']]></default>
      </property>
      <property final="false" static="false" visibility="public" line="32" package="Default">
        <name>$lexicon</name>
        <default><![CDATA[array(
		'operators' => array(
			'Conditional' => 2
		)
	)]]></default>
      </property>
    </class>
  </file>
  <file path="Logic/StrongKleene/ProofSystem/Rule/Closure.php" hash="1a0f880ff8ebf3e5ed4fb8f8816548cb" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="33" code="50010">No DocBlock was found for method appliesToBranch()</error>
    </parse_markers>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\StrongKleene\ProofSystem\Rule" line="31" package="StrongKleene">
      <name>Closure</name>
      <full_name>\GoTableaux\Logic\StrongKleene\ProofSystem\Rule\Closure</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Closure</extends>
      <docblock line="27">
        <description><![CDATA[Represents the K3 closure rule.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="StrongKleene"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\StrongKleene\ProofSystem\Rule" line="33" package="">
        <name>appliesToBranch</name>
        <type>function</type>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/StrongKleene/ProofSystem.php" hash="cf01b399b693fbbb0d72fe40536093b0" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $ruleClasses</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\StrongKleene" line="28" package="StrongKleene">
      <name>ProofSystem</name>
      <full_name>\GoTableaux\Logic\StrongKleene\ProofSystem</full_name>
      <extends>\GoTableaux\Logic\FDE\ProofSystem</extends>
      <docblock line="24">
        <description><![CDATA[Represents the K3 tableaux system.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="StrongKleene"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$ruleClasses</name>
        <default><![CDATA[array(
		'Closure',
		'FDE.Closure',
		'FDE.ConjunctionDesignated',
		'FDE.ConjunctionUndesignated',
		'FDE.NegatedConjunctionDesignated',
		'FDE.NegatedConjunctionUndesignated',
		'FDE.DisjunctionDesignated',
		'FDE.DisjunctionUndesignated',
		'FDE.NegatedDisjunctionDesignated',
		'FDE.NegatedDisjunctionUndesignated',
		'FDE.MaterialConditionalDesignated',
		'FDE.MaterialConditionalUndesignated',
		'FDE.NegatedMaterialConditionalDesignated',
		'FDE.NegatedMaterialConditionalUndesignated',
		'FDE.MaterialBiconditionalDesignated',
		'FDE.MaterialBiconditionalUndesignated',
		'FDE.NegatedMaterialBiconditionalDesignated',
		'FDE.NegatedMaterialBiconditionalUndesignated',
		'FDE.DoubleNegationDesignated',
		'FDE.DoubleNegationUndesignated',
	)]]></default>
      </property>
    </class>
  </file>
  <file path="Logic/StrongKleene.php" hash="fdbcb90e2706c8d4b692affc812aaafa" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $inheritLexiconFrom</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic" line="28" package="StrongKleene">
      <name>StrongKleene</name>
      <full_name>\GoTableaux\Logic\StrongKleene</full_name>
      <extends>\GoTableaux\Logic</extends>
      <docblock line="24">
        <description><![CDATA[Represents Strong Kleene Logic.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="StrongKleene"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$inheritLexiconFrom</name>
        <default><![CDATA['FDE']]></default>
      </property>
    </class>
  </file>
  <file path="Logic.php" hash="701f870249c0d525d1fb97eba004fb81" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="true" namespace="GoTableaux" line="28" package="GoTableaux">
      <name>Logic</name>
      <full_name>\GoTableaux\Logic</full_name>
      <extends/>
      <docblock line="24">
        <description><![CDATA[Represents a Logic.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="35" package="Default">
        <name>$defaultOperatorSymbols</name>
        <default><![CDATA[array(
		'Negation' => '~',
		'Conjunction' => '&',
		'Disjunction' => 'V',
		'Material Conditional' => '>',
		'Material Biconditional' => '<',
		'Conditional' => '$',
	)]]></default>
        <docblock line="30">
          <description><![CDATA[Defines the default operator symbols for the lexicon.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="Key is operator name, value is operator symbol." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="30" name="see" description="\GoTableaux\Logic::initVocabulary()" refers="\GoTableaux\Logic::initVocabulary()"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="49" package="Default">
        <name>$lexicon</name>
        <default><![CDATA[array()]]></default>
        <docblock line="44">
          <description><![CDATA[Defines the default lexicon for initializing the vocabulary.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="var" description="Associate array of lexical items." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="44" name="see" description="\GoTableaux\Vocabulary::__construct()" refers="\GoTableaux\Vocabulary::__construct()"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="56" package="Default">
        <name>$vocabulary</name>
        <default><![CDATA[]]></default>
        <docblock line="51">
          <description><![CDATA[Holds a reference to the vocabulary.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="var" description="" type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
          <tag line="51" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="63" package="Default">
        <name>$proofSystem</name>
        <default><![CDATA[]]></default>
        <docblock line="58">
          <description><![CDATA[Holds a reference to the proof system.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="var" description="" type="\GoTableaux\ProofSystem">
            <type by_reference="false">\GoTableaux\ProofSystem</type>
          </tag>
          <tag line="58" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="70" package="Default">
        <name>$instances</name>
        <default><![CDATA[array()]]></default>
        <docblock line="65">
          <description><![CDATA[Holds the singleton instances of the logics.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="65" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="80" package="">
        <name>getInstance</name>
        <type>function</type>
        <docblock line="72">
          <description><![CDATA[Gets the singleton instance of a particular logic.]]></description>
          <long-description><![CDATA[<p>If the logic class is not loaded, it will attempt to load automatically.</p>]]></long-description>
          <tag line="72" name="param" description="The name of the logic." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="72" name="return" description="The instance of the logic." type="\GoTableaux\Logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
        </docblock>
        <argument line="80">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="true" abstract="false" static="false" visibility="private" namespace="GoTableaux" line="92" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="89">
          <description><![CDATA[Constructor. Final & private, for forcing single instances for each logic.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="107" package="">
        <name>getName</name>
        <type>function</type>
        <docblock line="102">
          <description><![CDATA[Gets the name of the Logic.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="102" name="return" description="The name of the logic." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="120" package="">
        <name>initVocabulary</name>
        <type>function</type>
        <docblock line="112">
          <description><![CDATA[Initializes the vocabulary.]]></description>
          <long-description><![CDATA[<p>This should be run to reload any changes to the lexicon. This creates a
new {@link Vocabulary} object, and so also clears the set of sentences.</p>]]></long-description>
          <tag line="112" name="return" description="Current instance." type="\GoTableaux\Logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="139" package="">
        <name>getVocabulary</name>
        <type>function</type>
        <docblock line="132">
          <description><![CDATA[Gets the vocabulary.]]></description>
          <long-description><![CDATA[<p>Lazily initializes the vocabulary.</p>]]></long-description>
          <tag line="132" name="return" description="The logic's vocabulary." type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="151" package="">
        <name>getParser</name>
        <type>function</type>
        <docblock line="145">
          <description><![CDATA[Gets a new sentence parser of the specified type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="145" name="param" description="Type of parser to instantiate. Default is 'Standard'." type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="145" name="return" description="The initialized sentence parser." type="\GoTableaux\SentenceParser">
            <type by_reference="false">\GoTableaux\SentenceParser</type>
          </tag>
        </docblock>
        <argument line="151">
          <name>$type</name>
          <default><![CDATA['Standard']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="163" package="">
        <name>getProofSystem</name>
        <type>function</type>
        <docblock line="156">
          <description><![CDATA[Gets the proof system.]]></description>
          <long-description><![CDATA[<p>Lazily instantiates proof system.</p>]]></long-description>
          <tag line="156" name="return" description="The logic's proof system." type="\GoTableaux\ProofSystem">
            <type by_reference="false">\GoTableaux\ProofSystem</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="179" package="">
        <name>getOperator</name>
        <type>function</type>
        <docblock line="172">
          <description><![CDATA[Gets an operator from the logic's vocabulary.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="172" name="param" description="The name of the operator." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="172" name="return" description="The operator object." type="\GoTableaux\Operator">
            <type by_reference="false">\GoTableaux\Operator</type>
          </tag>
          <tag line="172" name="see" description="\GoTableaux\Vocabulary::getOperatorByName()" refers="\GoTableaux\Vocabulary::getOperatorByName()"/>
        </docblock>
        <argument line="179">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="191" package="">
        <name>parseSentence</name>
        <type>function</type>
        <docblock line="184">
          <description><![CDATA[Parses a sentence string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="184" name="param" description="The sentence string to parse." type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="184" name="param" description="The parser type to do the parsing. Default is 'Standard'." type="string" variable="$parserType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="184" name="return" description="The sentence instance, registered in the logic's vocabulary." type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
        </docblock>
        <argument line="191">
          <name>$string</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="191">
          <name>$parserType</name>
          <default><![CDATA['Standard']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="204" package="">
        <name>parseSentences</name>
        <type>function</type>
        <docblock line="197">
          <description><![CDATA[Parses an array of sentence strings.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="197" name="param" description="Array of sentence strings to parse." type="array" variable="$strings">
            <type by_reference="false">array</type>
          </tag>
          <tag line="197" name="param" description="The parser type to do the parsing. Default is 'Standard'." type="string" variable="$parserType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="197" name="return" description="Array of {@link Sentence}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="204">
          <name>$strings</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="204">
          <name>$parserType</name>
          <default><![CDATA['Standard']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="220" package="">
        <name>parseArgument</name>
        <type>function</type>
        <docblock line="212">
          <description><![CDATA[Parses an argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="212" name="param" description="The premise strings." type="string|array" variable="$premiseStrings">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="212" name="param" description="Non-empty conclusion string." type="string" variable="$conclusionString">
            <type by_reference="false">string</type>
          </tag>
          <tag line="212" name="param" description="The parser type to do the parsing. Default is 'Standard'." type="string" variable="$parserType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="212" name="return" description="The argument instance." type="\GoTableaux\Argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
        </docblock>
        <argument line="220">
          <name>$premiseStrings</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="220">
          <name>$conclusionString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="220">
          <name>$parserType</name>
          <default><![CDATA['Standard']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="233" package="">
        <name>constructProofForArgument</name>
        <type>function</type>
        <docblock line="227">
          <description><![CDATA[Builds a proof for an argument with the proof system.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="227" name="param" description="The argument for which to build the proof." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="227" name="return" description="$proof The resulting (putative) proof." type="\GoTableaux\Proof">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
        </docblock>
        <argument line="233">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="247" package="">
        <name>applyOperatorToOperands</name>
        <type>function</type>
        <docblock line="238">
          <description><![CDATA[Applies an operator to some operands to generate a new sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="238" name="param" description="The name of the operator, or the operator object." type="string|\GoTableaux\Operator" variable="$operatorOrName">
            <type by_reference="false">string</type>
            <type by_reference="false">\GoTableaux\Operator</type>
          </tag>
          <tag line="238" name="param" description="The sentence(s) to which to apply the operator." type="array|\GoTableaux\Sentence" variable="$operands">
            <type by_reference="false">array</type>
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="238" name="return" description="The resulting sentence." type="\Sentence\Molecular">
            <type by_reference="false">\Sentence\Molecular</type>
          </tag>
          <tag line="238" name="throws" description="on type error." type="\GoTableaux\Exception">
            <type by_reference="false">\GoTableaux\Exception</type>
          </tag>
        </docblock>
        <argument line="247">
          <name>$operatorOrName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="247">
          <name>$operands</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="267" package="">
        <name>negate</name>
        <type>function</type>
        <docblock line="259">
          <description><![CDATA[Negates a sentence.]]></description>
          <long-description><![CDATA[<p>Requires an operator named 'Negation' in the language.</p>]]></long-description>
          <tag line="259" name="param" description="The sentence to negate." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="259" name="return" description="The negated sentence." type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
        </docblock>
        <argument line="267">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Model.php" hash="2bd9768e644bf2603ab599eb70501a78" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux" line="28" package="GoTableaux">
      <name>Model</name>
      <full_name>\GoTableaux\Model</full_name>
      <extends/>
      <docblock line="24">
        <description><![CDATA[Represents model-theoretic model.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
    </class>
  </file>
  <file path="Operator.php" hash="9609e17fff8b4a3acc6ec8849064620d" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="VocabularyException">\GoTableaux\Exception\Vocabulary</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux" line="31" package="GoTableaux">
      <name>Operator</name>
      <full_name>\GoTableaux\Operator</full_name>
      <extends/>
      <docblock line="26">
        <description><![CDATA[Represents an operator.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="26" name="package" description="GoTableaux"/>
        <tag line="26" name="see" description="\GoTableaux\Vocabulary::createOperator()" refers="\GoTableaux\Vocabulary::createOperator()"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="38" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="33">
          <description><![CDATA[Holds the name of the operator.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="33" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="45" package="Default">
        <name>$arity</name>
        <default><![CDATA[]]></default>
        <docblock line="40">
          <description><![CDATA[Holds the arity of the operator.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="40" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="55" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="47">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="param" description="The human name of the operator, e.g. 'Conjunction'." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="47" name="param" description="The arity of the operator." type="integer" variable="$arity">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="47" name="throws" description="VobabularyException} on parameter errors." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
          <tag line="47" name="see" description="\GoTableaux\Vocabulary::createOperator()" refers="\GoTableaux\Vocabulary::createOperator()"/>
        </docblock>
        <argument line="55">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="55">
          <name>$arity</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="70" package="">
        <name>getName</name>
        <type>function</type>
        <docblock line="65">
          <description><![CDATA[Gets the name of the operator.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="return" description="The human name of the operator, e.g. 'Conjunction'." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="80" package="">
        <name>getArity</name>
        <type>function</type>
        <docblock line="75">
          <description><![CDATA[Gets the arity of the operator.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="75" name="return" description="The arity of the operator." type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Proof/Tableau.php" hash="68da2f80fe8b661e1e3f60ec15cdc375" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="TableauException">\GoTableaux\Exception\Tableau</namespace-alias>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Proof" line="32" package="GoTableaux">
      <name>Tableau</name>
      <full_name>\GoTableaux\Proof\Tableau</full_name>
      <extends>\GoTableaux\Proof</extends>
      <docblock line="27">
        <description><![CDATA[Represents a tableau for an argument.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="38" package="Default">
        <name>$metaSymbolNames</name>
        <default><![CDATA[array( 'closeMarker' )]]></default>
        <docblock line="34">
          <description><![CDATA[Meta symbol names required by the node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="44" package="Default">
        <name>$branches</name>
        <default><![CDATA[array()]]></default>
        <docblock line="40">
          <description><![CDATA[Holds the branches on the tree.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="51" package="">
        <name>createBranch</name>
        <type>function</type>
        <docblock line="46">
          <description><![CDATA[Creates a new branch and attaches it to the tableau.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="return" description="The created instance." type="\GoTableaux\Proof\Branch">
            <type by_reference="false">\GoTableaux\Proof\Branch</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="64" package="">
        <name>attach</name>
        <type>function</type>
        <docblock line="56">
          <description><![CDATA[Attaches one or more branches to the tree.]]></description>
          <long-description><![CDATA[<p>Ignores branches that are already on the tree.</p>]]></long-description>
          <tag line="56" name="param" description="The branch or array of branches to add." type="\GoTableaux\Proof\Branch|array" variable="$branches">
            <type by_reference="false">\GoTableaux\Proof\Branch</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="56" name="return" description="Current instance." type="\GoTableaux\Proof\Tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
        </docblock>
        <argument line="64">
          <name>$branches</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="83" package="">
        <name>getBranches</name>
        <type>function</type>
        <docblock line="78">
          <description><![CDATA[Gets all branches on the tree.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="78" name="return" description="Array of {@link Branch}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="93" package="">
        <name>getOpenBranches</name>
        <type>function</type>
        <docblock line="88">
          <description><![CDATA[Gets all open branches on the tree.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="88" name="return" description="Array of {@link Branch} objects." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="103" package="">
        <name>hasOpenBranches</name>
        <type>function</type>
        <docblock line="98">
          <description><![CDATA[Checks whether there are any open branches on the tree.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="98" name="return" description="Whether there are any open branches." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="115" package="">
        <name>isClosed</name>
        <type>function</type>
        <docblock line="108">
          <description><![CDATA[Checks whether the tableau is closed.]]></description>
          <long-description><![CDATA[<p>A tableau is closed when it has no open branches.</p>]]></long-description>
          <tag line="108" name="return" description="Whether the tableau is closed." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="126" package="">
        <name>detach</name>
        <type>function</type>
        <docblock line="120">
          <description><![CDATA[Removes one or more branches from the tree.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="120" name="param" description="The branch or array of branches to remove." type="\GoTableaux\Proof\Branch|array" variable="$branches">
            <type by_reference="false">\GoTableaux\Proof\Branch</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="120" name="return" description="Current instance." type="\GoTableaux\Proof\Tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
        </docblock>
        <argument line="126">
          <name>$branches</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="141" package="">
        <name>clearBranches</name>
        <type>function</type>
        <docblock line="136">
          <description><![CDATA[Clears all branches from the tree.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="136" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="151" package="">
        <name>getStructure</name>
        <type>function</type>
        <docblock line="146">
          <description><![CDATA[Gets the tableau's tree structure representation.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="146" name="return" description="The tree structure." type="\GoTableaux\Proof\Structure">
            <type by_reference="false">\GoTableaux\Proof\Structure</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="161" package="">
        <name>copy</name>
        <type>function</type>
        <docblock line="156">
          <description><![CDATA[Copies the tree and all its branches.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="156" name="return" description="The cloned tree." type="\GoTableaux\Proof\Tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Proof/TableauBranch.php" hash="a93500f153c632df41c29a156199c6e0" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Sentence">\GoTableaux\Sentence</namespace-alias>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Proof" line="31" package="GoTableaux">
      <name>TableauBranch</name>
      <full_name>\GoTableaux\Proof\TableauBranch</full_name>
      <extends/>
      <docblock line="27">
        <description><![CDATA[Represents a tableau branch.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="37" package="Default">
        <name>$nodes</name>
        <default><![CDATA[array()]]></default>
        <docblock line="33">
          <description><![CDATA[Holds the nodes of the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="43" package="Default">
        <name>$tickedNodes</name>
        <default><![CDATA[array()]]></default>
        <docblock line="39">
          <description><![CDATA[Tracks the ticked nodes relative to the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="49" package="Default">
        <name>$closed</name>
        <default><![CDATA[false]]></default>
        <docblock line="45">
          <description><![CDATA[Tracks whether the branch is closed.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="55" package="Default">
        <name>$tableau</name>
        <default><![CDATA[]]></default>
        <docblock line="51">
          <description><![CDATA[Holds a reference to the tableau.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="var" description="" type="\GoTableaux\Proof\Tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="64" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="57">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[<p>Initializes the tableau.</p>]]></long-description>
          <tag line="57" name="param" description="The tableau of the branch." type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
        </docblock>
        <argument line="64">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="75" package="">
        <name>getTableau</name>
        <type>function</type>
        <docblock line="70">
          <description><![CDATA[Gets the tableau.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="70" name="return" description="The tableau." type="\GoTableaux\Proof\Tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="85" package="">
        <name>getNodes</name>
        <type>function</type>
        <docblock line="80">
          <description><![CDATA[Gets the nodes on the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="80" name="return" description="The {@link TableauNode nodes}." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="95" package="">
        <name>getTickedNodes</name>
        <type>function</type>
        <docblock line="90">
          <description><![CDATA[Gets all nodes on the branch that are ticked relative to the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="90" name="return" description="Array of {@link TableauNode}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="105" package="">
        <name>getUntickedNodes</name>
        <type>function</type>
        <docblock line="100">
          <description><![CDATA[Gets all the nodes on the branch that are not ticked relative to the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="100" name="return" description="The unticked nodes." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="116" package="">
        <name>getNodesByClassName</name>
        <type>function</type>
        <docblock line="110">
          <description><![CDATA[Gets all nodes that have certain class name.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="110" name="param" description="The class(es)." type="string" variable="$classes">
            <type by_reference="false">string</type>
          </tag>
          <tag line="110" name="return" description="The nodes on the branch that are of all the classes." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="116">
          <name>$classes</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="130" package="">
        <name>close</name>
        <type>function</type>
        <docblock line="125">
          <description><![CDATA[Closes the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="125" name="return" description="Current instance." type="\GoTableaux\Proof\TableauBranch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="141" package="">
        <name>isClosed</name>
        <type>function</type>
        <docblock line="136">
          <description><![CDATA[Checks whether the branch is closed.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="136" name="return" description="Whether the branch is closed." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="151" package="">
        <name>isOpen</name>
        <type>function</type>
        <docblock line="146">
          <description><![CDATA[Checks whether the branch is open.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="146" name="return" description="Whether the branch is open." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="162" package="">
        <name>hasNode</name>
        <type>function</type>
        <docblock line="156">
          <description><![CDATA[Checks whether a node is on the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="156" name="param" description="The node to check." type="\GoTableaux\Proof\TableauNode" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
          <tag line="156" name="return" description="Whether the node is on the branch." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="162">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>TableauNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="172" package="">
        <name>copy</name>
        <type>function</type>
        <docblock line="167">
          <description><![CDATA[Clones the branch. Maintains references to the nodes.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="167" name="return" description="The new copy." type="\GoTableaux\Proof\TableauBranch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="185" package="">
        <name>branch</name>
        <type>function</type>
        <docblock line="177">
          <description><![CDATA[Branches the branch.]]></description>
          <long-description><![CDATA[<p>Copies the branch, attaches the copy to the tableau, and returns the new
branch.</p>]]></long-description>
          <tag line="177" name="return" description="The new branch" type="\GoTableaux\Proof\TableauBranch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="204" package="">
        <name>find</name>
        <type>function</type>
        <docblock line="192">
          <description><![CDATA[Finds nodes on the branch matching the given conditions.]]></description>
          <long-description><![CDATA[<p>The default parameters for the conditions are 'class' Each node class provides a filter function which returns false when the
node fails to meet the conditions provided.</p>]]></long-description>
          <tag line="192" name="param" description="Wether to return one or all results ('all' or 'one')." type="string" variable="$ret">
            <type by_reference="false">string</type>
          </tag>
          <tag line="192" name="param" description="The conditions to apply." type="array" variable="$conditions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="192" name="return" description="The results depending on $ret." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="192" name="throws" description="on an invalid $ret value." type="\ErrorException">
            <type by_reference="false">\ErrorException</type>
          </tag>
          <tag line="192" name="see" description="\GoTableaux\Proof\TableauNode::filter()" refers="\GoTableaux\Proof\TableauNode::filter()"/>
        </docblock>
        <argument line="204">
          <name>$ret</name>
          <default><![CDATA['all']]></default>
          <type/>
        </argument>
        <argument line="204">
          <name>$conditions</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="228" package="">
        <name>tickNode</name>
        <type>function</type>
        <docblock line="222">
          <description><![CDATA[Ticks a node relative to the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="222" name="param" description="The node to tick." type="\GoTableaux\Proof\TableauNode" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
          <tag line="222" name="return" description="Current instance." type="\GoTableaux\Proof\TableauBranch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
        </docblock>
        <argument line="228">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>TableauNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="240" package="">
        <name>untickNode</name>
        <type>function</type>
        <docblock line="234">
          <description><![CDATA[Unticks a node relative to the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="234" name="param" description="The node to untick." type="\GoTableaux\Proof\TableauNode" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
          <tag line="234" name="return" description="" type="\GoTableaux\Proof\TableauBranch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
        </docblock>
        <argument line="240">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>TableauNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="252" package="">
        <name>nodeIsTicked</name>
        <type>function</type>
        <docblock line="246">
          <description><![CDATA[Determines whether a node is ticked relative to the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="246" name="param" description="The node to check." type="\GoTableaux\Proof\TableauNode" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
          <tag line="246" name="return" description="Whether the node is ticked relative to the branch." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="252">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>TableauNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="263" package="">
        <name>addNode</name>
        <type>function</type>
        <docblock line="257">
          <description><![CDATA[Adds a node to the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="257" name="param" description="The node to add." type="\GoTableaux\Proof\TableauNode" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
          <tag line="257" name="return" description="Current instance." type="\GoTableaux\Proof\TableauBranch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
        </docblock>
        <argument line="263">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>TableauNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="277" package="">
        <name>removeNode</name>
        <type>function</type>
        <docblock line="270">
          <description><![CDATA[Removes all references to a node from the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="270" name="param" description="The node to remove. If the node is on the branch in multiple places, each reference is removed." type="\GoTableaux\Proof\TableauNode" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
          <tag line="270" name="return" description="Current instance." type="\GoTableaux\Proof\TableauBranch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
        </docblock>
        <argument line="277">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>TableauNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="290" package="">
        <name>createNode</name>
        <type>function</type>
        <docblock line="283">
          <description><![CDATA[Creates a node on the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="283" name="param" description="The node class(es) to instantiate." type="string|array" variable="$classes">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="283" name="param" description="The properties of the node." type="array" variable="$properties">
            <type by_reference="false">array</type>
          </tag>
          <tag line="283" name="return" description="Current instance." type="\GoTableaux\Proof\TableauBranch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
        </docblock>
        <argument line="290">
          <name>$classes</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="290">
          <name>$properties</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Proof/TableauNode/Access.php" hash="a0d10d4f75aeb210d9ee222294428737" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Tableau">\GoTableaux\Exception\Tableau</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Proof\TableauNode" line="30" package="GoTableaux">
      <name>Access</name>
      <full_name>\GoTableaux\Proof\TableauNode\Access</full_name>
      <extends>\GoTableaux\Proof\TableauNode\Modal</extends>
      <docblock line="26">
        <description><![CDATA[Represents a modal logic access relation node.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="26" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="36" package="Default">
        <name>$metaSymbolNames</name>
        <default><![CDATA[array( 'accessRelationSymbol' )]]></default>
        <docblock line="32">
          <description><![CDATA[Meta symbol names required by the node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="43" package="Default">
        <name>$j</name>
        <default><![CDATA[]]></default>
        <docblock line="38">
          <description><![CDATA[Holds a reference to the seen world index.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="38" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="52" package="">
        <name>setProperties</name>
        <type>function</type>
        <docblock line="45">
          <description><![CDATA[Sets the node properties.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="param" description="The properties." type="array" variable="$properties">
            <type by_reference="false">array</type>
          </tag>
          <tag line="45" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="45" name="throws" description="when no second index is given." type="\GoTableaux\Proof\TableauNode\TableauException">
            <type by_reference="false">\GoTableaux\Proof\TableauNode\TableauException</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$properties</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="72" package="">
        <name>filter</name>
        <type>function</type>
        <docblock line="60">
          <description><![CDATA[Determines whether the node passes the given conditions.]]></description>
          <long-description><![CDATA[<p>This is called, for example, when querying a branch for particular nodes.
Direct children should first check $this->node->filter(), and return
false if it does, otherwise continue with filtering. Further descendants
should likewise check parent::filter().</p>]]></long-description>
          <tag line="60" name="param" description="A hash of the conditions to pass." type="array" variable="$conditions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="60" name="return" description="Wether the node passes (i.e. is not ruled out by) the conditions." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="60" name="see" description="\GoTableaux\Proof\TableauNode\TableauBranch::find()" refers="\GoTableaux\Proof\TableauNode\TableauBranch::find()"/>
        </docblock>
        <argument line="72">
          <name>$conditions</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="84" package="">
        <name>setJ</name>
        <type>function</type>
        <docblock line="78">
          <description><![CDATA[Sets the second index.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="78" name="param" description="The second index." type="integer" variable="$j">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="78" name="return" description="Current instance." type="\GoTableaux\Proof\TableauNode\AccessNode">
            <type by_reference="false">\GoTableaux\Proof\TableauNode\AccessNode</type>
          </tag>
        </docblock>
        <argument line="84">
          <name>$j</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="94" package="">
        <name>getJ</name>
        <type>function</type>
        <docblock line="89">
          <description><![CDATA[Gets the second index.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="89" name="return" description="The second index." type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Proof/TableauNode/ManyValued.php" hash="e52826bf4a02e1f83cf45bba4cc2a192" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="TableauException">\GoTableaux\Exception\Tableau</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Proof\TableauNode" line="30" package="GoTableaux">
      <name>ManyValued</name>
      <full_name>\GoTableaux\Proof\TableauNode\ManyValued</full_name>
      <extends>\GoTableaux\Proof\TableauNode</extends>
      <docblock line="26">
        <description><![CDATA[Signifies a many-valued tableau node that has a designation marker.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="26" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="36" package="Default">
        <name>$metaSymbolNames</name>
        <default><![CDATA[array( 'designatedMarker', 'undesignatedMarker' )]]></default>
        <docblock line="32">
          <description><![CDATA[Meta symbol names required by the node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="42" package="Default">
        <name>$designated</name>
        <default><![CDATA[]]></default>
        <docblock line="38">
          <description><![CDATA[Holds the designation]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="50" package="">
        <name>setProperties</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[Sets the node properties.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="param" description="The properties." type="array" variable="$properties">
            <type by_reference="false">array</type>
          </tag>
          <tag line="44" name="throws" description="when no designation is given." type="\GoTableaux\Exception\Tableau">
            <type by_reference="false">\GoTableaux\Exception\Tableau</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$properties</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="70" package="">
        <name>filter</name>
        <type>function</type>
        <docblock line="58">
          <description><![CDATA[Determines whether the node passes the given conditions.]]></description>
          <long-description><![CDATA[<p>This is called, for example, when querying a branch for particular nodes.
Direct children should first check $this->node->filter(), and return
false if it does, otherwise continue with filtering. Further descendants
should likewise check parent::filter().</p>]]></long-description>
          <tag line="58" name="param" description="A hash of the conditions to pass." type="array" variable="$conditions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="58" name="return" description="Wether the node passes (i.e. is not ruled out by) the conditions." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="58" name="see" description="\GoTableaux\Proof\TableauNode\TableauBranch::find()" refers="\GoTableaux\Proof\TableauNode\TableauBranch::find()"/>
        </docblock>
        <argument line="70">
          <name>$conditions</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="81" package="">
        <name>isDesignated</name>
        <type>function</type>
        <docblock line="76">
          <description><![CDATA[Returns whether the node is designated.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="76" name="return" description="Whether the node is designated." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="92" package="">
        <name>setDesignation</name>
        <type>function</type>
        <docblock line="86">
          <description><![CDATA[Sets the designation of the node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="86" name="param" description="The designation." type="boolean" variable="$isDesignated">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="86" name="return" description="Current instance." type="\GoTableaux\Proof\TableauNode\ManyValued">
            <type by_reference="false">\GoTableaux\Proof\TableauNode\ManyValued</type>
          </tag>
        </docblock>
        <argument line="92">
          <name>$isDesignated</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Proof/TableauNode/Modal.php" hash="4073d5176c4b28a51afe2535a3701abc" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Proof\TableauNode" line="28" package="GoTableaux">
      <name>Modal</name>
      <full_name>\GoTableaux\Proof\TableauNode\Modal</full_name>
      <extends>\GoTableaux\Proof\TableauNode</extends>
      <docblock line="24">
        <description><![CDATA[Signifies a modal tableau node that has at least one index.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="34" package="Default">
        <name>$metaSymbolNames</name>
        <default><![CDATA[array( 'worldSymbol' )]]></default>
        <docblock line="30">
          <description><![CDATA[Meta symbol names required by the node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="40" package="Default">
        <name>$i</name>
        <default><![CDATA[]]></default>
        <docblock line="36">
          <description><![CDATA[Holds the (first) index.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="47" package="">
        <name>setProperties</name>
        <type>function</type>
        <docblock line="42">
          <description><![CDATA[Sets the node properties.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="param" description="The properties." type="array" variable="$properties">
            <type by_reference="false">array</type>
          </tag>
          <tag line="42" name="throws" description="when no sentence is given." type="\GoTableaux\Proof\TableauNode\TableauException">
            <type by_reference="false">\GoTableaux\Proof\TableauNode\TableauException</type>
          </tag>
        </docblock>
        <argument line="47">
          <name>$properties</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="67" package="">
        <name>filter</name>
        <type>function</type>
        <docblock line="55">
          <description><![CDATA[Determines whether the node passes the given conditions.]]></description>
          <long-description><![CDATA[<p>This is called, for example, when querying a branch for particular nodes.
Direct children should first check $this->node->filter(), and return
false if it does, otherwise continue with filtering. Further descendants
should likewise check parent::filter().</p>]]></long-description>
          <tag line="55" name="param" description="A hash of the conditions to pass." type="array" variable="$conditions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="55" name="return" description="Wether the node passes (i.e. is not ruled out by) the conditions." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="55" name="see" description="\GoTableaux\Proof\TableauNode\TableauBranch::find()" refers="\GoTableaux\Proof\TableauNode\TableauBranch::find()"/>
        </docblock>
        <argument line="67">
          <name>$conditions</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="78" package="">
        <name>getI</name>
        <type>function</type>
        <docblock line="73">
          <description><![CDATA[Returns the index, or the first index, of a modal node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="return" description="The index, or first index of the node." type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="89" package="">
        <name>setI</name>
        <type>function</type>
        <docblock line="83">
          <description><![CDATA[Sets the first index]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="83" name="param" description="The index." type="integer" variable="$i">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="83" name="return" description="Current instance." type="\GoTableaux\Proof\TableauNode\Modal">
            <type by_reference="false">\GoTableaux\Proof\TableauNode\Modal</type>
          </tag>
        </docblock>
        <argument line="89">
          <name>$i</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Proof/TableauNode/Sentence.php" hash="6597ddf34f6d5df35a30e218a0beb83b" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Sent">\GoTableaux\Sentence</namespace-alias>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="TableauException">\GoTableaux\Exception\Tableau</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Proof\TableauNode" line="32" package="GoTableaux">
      <name>Sentence</name>
      <full_name>\GoTableaux\Proof\TableauNode\Sentence</full_name>
      <extends>\GoTableaux\Proof\TableauNode</extends>
      <docblock line="28">
        <description><![CDATA[Represents a sentence tableau node.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="28" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="38" package="Default">
        <name>$sentence</name>
        <default><![CDATA[]]></default>
        <docblock line="34">
          <description><![CDATA[Holds a reference to the sentence on the node]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="var" description="" type="\GoTableaux\Proof\TableauNode\Sentence">
            <type by_reference="false">\GoTableaux\Proof\TableauNode\Sentence</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="45" package="">
        <name>setProperties</name>
        <type>function</type>
        <docblock line="40">
          <description><![CDATA[Sets the node properties.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="param" description="The properties." type="array" variable="$properties">
            <type by_reference="false">array</type>
          </tag>
          <tag line="40" name="throws" description="when no sentence is given." type="\GoTableaux\Exception\Tableau">
            <type by_reference="false">\GoTableaux\Exception\Tableau</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$properties</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="60" package="">
        <name>beforeAttach</name>
        <type>function</type>
        <docblock line="53">
          <description><![CDATA[Registers the node's sentence with the logic's vocabulary before the
node is attached to the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="53" name="param" description="The branch to which the node is to be attached." type="\GoTableaux\Proof\TableauBranch" variable="$branch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
          <tag line="53" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="60">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="83" package="">
        <name>filter</name>
        <type>function</type>
        <docblock line="71">
          <description><![CDATA[Determines whether the node passes the given conditions.]]></description>
          <long-description><![CDATA[<p>This is called, for example, when querying a branch for particular nodes.
Direct children should first check $this->node->filter(), and return
false if it does, otherwise continue with filtering. Further descendants
should likewise check parent::filter().</p>]]></long-description>
          <tag line="71" name="param" description="A hash of the conditions to pass." type="array" variable="$conditions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="71" name="return" description="Wether the node passes (i.e. is not ruled out by) the conditions." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="71" name="see" description="\GoTableaux\Proof\TableauNode\TableauBranch::find()" refers="\GoTableaux\Proof\TableauNode\TableauBranch::find()"/>
        </docblock>
        <argument line="83">
          <name>$conditions</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="101" package="">
        <name>setSentence</name>
        <type>function</type>
        <docblock line="95">
          <description><![CDATA[Sets the sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="95" name="param" description="The sentence to place on the node." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="95" name="return" description="Current instance." type="\GoTableaux\Proof\TableauNode\Sentence">
            <type by_reference="false">\GoTableaux\Proof\TableauNode\Sentence</type>
          </tag>
        </docblock>
        <argument line="101">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sent</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="111" package="">
        <name>getSentence</name>
        <type>function</type>
        <docblock line="106">
          <description><![CDATA[Gets the sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="106" name="return" description="The sentence on the node." type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Proof/TableauNode.php" hash="ebe61ac21164f9580c498ce69015c1f1" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Proof" line="28" package="GoTableaux">
      <name>TableauNode</name>
      <full_name>\GoTableaux\Proof\TableauNode</full_name>
      <extends/>
      <docblock line="24">
        <description><![CDATA[Represents a node on a branch.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="34" package="Default">
        <name>$metaSymbolNames</name>
        <default><![CDATA[array( 'tickMarker' )]]></default>
        <docblock line="30">
          <description><![CDATA[Meta proof symbol names required by the node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="40" package="Default">
        <name>$node</name>
        <default><![CDATA[]]></default>
        <docblock line="36">
          <description><![CDATA[The node for decorators.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="var" description="" type="\GoTableaux\Proof\TableauNode">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="52" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="42">
          <description><![CDATA[Constructor. Initializes decorator.]]></description>
          <long-description><![CDATA[<p>To build a node, first create an instance of TableauNode with empty
arguments, then successively add decorators, each time passing the newly
created node, along with the properties.</p>]]></long-description>
          <tag line="42" name="param" description="The node to decorate." type="\GoTableaux\Proof\TableauNode" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
          <tag line="42" name="param" description="The properties hash of the node." type="array" variable="$properties">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$node</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="52">
          <name>$properties</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="65" package="">
        <name>__call</name>
        <type>function</type>
        <docblock line="58">
          <description><![CDATA[Passes undeclared functions to decorated instance.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="param" description="The name of the method invoked." type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
          <tag line="58" name="param" description="The passed arguments." type="array" variable="$args">
            <type by_reference="false">array</type>
          </tag>
          <tag line="58" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$method</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="65">
          <name>$args</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="79" package="">
        <name>tickAtBranch</name>
        <type>function</type>
        <docblock line="72">
          <description><![CDATA[Ticks the node relative to a branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="72" name="param" description="The branch relative to which to tick the node." type="\GoTableaux\Proof\TableauBranch" variable="$branch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
          <tag line="72" name="return" description="Current instance." type="\GoTableaux\Proof\TableauNode">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="91" package="">
        <name>isTickedAtBranch</name>
        <type>function</type>
        <docblock line="85">
          <description><![CDATA[Checks whether the node is ticked relative to a particular branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="85" name="param" description="The branch relative to which to check." type="\GoTableaux\Proof\TableauBranch" variable="$branch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
          <tag line="85" name="return" description="Whether the node is ticked relative to $branch." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="91">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="101" package="">
        <name>getClasses</name>
        <type>function</type>
        <docblock line="96">
          <description><![CDATA[Gets all the classes of the node, including decorated classes.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="96" name="return" description="The classes of the node" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="115" package="">
        <name>hasClass</name>
        <type>function</type>
        <docblock line="109">
          <description><![CDATA[Determines wether the node or its decorated instance has a given class.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="109" name="param" description="The class to check." type="string" variable="$class">
            <type by_reference="false">string</type>
          </tag>
          <tag line="109" name="return" description="Whether the node or its instance has the class." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="115">
          <name>$class</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="134" package="">
        <name>filter</name>
        <type>function</type>
        <docblock line="122">
          <description><![CDATA[Determines whether the node passes the given conditions.]]></description>
          <long-description><![CDATA[<p>This is called, for example, when querying a branch for particular nodes.
Direct children should first check $this->node->filter(), and return
false if it does, otherwise continue with filtering. Further descendants
should likewise check parent::filter().</p>]]></long-description>
          <tag line="122" name="param" description="A hash of the conditions to pass." type="array" variable="$conditions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="122" name="return" description="Wether the node passes (i.e. is not ruled out by) the conditions." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="122" name="see" description="\GoTableaux\Proof\TableauBranch::find()" refers="\GoTableaux\Proof\TableauBranch::find()"/>
        </docblock>
        <argument line="134">
          <name>$conditions</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="147" package="">
        <name>beforeAttach</name>
        <type>function</type>
        <docblock line="139">
          <description><![CDATA[Called before the node is added to a branch.]]></description>
          <long-description><![CDATA[<p>Implementations should always call parent::beforeAttach().</p>]]></long-description>
          <tag line="139" name="param" description="The branch that the node is to be added to." type="\GoTableaux\Proof\TableauBranch" variable="$branch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
          <tag line="139" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="147">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="161" package="">
        <name>setProperties</name>
        <type>function</type>
        <docblock line="152">
          <description><![CDATA[Called during construct for decorators.]]></description>
          <long-description><![CDATA[<p>Direct children should always call $this->node->setProperties(),
and further descendants should call parent::setProperties().</p>]]></long-description>
          <tag line="152" name="param" description="A hash of properties to set." type="array" variable="$properties">
            <type by_reference="false">array</type>
          </tag>
          <tag line="152" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="161">
          <name>$properties</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="GoTableaux\Proof" line="172" package="">
        <name>setNode</name>
        <type>function</type>
        <docblock line="166">
          <description><![CDATA[Sets the decorated node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="166" name="param" description="The node to decorate." type="\GoTableaux\Proof\TableauNode" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
          <tag line="166" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="172">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>TableauNode</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Proof/TableauStructure.php" hash="9a051252325042b35193bc1c68deef43" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <critical line="41" code="50019">No short description for property $tableau</critical>
      <critical line="47" code="50019">No short description for property $nodes</critical>
      <critical line="53" code="50019">No short description for property $tickedNodes</critical>
      <critical line="59" code="50019">No short description for property $structures</critical>
      <critical line="65" code="50019">No short description for property $closed</critical>
      <error line="84" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $node in findBranchesWithNode()</error>
      <error line="162" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $node in nodeIsTicked()</error>
    </parse_markers>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <namespace-alias name="Exception">\GoTableaux\Exception\Tableau</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Proof" line="39" package="GoTableaux">
      <name>TableauStructure</name>
      <full_name>\GoTableaux\Proof\TableauStructure</full_name>
      <extends/>
      <docblock line="27">
        <description><![CDATA[Represents the proper 'tree' structure of a tableau.]]></description>
        <long-description><![CDATA[<p>This is a simple composition structure class which takes a {@link Tableau}
object and creates a tree structure from its branches. Thinking of a branch
as a tuple of nodes, a single node can appear on more than one branch. This
is helpful in applying rules. This class collapses common nodes into one
structure. A structure comprises an array of {@link Node} objects, and an
array of self-similar Structure objects.</p>]]></long-description>
        <tag line="27" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="45" package="Default">
        <name>$tableau</name>
        <default><![CDATA[]]></default>
        <docblock line="41">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="41" name="var" description="" type="\GoTableaux\Proof\Tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="41" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="51" package="Default">
        <name>$nodes</name>
        <default><![CDATA[array()]]></default>
        <docblock line="47">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="var" description="Array of {@link Node} objects." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="47" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="57" package="Default">
        <name>$tickedNodes</name>
        <default><![CDATA[array()]]></default>
        <docblock line="53">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="53" name="var" description="Array of {@link Node} objects." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="53" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="63" package="Default">
        <name>$structures</name>
        <default><![CDATA[array()]]></default>
        <docblock line="59">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="var" description="Array of self-similar objects." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="59" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="69" package="Default">
        <name>$closed</name>
        <default><![CDATA[false]]></default>
        <docblock line="65">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="65" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux\Proof" line="77" package="">
        <name>getInstance</name>
        <type>function</type>
        <docblock line="71">
          <description><![CDATA[Creates an instance from a tableau.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="71" name="param" description="The tableau whose structure to represent." type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="71" name="return" description="New instance." type="\GoTableaux\Proof\Structure">
            <type by_reference="false">\GoTableaux\Proof\Structure</type>
          </tag>
        </docblock>
        <argument line="77">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="GoTableaux\Proof" line="91" package="">
        <name>findBranchesWithNode</name>
        <type>function</type>
        <docblock line="84">
          <description><![CDATA[Gets all branches that have a particular node on them.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="84" name="param" description="Array of {@link Branch}es to search." type="array" variable="$branches">
            <type by_reference="false">array</type>
          </tag>
          <tag line="84" name="param" description="The node to search for." type="\GoTableaux\Proof\Node" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\Node</type>
          </tag>
          <tag line="84" name="return" description="Array of branches." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="91">
          <name>$branches</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="91">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>TableauNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="GoTableaux\Proof" line="102" package="">
        <name>findNodesCommonToBranches</name>
        <type>function</type>
        <docblock line="96">
          <description><![CDATA[Gets all nodes that are on each of an array of branches.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="96" name="param" description="Array of {@link Branch}es." type="array" variable="$branches">
            <type by_reference="false">array</type>
          </tag>
          <tag line="96" name="return" description="Array of common {@link Node}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$branches</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="124" package="">
        <name>setTableau</name>
        <type>function</type>
        <docblock line="118">
          <description><![CDATA[Sets the tableau to represent.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="118" name="param" description="The tableau whose structure to represent." type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="118" name="return" description="Current instance." type="\GoTableaux\Proof\Structure">
            <type by_reference="false">\GoTableaux\Proof\Structure</type>
          </tag>
        </docblock>
        <argument line="124">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="135" package="">
        <name>build</name>
        <type>function</type>
        <docblock line="130">
          <description><![CDATA[Builds the tree structure.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="130" name="return" description="Current instance." type="\GoTableaux\Proof\Structure">
            <type by_reference="false">\GoTableaux\Proof\Structure</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="147" package="">
        <name>getNodes</name>
        <type>function</type>
        <docblock line="142">
          <description><![CDATA[Gets the nodes of the current structure.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="142" name="return" description="Array of {@link Node}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="157" package="">
        <name>getStructures</name>
        <type>function</type>
        <docblock line="152">
          <description><![CDATA[Gets the child structures of the current structure.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="152" name="return" description="Array of {@link Structure}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="168" package="">
        <name>nodeIsTicked</name>
        <type>function</type>
        <docblock line="162">
          <description><![CDATA[Checks whether a node is ticked relative to the current structure.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="162" name="param" description="The node to check." type="\GoTableaux\Proof\Node" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\Node</type>
          </tag>
          <tag line="162" name="return" description="Whether the node is ticked." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="168">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>TableauNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="178" package="">
        <name>isClosed</name>
        <type>function</type>
        <docblock line="173">
          <description><![CDATA[Checks whether the structure is closed.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="173" name="return" description="Whether the structure is closed." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux\Proof" line="190" package="">
        <name>structurize</name>
        <type>function</type>
        <docblock line="183">
          <description><![CDATA[Recursive structurizing function.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="183" name="param" description="Array of {@link Branch}es to structurize." type="array" variable="$branches">
            <type by_reference="false">array</type>
          </tag>
          <tag line="183" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="183" name="access" description="private"/>
        </docblock>
        <argument line="190">
          <name>$branches</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Proof.php" hash="940fde2e589e6ab6c09f03376e7635d4" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="true" namespace="GoTableaux" line="29" package="GoTableaux">
      <name>Proof</name>
      <full_name>\GoTableaux\Proof</full_name>
      <extends/>
      <docblock line="24">
        <description><![CDATA[Represents a proof.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="36" package="Default">
        <name>$argument</name>
        <default><![CDATA[]]></default>
        <docblock line="31">
          <description><![CDATA[Reference to the argument for the proof.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="var" description="" type="\GoTableaux\Argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="31" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="43" package="Default">
        <name>$proofSystem</name>
        <default><![CDATA[]]></default>
        <docblock line="38">
          <description><![CDATA[Reference to the proof system.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="" type="\GoTableaux\ProofSystem">
            <type by_reference="false">\GoTableaux\ProofSystem</type>
          </tag>
          <tag line="38" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="49" package="Default">
        <name>$metaSymbolNames</name>
        <default><![CDATA[array()]]></default>
        <docblock line="45">
          <description><![CDATA[Meta proof symbol names.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="57" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="51">
          <description><![CDATA[Constructor. Initializes argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="param" description="Argument for the proof." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="51" name="param" description="The proof system of the proof." type="\GoTableaux\ProofSystem" variable="$proofSystem">
            <type by_reference="false">\GoTableaux\ProofSystem</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
        <argument line="57">
          <name>$proofSystem</name>
          <default><![CDATA[]]></default>
          <type>ProofSystem</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="68" package="">
        <name>getMetaSymbolNames</name>
        <type>function</type>
        <docblock line="63">
          <description><![CDATA[Gets the meta symbols names.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="return" description="The meta symbol names." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="79" package="">
        <name>addMetaSymbolNames</name>
        <type>function</type>
        <docblock line="73">
          <description><![CDATA[Adds meta symbol names.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="param" description="The meta symbol name(s)." type="string|array" variable="$names">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="73" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$names</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="89" package="">
        <name>getArgument</name>
        <type>function</type>
        <docblock line="84">
          <description><![CDATA[Gets the Argument object.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="84" name="return" description="The argument." type="\GoTableaux\Argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="99" package="">
        <name>getProofSystem</name>
        <type>function</type>
        <docblock line="94">
          <description><![CDATA[Gets the ProofSystem object.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="94" name="return" description="The proof's proof system." type="\GoTableaux\ProofSystem">
            <type by_reference="false">\GoTableaux\ProofSystem</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="109" package="">
        <name>isValid</name>
        <type>function</type>
        <docblock line="104">
          <description><![CDATA[Checks whether the proof is valid]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="104" name="return" description="Whether the proof is valid." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ProofSystem/TableauxSystem/Modal/Bivalent.php" hash="8f18904a00e2b1202da4097e128810ce" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="35" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $tableau in buildTrunk()</error>
      <error line="57" code="50010">No DocBlock was found for method induceModel()</error>
    </parse_markers>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Argument">\GoTableaux\Argument</namespace-alias>
    <namespace-alias name="Tableau">\GoTableaux\Proof\Tableau</namespace-alias>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\ProofSystem\TableauxSystem\Modal" line="33" package="GoTableaux">
      <name>Bivalent</name>
      <full_name>\GoTableaux\ProofSystem\TableauxSystem\Modal\Bivalent</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Modal</extends>
      <docblock line="29">
        <description><![CDATA[Represents a tableaux system for a bivalent modal logic.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="29" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Modal" line="43" package="">
        <name>buildTrunk</name>
        <type>function</type>
        <docblock line="35">
          <description><![CDATA[Builds a bivalent modal tableau trunk.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="param" description="The modal tableau." type="\GoTableaux\ProofSystem\TableauxSystem\Modal\ModalTableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem\Modal\ModalTableau</type>
          </tag>
          <tag line="35" name="param" description="The argument." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="35" name="param" description="The logic of the proof system." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="35" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="43">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
        <argument line="43">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
        <argument line="43">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Modal" line="57" package="">
        <name>induceModel</name>
        <type>function</type>
        <argument line="57">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofSystem/TableauxSystem/Modal/ManyValued.php" hash="ca54f1dca3e83feda2c13ff825cd6b79" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="35" code="50010">No DocBlock was found for method buildTrunk()</error>
      <error line="51" code="50010">No DocBlock was found for method induceModel()</error>
    </parse_markers>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Argument">\GoTableaux\Argument</namespace-alias>
    <namespace-alias name="Tableau">\GoTableaux\Proof\Tableau</namespace-alias>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\ProofSystem\TableauxSystem\Modal" line="33" package="GoTableaux">
      <name>ManyValued</name>
      <full_name>\GoTableaux\ProofSystem\TableauxSystem\Modal\ManyValued</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Modal</extends>
      <docblock line="29">
        <description><![CDATA[Represents a tableaux system for a many-valued modal logic.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="29" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Modal" line="35" package="">
        <name>buildTrunk</name>
        <type>function</type>
        <argument line="35">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
        <argument line="35">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
        <argument line="35">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Modal" line="51" package="">
        <name>induceModel</name>
        <type>function</type>
        <argument line="51">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofSystem/TableauxSystem/Rule/Branch.php" hash="adfbfa8614f77c15fc66d6500cfe2757" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <notice line="49" code="50013">Parameter $logic could not be found in apply()</notice>
    </parse_markers>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Tableau">\GoTableaux\Proof\Tableau</namespace-alias>
    <namespace-alias name="TableauBranch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <class final="false" abstract="true" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="32" package="GoTableaux">
      <name>Branch</name>
      <full_name>\GoTableaux\ProofSystem\TableauxSystem\Rule\Branch</full_name>
      <extends/>
      <implements>\GoTableaux\ProofSystem\TableauxSystem\Rule</implements>
      <docblock line="28">
        <description><![CDATA[Represents a tableau rule that applies to a branch.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="28" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="42" package="">
        <name>applies</name>
        <type>function</type>
        <docblock line="34">
          <description><![CDATA[Determines whether the rule can apply to the tableau.]]></description>
          <long-description><![CDATA[<p>A branch rule can apply to a tableau when it can apply to an open branch.</p>]]></long-description>
          <tag line="34" name="param" description="The tableau to check." type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="34" name="return" description="Whether the rule can apply." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="58" package="">
        <name>apply</name>
        <type>function</type>
        <docblock line="49">
          <description><![CDATA[Applies the rule to a tableau.]]></description>
          <long-description><![CDATA[<p>A branch rule applies to the first open branch.</p>]]></long-description>
          <tag line="49" name="param" description="The tableau to which to apply the rule." type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="49" name="param" description="The logic." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="49" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="58">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="75" package="">
        <name>appliesToBranch</name>
        <type>function</type>
        <docblock line="68">
          <description><![CDATA[Determines whether a rule can apply to a branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="68" name="param" description="The branch to check." type="\GoTableaux\Proof\TableauBranch" variable="$branch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
          <tag line="68" name="param" description="The logic of the proof system." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="68" name="return" description="Whether the rule can apply." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
        <argument line="75">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="84" package="">
        <name>applyToBranch</name>
        <type>function</type>
        <docblock line="77">
          <description><![CDATA[Applies the rule to an open branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="77" name="param" description="The open branch." type="\GoTableaux\Proof\TableauBranch" variable="$branch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
          <tag line="77" name="param" description="The logic of the proof system." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="77" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="84">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
        <argument line="84">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofSystem/TableauxSystem/Rule/Closure.php" hash="d206f5411ca55596d304e8bf568c0252" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="TableauBranch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <class final="false" abstract="true" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="31" package="GoTableaux">
      <name>Closure</name>
      <full_name>\GoTableaux\ProofSystem\TableauxSystem\Rule\Closure</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Branch</extends>
      <docblock line="27">
        <description><![CDATA[Represents a tableau closure rule.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="GoTableaux"/>
      </docblock>
      <method final="true" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="40" package="">
        <name>applyToBranch</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Closes the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="param" description="The open branch." type="\GoTableaux\Proof\TableauBranch" variable="$branch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
          <tag line="33" name="param" description="The logic of the proof system." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="33" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
        <argument line="40">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofSystem/TableauxSystem/Rule/Node.php" hash="8462fd5477aefcd4eac67ba5aaea9da2" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <markers>
      <todo line="99">Finish function</todo>
    </markers>
    <parse_markers>
      <error line="56" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $branch in applyToBranch()</error>
      <error line="96" code="50010">No DocBlock was found for method getExampleNode()</error>
      <error line="103" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $branch in applyToNode()</error>
    </parse_markers>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="TableauBranch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="TableauNode">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="TableauException">\GoTableaux\Exception\Tableau</namespace-alias>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <class final="false" abstract="true" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="34" package="GoTableaux">
      <name>Node</name>
      <full_name>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Branch</extends>
      <docblock line="30">
        <description><![CDATA[Implements the transitivity rule for a modal tableaux system.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="30" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="40" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array()]]></default>
        <docblock line="36">
          <description><![CDATA[Gives conditions for matching a single node to which the rule applies.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="param" description="array" type="" variable=""/>
        </docblock>
      </property>
      <method final="true" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="51" package="">
        <name>appliesToBranch</name>
        <type>function</type>
        <docblock line="42">
          <description><![CDATA[Determines whether a rule can apply to a branch.]]></description>
          <long-description><![CDATA[<p>A node rule can apply to a branch when it can apply to a node.</p>]]></long-description>
          <tag line="42" name="param" description="The branch to check." type="\GoTableaux\Proof\TableauBranch" variable="$branch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
          <tag line="42" name="param" description="The logic of the proof system." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="42" name="return" description="Whether the rule can apply." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
        <argument line="51">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="true" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="66" package="">
        <name>applyToBranch</name>
        <type>function</type>
        <docblock line="56">
          <description><![CDATA[Looks for a node on the branch that meets $this->conditions, and passes
it to applyToNode().]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="param" description="The branch." type="\GoTableaux\ProofSystem\TableauxSystem\Rule\Branch" variable="$branch">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem\Rule\Branch</type>
          </tag>
          <tag line="56" name="param" description="The logic." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="56" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="56" name="throws" description="if there is no node on the branch to which the rule applies." type="\GoTableaux\Exception\Tableau">
            <type by_reference="false">\GoTableaux\Exception\Tableau</type>
          </tag>
        </docblock>
        <argument line="66">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
        <argument line="66">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="81" package="">
        <name>getName</name>
        <type>function</type>
        <docblock line="76">
          <description><![CDATA[Gets the base name of the rule.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="76" name="return" description="The base name of the rule, e.g. NegatedConjunctionDesignated." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="91" package="">
        <name>getConditions</name>
        <type>function</type>
        <docblock line="86">
          <description><![CDATA[Gets the conditions. Forces unticked.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="86" name="return" description="The conditions." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="96" package="">
        <name>getExampleNode</name>
        <type>function</type>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="111" package="">
        <name>applyToNode</name>
        <type>function</type>
        <docblock line="103">
          <description><![CDATA[Applies the changes to a branch for an unticked node that meets $this->conditions.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="103" name="param" description="The node to apply the changes." type="\GoTableaux\Proof\TableauNode" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
          <tag line="103" name="param" description="The branch for which the rule is applying." type="\GoTableaux\ProofSystem\TableauxSystem\Rule\Branch" variable="$branch">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem\Rule\Branch</type>
          </tag>
          <tag line="103" name="param" description="The logic of the proof system." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="103" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="111">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>TableauNode</type>
        </argument>
        <argument line="111">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
        <argument line="111">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofSystem/TableauxSystem/Rule.php" hash="daa9dba331cd7939aa7a15b8cbb30181" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Tableau">\GoTableaux\Proof\Tableau</namespace-alias>
    <interface namespace="GoTableaux\ProofSystem\TableauxSystem" line="31" package="GoTableaux">
      <name>Rule</name>
      <full_name>\GoTableaux\ProofSystem\TableauxSystem\Rule</full_name>
      <extends/>
      <docblock line="27">
        <description><![CDATA[Represents a tableau rule that applies to a branch.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem" line="39" package="">
        <name>applies</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Determines whether the rule can apply to the tableau.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="param" description="The tableau to check." type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="33" name="return" description="Whether the rule can apply." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem" line="47" package="">
        <name>apply</name>
        <type>function</type>
        <docblock line="41">
          <description><![CDATA[Applies the rule to a tableau.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="41" name="param" description="The tableau to which to apply the rule." type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="41" name="return" description="Whether the rule did apply." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="47">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="ProofSystem/TableauxSystem.php" hash="9d3ede2247ba21ff2e05bd0d49d10f69" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="70" code="50014">Name of argument $filterClass does not match with the DocBlock's name $class in getRules()</error>
      <notice line="70" code="50013">Parameter $class could not be found in getRules()</notice>
      <error line="140" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $tableau in isValidProof()</error>
    </parse_markers>
    <namespace-alias name="Settings">\GoTableaux\Settings</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Argument">\GoTableaux\Argument</namespace-alias>
    <namespace-alias name="Proof">\GoTableaux\Proof</namespace-alias>
    <namespace-alias name="Tableau">\GoTableaux\Proof\Tableau</namespace-alias>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="TableauException">\GoTableaux\Exception\Tableau</namespace-alias>
    <namespace-alias name="Rule">\GoTableaux\ProofSystem\TableauxSystem\Rule</namespace-alias>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <class final="false" abstract="true" namespace="GoTableaux\ProofSystem" line="38" package="GoTableaux">
      <name>TableauxSystem</name>
      <full_name>\GoTableaux\ProofSystem\TableauxSystem</full_name>
      <extends>\GoTableaux\ProofSystem</extends>
      <docblock line="34">
        <description><![CDATA[Represents a tableaux proof system.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="34" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="44" package="Default">
        <name>$ruleClasses</name>
        <default><![CDATA[array()]]></default>
        <docblock line="40">
          <description><![CDATA[Defines the rule class names for the logic.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="50" package="Default">
        <name>$_rules</name>
        <default><![CDATA[array()]]></default>
        <docblock line="46">
          <description><![CDATA[Holds the tableau rules.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="var" description="" type="\GoTableaux\ProofSystem\array.">
            <type by_reference="false">\GoTableaux\ProofSystem\array.</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux\ProofSystem" line="58" package="">
        <name>addRules</name>
        <type>function</type>
        <docblock line="52">
          <description><![CDATA[Adds tableau rules. Duplicate entries are ignored.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="param" description="The rule(s) to add." type="\GoTableaux\ProofSystem\TableauxSystem\Rule|array" variable="$rules">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem\Rule</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="52" name="return" description="Current Instance." type="\GoTableaux\ProofSystem\TableauxSystem">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem</type>
          </tag>
        </docblock>
        <argument line="58">
          <name>$rules</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem" line="77" package="">
        <name>getRules</name>
        <type>function</type>
        <docblock line="70">
          <description><![CDATA[Gets the tableau rules.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="70" name="param" description="The class of the rules to get." type="string" variable="$class">
            <type by_reference="false">string</type>
          </tag>
          <tag line="70" name="return" description="Array of {@link Rule}s." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="70" name="throws" description="" type="\GoTableaux\ProofSystem\"/>
        </docblock>
        <argument line="77">
          <name>$filterClass</name>
          <default><![CDATA['']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem" line="109" package="">
        <name>ruleCanApply</name>
        <type>function</type>
        <docblock line="103">
          <description><![CDATA[Determines whether at least one rule can apply to a tableau.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="103" name="param" description="The tableau to check." type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="103" name="return" description="Whether at least one rule can apply." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="109">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem" line="122" package="">
        <name>constructProofForArgument</name>
        <type>function</type>
        <docblock line="116">
          <description><![CDATA[Constructs a proof for an argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="116" name="param" description="The argument." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="116" name="return" description="The tableau proof." type="\GoTableaux\Proof\Tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
        </docblock>
        <argument line="122">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem" line="147" package="">
        <name>isValidProof</name>
        <type>function</type>
        <docblock line="140">
          <description><![CDATA[Checks whether a Tableau is a valid proof.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="140" name="param" description="The tableau whose validity to check." type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="140" name="return" description="Whether the tableau is a valid proof." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="140" name="throws" description="ProofException} when $proof is of wrong type." type="\GoTableaux\ProofSystem\{@link">
            <type by_reference="false">\GoTableaux\ProofSystem\{@link</type>
          </tag>
        </docblock>
        <argument line="147">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem" line="162" package="">
        <name>getCountermodel</name>
        <type>function</type>
        <docblock line="152">
          <description><![CDATA[Gets a counterexample from a Tableau proof.]]></description>
          <long-description><![CDATA[<p>A counterexample for a tableaux system is a model induced from an open
branch.</p>]]></long-description>
          <tag line="152" name="param" description="The tableau from which to build the counterexample" type="\GoTableaux\Proof" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="152" name="return" description="The countermodel extracted from the proof." type="\GoTableaux\ProofSystem\Model">
            <type by_reference="false">\GoTableaux\ProofSystem\Model</type>
          </tag>
          <tag line="152" name="throws" description="TableauException} on no open branches or type error." type="\GoTableaux\ProofSystem\{@link">
            <type by_reference="false">\GoTableaux\ProofSystem\{@link</type>
          </tag>
        </docblock>
        <argument line="162">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux\ProofSystem" line="187" package="">
        <name>buildTrunk</name>
        <type>function</type>
        <docblock line="179">
          <description><![CDATA[Constructs the initial list (trunk) for an argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="179" name="param" description="The tableau to attach the" type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="179" name="param" description="The argument for which to build the trunk." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="179" name="param" description="The logic of the proof system." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="179" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="187">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
        <argument line="187">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
        <argument line="187">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofSystem.php" hash="591dc0f64247f8d2ec85e92f8a1a65bf" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="true" namespace="GoTableaux" line="28" package="GoTableaux">
      <name>ProofSystem</name>
      <full_name>\GoTableaux\ProofSystem</full_name>
      <extends/>
      <docblock line="24">
        <description><![CDATA[Represents a proof system.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="35" package="Default">
        <name>$logic</name>
        <default><![CDATA[]]></default>
        <docblock line="30">
          <description><![CDATA[Holds a reference to the logic instance.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="\GoTableaux\Logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="30" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="42" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="37">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="param" description="The logic for the proof system to use." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="54" package="">
        <name>getLogic</name>
        <type>function</type>
        <docblock line="47">
          <description><![CDATA[Gets the logic instance.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="return" description="The logic instance." type="\GoTableaux\Logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="47" name="throws" description="ProofException} on empty logic." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
          <tag line="47" name="see" description="\GoTableaux\Logic::__construct()" refers="\GoTableaux\Logic::__construct()"/>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux" line="65" package="">
        <name>constructProofForArgument</name>
        <type>function</type>
        <docblock line="59">
          <description><![CDATA[Constructs a proof for an argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="param" description="The argument for which to construct the proof." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="59" name="return" description="$proof The constructed proof object." type="\GoTableaux\Proof">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux" line="74" package="">
        <name>isValidProof</name>
        <type>function</type>
        <docblock line="67">
          <description><![CDATA[Checks whether a putative proof is valid.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="67" name="param" description="The proof whose validity to check." type="\GoTableaux\Proof" variable="$proof">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="67" name="return" description="Whether the proof is valid." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="67" name="throws" description="ProofException} on type errors." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
        </docblock>
        <argument line="74">
          <name>$proof</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux" line="88" package="">
        <name>getCountermodel</name>
        <type>function</type>
        <docblock line="81">
          <description><![CDATA[Gets a counterexample from a proof.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="81" name="param" description="The (putative) proof from which to get a counterexample." type="\GoTableaux\Proof" variable="$proof">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="81" name="return" description="The countermodel built from the proof." type="\GoTableaux\Model">
            <type by_reference="false">\GoTableaux\Model</type>
          </tag>
          <tag line="81" name="throws" description="ProofException} on type errors." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
        </docblock>
        <argument line="88">
          <name>$proof</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofWriter/Tableau/JSON.php" hash="db6bfe3cbbe11e64efa39ee6f1ff6c78" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Structure">\GoTableaux\Proof\TableauStructure</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\ProofWriter\Tableau" line="30" package="GoTableaux">
      <name>JSON</name>
      <full_name>\GoTableaux\ProofWriter\Tableau\JSON</full_name>
      <extends>\GoTableaux\ProofWriter\Tableau</extends>
      <docblock line="26">
        <description><![CDATA[Represents a JSON tableau proof writer.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="26" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter\Tableau" line="38" package="">
        <name>writeStructure</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[Makes a string representation of a tableau structure.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="param" description="The tableau structure to represent." type="\GoTableaux\Proof\TableauStructure" variable="$structure">
            <type by_reference="false">\GoTableaux\Proof\TableauStructure</type>
          </tag>
          <tag line="32" name="return" description="The string representation of the structure." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="38">
          <name>$structure</name>
          <default><![CDATA[]]></default>
          <type>Structure</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofWriter/Tableau/LaTeX_Qtree.php" hash="9acbe2b602f370fe21747f7c0fd9ea64" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="33" code="50018">No DocBlock was found for property $translations</error>
      <error line="42" code="50018">No DocBlock was found for property $tableauxCommands</error>
      <error line="51" code="50010">No DocBlock was found for method writeWorldIndex()</error>
      <error line="129" code="50010">No DocBlock was found for method formatCommand()</error>
    </parse_markers>
    <namespace-alias name="Proof">\GoTableaux\Proof</namespace-alias>
    <namespace-alias name="Structure">\GoTableaux\Proof\TableauStructure</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\ProofWriter\Tableau" line="31" package="GoTableaux">
      <name>LaTeX_Qtree</name>
      <full_name>\GoTableaux\ProofWriter\Tableau\LaTeX_Qtree</full_name>
      <extends>\GoTableaux\ProofWriter\Tableau</extends>
      <docblock line="27">
        <description><![CDATA[Writes tableaux using the LaTeX Qtree package.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="33" package="Default">
        <name>$translations</name>
        <default><![CDATA[array(
		'closeMarker' 			=> '\GTcloseMarker',
		'designatedMarker' 		=> '\GTdesignatedMarker',
		'undesignatedMarker' 	=> '\GTundesignatedMarker',
		'worldSymbol' 			=> '\GTworldSymbol',
		'accessRelationSymbol' 	=> '\GTaccessRelationSymbol',
		'tickMarker'			=> '\GTtickMarker',
	)]]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="42" package="Default">
        <name>$tableauxCommands</name>
        <default><![CDATA[array(
		'closeMarker' 			=> '\times',
		'designatedMarker' 		=> '+',
		'undesignatedMarker' 	=> '-',
		'worldSymbol' 			=> 'w',
		'accessRelationSymbol' 	=> '\mathcal{R}',
		'tickMarker'			=> '\bullet',
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter\Tableau" line="51" package="">
        <name>writeWorldIndex</name>
        <type>function</type>
        <argument line="51">
          <name>$index</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter\Tableau" line="65" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="56">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[<p>Decorates the sentence writer with the LaTeX decorator; sets default
LaTeX translations, and removes the tickMarker translation.</p>]]></long-description>
          <tag line="56" name="param" description="The with which to initialize the writer." type="\GoTableaux\Proof" variable="$proof">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="56" name="param" description="The sentence notation type to use." type="string" variable="$sentenceWriterType">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$proof</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
        <argument line="65">
          <name>$sentenceWriterType</name>
          <default><![CDATA['Standard']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter\Tableau" line="79" package="">
        <name>writeProof</name>
        <type>function</type>
        <docblock line="73">
          <description><![CDATA[Makes a string representation of a proof.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="param" description="The proof to represent." type="\GoTableaux\Proof" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="73" name="return" description="The string representation." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter\Tableau" line="101" package="">
        <name>writeStructure</name>
        <type>function</type>
        <docblock line="95">
          <description><![CDATA[Makes a string representation of a tableau structure.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="95" name="param" description="The tableau structure to represent." type="\GoTableaux\Proof\TableauStructure" variable="$structure">
            <type by_reference="false">\GoTableaux\Proof\TableauStructure</type>
          </tag>
          <tag line="95" name="return" description="The string representation of the structure." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="101">
          <name>$structure</name>
          <default><![CDATA[]]></default>
          <type>Structure</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter\Tableau" line="124" package="">
        <name>writeProofBody</name>
        <type>function</type>
        <docblock line="118">
          <description><![CDATA[Writes the body of the proof.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="118" name="param" description="The proof whose body to write." type="\GoTableaux\Proof" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="118" name="return" description="The string representation." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="124">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter\Tableau" line="129" package="">
        <name>formatCommand</name>
        <type>function</type>
        <argument line="129">
          <name>$command</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofWriter/Tableau/Simple.php" hash="36c79a6072823709dcd4516ea847106a" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Structure">\GoTableaux\Proof\TableauStructure</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\ProofWriter\Tableau" line="30" package="GoTableaux">
      <name>Simple</name>
      <full_name>\GoTableaux\ProofWriter\Tableau\Simple</full_name>
      <extends>\GoTableaux\ProofWriter\Tableau</extends>
      <docblock line="26">
        <description><![CDATA[Represents a simple tableau proof writer.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="26" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter\Tableau" line="38" package="">
        <name>writeStructure</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[Makes a string representation of a tableau structure.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="param" description="The tableau structure to represent." type="\GoTableaux\Proof\TableauStructure" variable="$structure">
            <type by_reference="false">\GoTableaux\Proof\TableauStructure</type>
          </tag>
          <tag line="32" name="return" description="The string representation of the structure." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="38">
          <name>$structure</name>
          <default><![CDATA[]]></default>
          <type>Structure</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofWriter/Tableau.php" hash="b950c4bd5e151726732386b177626136" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="49" code="50010">No DocBlock was found for method writeCloseMarker()</error>
      <error line="54" code="50010">No DocBlock was found for method writeDesignationMarker()</error>
      <error line="59" code="50010">No DocBlock was found for method writeTickMarker()</error>
      <error line="64" code="50010">No DocBlock was found for method writeWorldIndex()</error>
      <error line="95" code="50014">Name of argument $tableau does not match with the DocBlock's name $tableauOrStructure in getArray()</error>
      <notice line="95" code="50013">Parameter $tableauOrStructure could not be found in getArray()</notice>
      <notice line="95" code="50013">Parameter $logic could not be found in getArray()</notice>
      <error line="108" code="50010">No DocBlock was found for method writeProof()</error>
      <error line="175" code="50010">No DocBlock was found for method writeStructure()</error>
    </parse_markers>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Proof">\GoTableaux\Proof</namespace-alias>
    <namespace-alias name="SentenceWriter">\GoTableaux\SentenceWriter</namespace-alias>
    <namespace-alias name="TableauStructure">\GoTableaux\Proof\TableauStructure</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <class final="false" abstract="true" namespace="GoTableaux\ProofWriter" line="34" package="GoTableaux">
      <name>Tableau</name>
      <full_name>\GoTableaux\ProofWriter\Tableau</full_name>
      <extends>\GoTableaux\ProofWriter</extends>
      <docblock line="30">
        <description><![CDATA[Represents a tableaux writer.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="30" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="40" package="Default">
        <name>$translations</name>
        <default><![CDATA[array(
		'tickMarker'			=> '^',
		'closeMarker' 			=> '[><]',
		'designatedMarker' 		=> '+',
		'undesignatedMarker' 	=> '-',
		'worldSymbol' 			=> 'w',
		'accessRelationSymbol' 	=> 'R',
	)]]></default>
        <docblock line="36">
          <description><![CDATA[Translations for tableau-wide markings.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="49" package="">
        <name>writeCloseMarker</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="54" package="">
        <name>writeDesignationMarker</name>
        <type>function</type>
        <argument line="54">
          <name>$isDesignated</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="59" package="">
        <name>writeTickMarker</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="64" package="">
        <name>writeWorldIndex</name>
        <type>function</type>
        <argument line="64">
          <name>$index</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="77" package="">
        <name>writeNode</name>
        <type>function</type>
        <docblock line="69">
          <description><![CDATA[Writes a node based on its type.]]></description>
          <long-description><![CDATA[<p>Calls the appropriate functions based on the type of node.</p>]]></long-description>
          <tag line="69" name="param" description="The node to write." type="\GoTableaux\Proof\TableauNode" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
          <tag line="69" name="return" description="The string representation of the node." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="77">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="103" package="">
        <name>getArray</name>
        <type>function</type>
        <docblock line="95">
          <description><![CDATA[Gets a formatted data array of a tableau.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="95" name="param" description="Tableau or Structure object to get data from." type="\GoTableaux\Proof" variable="$tableauOrStructure">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="95" name="param" description="The logic, required if first parameter is a Structure." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="95" name="return" description="Formatted data array." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="103">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="108" package="">
        <name>writeProof</name>
        <type>function</type>
        <argument line="108">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="119" package="">
        <name>getClassesForNode</name>
        <type>function</type>
        <docblock line="113">
          <description><![CDATA[Gets type information about a node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="113" name="param" description="The node to examine." type="\GoTableaux\Proof\TableauNode" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
          <tag line="113" name="return" description="The classes to which the node belongs." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="119">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="140" package="">
        <name>getArrayForStructure</name>
        <type>function</type>
        <docblock line="133">
          <description><![CDATA[Creates an array structure with tree structure data for exporting.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="133" name="param" description="The tree structure to serialize." type="\GoTableaux\Proof\TableauStructure" variable="$structure">
            <type by_reference="false">\GoTableaux\Proof\TableauStructure</type>
          </tag>
          <tag line="133" name="param" description="" type="integer" variable="$n">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="133" name="return" description="The tree data." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="140">
          <name>$structure</name>
          <default><![CDATA[]]></default>
          <type>TableauStructure</type>
        </argument>
        <argument line="140">
          <name>$n</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="175" package="">
        <name>writeStructure</name>
        <type>function</type>
        <argument line="175">
          <name>$structure</name>
          <default><![CDATA[]]></default>
          <type>TableauStructure</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofWriter.php" hash="113911b160782e8f633eaf2b4daff16c" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <critical line="33" code="50019">No short description for property $translations</critical>
      <critical line="39" code="50019">No short description for property $sentenceWriter</critical>
      <critical line="45" code="50019">No short description for property $vocabulary</critical>
    </parse_markers>
    <namespace-alias name="WriterException">\GoTableaux\Exception\Writer</namespace-alias>
    <namespace-alias name="SentenceWriterDecorator">\GoTableaux\SentenceWriter\Decorator</namespace-alias>
    <class final="false" abstract="true" namespace="GoTableaux" line="31" package="GoTableaux">
      <name>ProofWriter</name>
      <full_name>\GoTableaux\ProofWriter</full_name>
      <extends/>
      <docblock line="27">
        <description><![CDATA[Writes proofs.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="37" package="Default">
        <name>$translations</name>
        <default><![CDATA[array()]]></default>
        <docblock line="33">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="43" package="Default">
        <name>$sentenceWriter</name>
        <default><![CDATA[]]></default>
        <docblock line="39">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="var" description="" type="\GoTableaux\SentenceWriter">
            <type by_reference="false">\GoTableaux\SentenceWriter</type>
          </tag>
          <tag line="39" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="48" package="Default">
        <name>$vocabulary</name>
        <default><![CDATA[]]></default>
        <docblock line="45">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="var" description="" type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="58" package="">
        <name>getInstance</name>
        <type>function</type>
        <docblock line="50">
          <description><![CDATA[Gets a child instance.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="param" description="The proof to write." type="\GoTableaux\Proof" variable="$proof">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="50" name="param" description="Proof writer type." type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="50" name="param" description="The type of sentence writer to use." type="string" variable="$sentenceWriterType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="50" name="return" description="Created instance." type="\GoTableaux\ProofWriter">
            <type by_reference="false">\GoTableaux\ProofWriter</type>
          </tag>
        </docblock>
        <argument line="58">
          <name>$proof</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
        <argument line="58">
          <name>$type</name>
          <default><![CDATA['Simple']]></default>
          <type/>
        </argument>
        <argument line="58">
          <name>$sentenceWriterType</name>
          <default><![CDATA['Standard']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="71" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="65">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="param" description="The proof to write." type="\GoTableaux\Proof" variable="$proof">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="65" name="param" description="The type of sentence writer to use." type="string" variable="$sentenceWriterType">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="71">
          <name>$proof</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
        <argument line="71">
          <name>$sentenceWriterType</name>
          <default><![CDATA['Standard']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="84" package="">
        <name>addTranslations</name>
        <type>function</type>
        <docblock line="77">
          <description><![CDATA[Adds translations.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="77" name="param" description="The translations to add, where key is to be translated into value." type="array" variable="$translations">
            <type by_reference="false">array</type>
          </tag>
          <tag line="77" name="return" description="Current instance." type="\GoTableaux\ProofWriter">
            <type by_reference="false">\GoTableaux\ProofWriter</type>
          </tag>
        </docblock>
        <argument line="84">
          <name>$translations</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="96" package="">
        <name>removeTranslation</name>
        <type>function</type>
        <docblock line="90">
          <description><![CDATA[Removes a translation.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="90" name="param" description="Name of the translation to remove." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="90" name="return" description="Current instance." type="\GoTableaux\ProofWriter">
            <type by_reference="false">\GoTableaux\ProofWriter</type>
          </tag>
        </docblock>
        <argument line="96">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="108" package="">
        <name>getTranslation</name>
        <type>function</type>
        <docblock line="102">
          <description><![CDATA[Gets a translation.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="102" name="param" description="Name of the translation." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="102" name="return" description="The translation." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="108">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="120" package="">
        <name>getSentenceWriter</name>
        <type>function</type>
        <docblock line="115">
          <description><![CDATA[Gets the sentence writer object.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="115" name="return" description="The sentence writer." type="\GoTableaux\SentenceWriter">
            <type by_reference="false">\GoTableaux\SentenceWriter</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="131" package="">
        <name>setSentenceWriter</name>
        <type>function</type>
        <docblock line="125">
          <description><![CDATA[Sets the sentence writer object.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="125" name="param" description="The sentence writer to set." type="\GoTableaux\SentenceWriter" variable="$sentenceWriter">
            <type by_reference="false">\GoTableaux\SentenceWriter</type>
          </tag>
          <tag line="125" name="return" description="Current instance." type="\GoTableaux\ProofWriter">
            <type by_reference="false">\GoTableaux\ProofWriter</type>
          </tag>
        </docblock>
        <argument line="131">
          <name>$sentenceWriter</name>
          <default><![CDATA[]]></default>
          <type>SentenceWriter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="143" package="">
        <name>decorateSentenceWriter</name>
        <type>function</type>
        <docblock line="137">
          <description><![CDATA[Decorates the sentence writer.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="137" name="param" description="Type of decorator." type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="137" name="return" description="Current instance." type="\GoTableaux\ProofWriter">
            <type by_reference="false">\GoTableaux\ProofWriter</type>
          </tag>
        </docblock>
        <argument line="143">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="156" package="">
        <name>writeSentence</name>
        <type>function</type>
        <docblock line="148">
          <description><![CDATA[Writes a sentence.]]></description>
          <long-description><![CDATA[<p>Delegates to sentence writer.</p>]]></long-description>
          <tag line="148" name="param" description="The sentence to write." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="148" name="return" description="The string representation of the sentence." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="156">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="169" package="">
        <name>writeArgumentOfProof</name>
        <type>function</type>
        <docblock line="161">
          <description><![CDATA[Writes a proof's argument.]]></description>
          <long-description><![CDATA[<p>Delegates to $this->sentenceWriter.</p>]]></long-description>
          <tag line="161" name="param" description="The proof whose argument to write." type="\GoTableaux\Proof" variable="$proof">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="161" name="return" description="The string for the argument." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="169">
          <name>$proof</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux" line="180" package="">
        <name>getArray</name>
        <type>function</type>
        <docblock line="174">
          <description><![CDATA[Gets a formatted data array of a proof.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="174" name="param" description="Proof to get data from." type="\GoTableaux\Proof" variable="$proof">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="174" name="return" description="Formatted data array." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="180">
          <name>$proof</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux" line="188" package="">
        <name>writeProof</name>
        <type>function</type>
        <docblock line="182">
          <description><![CDATA[Makes a string representation of a proof.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="182" name="param" description="The proof to represent." type="\GoTableaux\Proof" variable="$proof">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="182" name="return" description="The string representation." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="188">
          <name>$proof</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Sentence/Atomic.php" hash="4a035badae875894a954538ffa979ea1" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Sentence" line="28" package="GoTableaux">
      <name>Atomic</name>
      <full_name>\GoTableaux\Sentence\Atomic</full_name>
      <extends>\GoTableaux\Sentence</extends>
      <docblock line="24">
        <description><![CDATA[Represents an atomic sentence.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="35" package="Default">
        <name>$symbol</name>
        <default><![CDATA[]]></default>
        <docblock line="30">
          <description><![CDATA[Atomic symbol, e.g. 'A' or 'B'.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="30" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="42" package="Default">
        <name>$subscript</name>
        <default><![CDATA[]]></default>
        <docblock line="37">
          <description><![CDATA[Subscript of the atomic symbol.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="37" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Sentence" line="50" package="">
        <name>setSymbol</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[Sets the atomic symbol.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="param" description="The symbol, e.g. 'A' or 'B'." type="string" variable="$symbol">
            <type by_reference="false">string</type>
          </tag>
          <tag line="44" name="return" description="Current instance." type="\GoTableaux\Sentence\Atomic">
            <type by_reference="false">\GoTableaux\Sentence\Atomic</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$symbol</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Sentence" line="61" package="">
        <name>getSymbol</name>
        <type>function</type>
        <docblock line="56">
          <description><![CDATA[Gets the atomic symbol.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="return" description="The atomic symbol, e.g. 'A' or 'B'." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Sentence" line="72" package="">
        <name>setSubscript</name>
        <type>function</type>
        <docblock line="66">
          <description><![CDATA[Sets the subscript of the atomic symbol.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="66" name="param" description="The subscript." type="integer" variable="$subscript">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="66" name="return" description="Current instance." type="\GoTableaux\Sentence\Atomic">
            <type by_reference="false">\GoTableaux\Sentence\Atomic</type>
          </tag>
        </docblock>
        <argument line="72">
          <name>$subscript</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Sentence" line="83" package="">
        <name>getSubscript</name>
        <type>function</type>
        <docblock line="78">
          <description><![CDATA[Gets the subscript of the atomic symbol.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="78" name="return" description="The subscript." type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Sentence/Molecular.php" hash="2617a7a6bd388a6f081a50f779cf548a" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Exception">\GoTableaux\Exception\Vocabulary</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Sentence" line="29" package="GoTableaux">
      <name>Molecular</name>
      <full_name>\GoTableaux\Sentence\Molecular</full_name>
      <extends>\GoTableaux\Sentence</extends>
      <docblock line="25">
        <description><![CDATA[Represents a molecular sentence.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="25" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="36" package="Default">
        <name>$operator</name>
        <default><![CDATA[]]></default>
        <docblock line="31">
          <description><![CDATA[Holds an Operator instance.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="var" description="" type="\GoTableaux\Sentence\Operator">
            <type by_reference="false">\GoTableaux\Sentence\Operator</type>
          </tag>
          <tag line="31" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="43" package="Default">
        <name>$operands</name>
        <default><![CDATA[array()]]></default>
        <docblock line="38">
          <description><![CDATA[Holds the operands.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="Array of {@link Sentence} objects." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="38" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Sentence" line="51" package="">
        <name>setOperator</name>
        <type>function</type>
        <docblock line="45">
          <description><![CDATA[Sets the operator]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="param" description="The operator object of the sentence." type="\GoTableaux\Sentence\Operator" variable="$operator">
            <type by_reference="false">\GoTableaux\Sentence\Operator</type>
          </tag>
          <tag line="45" name="return" description="Current instance." type="\GoTableaux\Sentence\MolecularSentence">
            <type by_reference="false">\GoTableaux\Sentence\MolecularSentence</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type>Operator</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Sentence" line="63" package="">
        <name>addOperand</name>
        <type>function</type>
        <docblock line="57">
          <description><![CDATA[Adds an operand, or many operands.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="param" description="The operand(s) to add." type="\GoTableaux\Sentence\Sentence|array" variable="$operand">
            <type by_reference="false">\GoTableaux\Sentence\Sentence</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="57" name="return" description="Current instance." type="\GoTableaux\Sentence\MolecularSentence">
            <type by_reference="false">\GoTableaux\Sentence\MolecularSentence</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$operand</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux\Sentence" line="79" package="">
        <name>_addOperand</name>
        <type>function</type>
        <docblock line="72">
          <description><![CDATA[Adds an operand, with type forcing.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="72" name="param" description="" type="\GoTableaux\Sentence\Sentence" variable="$operand">
            <type by_reference="false">\GoTableaux\Sentence\Sentence</type>
          </tag>
          <tag line="72" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="72" name="access" description="private"/>
        </docblock>
        <argument line="79">
          <name>$operand</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Sentence" line="91" package="">
        <name>getOperator</name>
        <type>function</type>
        <docblock line="86">
          <description><![CDATA[Gets the Operator object.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="86" name="return" description="The sentence's operator." type="\GoTableaux\Sentence\Operator">
            <type by_reference="false">\GoTableaux\Sentence\Operator</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Sentence" line="102" package="">
        <name>setOperands</name>
        <type>function</type>
        <docblock line="96">
          <description><![CDATA[Sets the operands.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="96" name="param" description="Array of {@link Sentence}s." type="array" variable="$operands">
            <type by_reference="false">array</type>
          </tag>
          <tag line="96" name="return" description="Current isntace." type="\GoTableaux\Sentence\MolecularSentence">
            <type by_reference="false">\GoTableaux\Sentence\MolecularSentence</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$operands</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Sentence" line="114" package="">
        <name>getOperands</name>
        <type>function</type>
        <docblock line="109">
          <description><![CDATA[Gets the operands.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="109" name="return" description="The sentence's operands. An array of {@link Sentence} objects." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Sentence.php" hash="5ec5b5f8f54e8f4e2f8b5cd985f0897f" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="AtomicSentence">\GoTableaux\Sentence\Atomic</namespace-alias>
    <namespace-alias name="MolecularSentence">\GoTableaux\Sentence\Molecular</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux" line="31" package="GoTableaux">
      <name>Sentence</name>
      <full_name>\GoTableaux\Sentence</full_name>
      <extends/>
      <docblock line="27">
        <description><![CDATA[Represents a sentence.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="40" package="">
        <name>createAtomic</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Creates an atomic sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="param" description="The atomic symbol, e.g. 'A' or 'B'." type="string" variable="$symbol">
            <type by_reference="false">string</type>
          </tag>
          <tag line="33" name="param" description="The subscript. Default is 0." type="integer" variable="$subscript">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="33" name="return" description="The created instance." type="\GoTableaux\Sentence\Atomic">
            <type by_reference="false">\GoTableaux\Sentence\Atomic</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$symbol</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="40">
          <name>$subscript</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="53" package="">
        <name>createMolecular</name>
        <type>function</type>
        <docblock line="46">
          <description><![CDATA[Creates a molecular sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="param" description="Operator instance." type="\GoTableaux\Operator" variable="$operator">
            <type by_reference="false">\GoTableaux\Operator</type>
          </tag>
          <tag line="46" name="param" description="Array of Sentence objects." type="array" variable="$operands">
            <type by_reference="false">array</type>
          </tag>
          <tag line="46" name="return" description="The created instance." type="\GoTableaux\Sentence\Molecular">
            <type by_reference="false">\GoTableaux\Sentence\Molecular</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type>Operator</type>
        </argument>
        <argument line="53">
          <name>$operands</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="64" package="">
        <name>getOperatorName</name>
        <type>function</type>
        <docblock line="59">
          <description><![CDATA[Gets the operator name.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="return" description="The name of the operator, or null if atomic." type="string|null">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="77" package="">
        <name>sameForm</name>
        <type>function</type>
        <docblock line="70">
          <description><![CDATA[Compares two sentences for form and atomic symbol identity.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="70" name="param" description="The first sentence." type="\GoTableaux\Sentence" variable="$sentence_a">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="70" name="param" description="The second sentence." type="\GoTableaux\Sentence" variable="$sentence_b">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="70" name="return" description="Whether the sentences have the same form and atomic symbols." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="77">
          <name>$sentence_a</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
        <argument line="77">
          <name>$sentence_b</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="101" package="">
        <name>similarForm</name>
        <type>function</type>
        <docblock line="92">
          <description><![CDATA[Checks whether the form of the first sentence is consitent, if less
complex, than the first.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="92" name="param" description="A sentence with the basic form." type="\GoTableaux\Sentence" variable="$super">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="92" name="param" description="The sentence to examine whether it has a form consitent with $super." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="92" name="return" description="Whether the sentences have a similar form." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="101">
          <name>$super</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
        <argument line="101">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="118" package="">
        <name>sameFormInArray</name>
        <type>function</type>
        <docblock line="111">
          <description><![CDATA[Checks whether $haystack has a sentence with the same form as $needle.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="111" name="param" description="The sentence to check." type="\GoTableaux\Sentence" variable="$needle">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="111" name="param" description="Array of {@link Sentence}s to search." type="array" variable="$haystack">
            <type by_reference="false">array</type>
          </tag>
          <tag line="111" name="return" description="Whether a sentence with the same form is found." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="118">
          <name>$needle</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
        <argument line="118">
          <name>$haystack</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="SentenceParser/Polish.php" hash="021d6bf4000db244d03fe4de72ae3078" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="59" code="50018">No DocBlock was found for property $operandStack</error>
      <error line="61" code="50010">No DocBlock was found for method readRPN()</error>
    </parse_markers>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <namespace-alias name="ParserUtilities">\GoTableaux\Utilities\Parser</namespace-alias>
    <namespace-alias name="ParserException">\GoTableaux\Exception\Parser</namespace-alias>
    <namespace-alias name="Vocabulary">\GoTableaux\Vocabulary</namespace-alias>
    <namespace-alias name="Sentence">\GoTableaux\Sentence</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\SentenceParser" line="34" package="GoTableaux">
      <name>Polish</name>
      <full_name>\GoTableaux\SentenceParser\Polish</full_name>
      <extends>\GoTableaux\SentenceParser</extends>
      <docblock line="30">
        <description><![CDATA[Represents the standard sentence parser.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="30" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="59" package="Default">
        <name>$operandStack</name>
        <default><![CDATA[array()]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceParser" line="42" package="">
        <name>stringToSentence</name>
        <type>function</type>
        <docblock line="36">
          <description><![CDATA[Creates a {@link Sentence sentence} from a string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="param" description="The string to interpret." type="string" variable="$sentenceStr">
            <type by_reference="false">string</type>
          </tag>
          <tag line="36" name="return" description="The resulting instance." type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$sentenceStr</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="GoTableaux\SentenceParser" line="61" package="">
        <name>readRPN</name>
        <type>function</type>
        <argument line="61">
          <name>$input</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="SentenceParser/Standard.php" hash="74ec8d7319712820dc5b75cc63d9b2b4" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <namespace-alias name="ParserUtilities">\GoTableaux\Utilities\Parser</namespace-alias>
    <namespace-alias name="ParserException">\GoTableaux\Exception\Parser</namespace-alias>
    <namespace-alias name="Vocabulary">\GoTableaux\Vocabulary</namespace-alias>
    <namespace-alias name="Sentence">\GoTableaux\Sentence</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\SentenceParser" line="34" package="GoTableaux">
      <name>Standard</name>
      <full_name>\GoTableaux\SentenceParser\Standard</full_name>
      <extends>\GoTableaux\SentenceParser</extends>
      <docblock line="30">
        <description><![CDATA[Represents the standard sentence parser.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="30" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceParser" line="42" package="">
        <name>stringToSentence</name>
        <type>function</type>
        <docblock line="36">
          <description><![CDATA[Creates a {@link Sentence sentence} from a string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="param" description="The string to interpret." type="string" variable="$sentenceStr">
            <type by_reference="false">string</type>
          </tag>
          <tag line="36" name="return" description="The resulting instance." type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$sentenceStr</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="GoTableaux\SentenceParser" line="97" package="">
        <name>_readSentence</name>
        <type>function</type>
        <docblock line="89">
          <description><![CDATA[Reads a string for the first occurrence of a sentence expression.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="89" name="param" description="The string to read." type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="89" name="return" description="The first sentence string." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="89" name="throws" description="ParserException} on parse error." type="\GoTableaux\SentenceParser\{@link">
            <type by_reference="false">\GoTableaux\SentenceParser\{@link</type>
          </tag>
          <tag line="89" name="access" description="private"/>
        </docblock>
        <argument line="97">
          <name>$string</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="SentenceParser.php" hash="9409ba0e9d5dc11720be7d67a47c55f5" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="ParserException">\GoTableaux\Exception\Parser</namespace-alias>
    <class final="false" abstract="true" namespace="GoTableaux" line="30" package="GoTableaux">
      <name>SentenceParser</name>
      <full_name>\GoTableaux\SentenceParser</full_name>
      <extends/>
      <docblock line="26">
        <description><![CDATA[Represents a sentence parser.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="26" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="37" package="Default">
        <name>$vocabulary</name>
        <default><![CDATA[]]></default>
        <docblock line="32">
          <description><![CDATA[Holds the vocabulary.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="" type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
          <tag line="32" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="45" package="">
        <name>getInstance</name>
        <type>function</type>
        <docblock line="39">
          <description><![CDATA[Creates a child instance.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="param" description="The vocabulary for the parser to use." type="\GoTableaux\Vocabulary" variable="$vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
          <tag line="39" name="param" description="The type of parser to create." type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$vocabulary</name>
          <default><![CDATA[]]></default>
          <type>Vocabulary</type>
        </argument>
        <argument line="45">
          <name>$type</name>
          <default><![CDATA['Standard']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="56" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="51">
          <description><![CDATA[Constructor. Sets the vocabulary.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="param" description="The vocabulary for the parser to use." type="\GoTableaux\Vocabulary" variable="$vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
        </docblock>
        <argument line="56">
          <name>$vocabulary</name>
          <default><![CDATA[]]></default>
          <type>Vocabulary</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="66" package="">
        <name>getVocabulary</name>
        <type>function</type>
        <docblock line="61">
          <description><![CDATA[Gets the vocabulary.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="61" name="return" description="The vocabulary that the parser is using." type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux" line="84" package="">
        <name>parseAtomic</name>
        <type>function</type>
        <docblock line="71">
          <description><![CDATA[Parses an atomic sentence from a string that starts with an atomic symbol.]]></description>
          <long-description><![CDATA[<p>This is the default implementation for parsing an atomic sentence from a
string that starts with an atomic symbol. This implementation expects
the next symbol to be either a separator (space) character, or a
subscript character followed by an integer. If a subscript is not given,
it will be assigned 0.</p>]]></long-description>
          <tag line="71" name="param" description="The string to parse." type="string" variable="$sentenceStr">
            <type by_reference="false">string</type>
          </tag>
          <tag line="71" name="return" description="The resulting sentence instance." type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="71" name="throws" description="ParserException}." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
        </docblock>
        <argument line="84">
          <name>$sentenceStr</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux" line="110" package="">
        <name>stringToSentence</name>
        <type>function</type>
        <docblock line="103">
          <description><![CDATA[Creates a {@link Sentence sentence} instance from a string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="103" name="param" description="The string to interpret." type="string" variable="$sentenceStr">
            <type by_reference="false">string</type>
          </tag>
          <tag line="103" name="return" description="The resulting instance." type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="103" name="throws" description="ParserException} on any errors in parsing the input string." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
        </docblock>
        <argument line="110">
          <name>$sentenceStr</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="SentenceWriter/Polish/LaTeXDecorator.php" hash="b218a2dff83762733c3987cf7b6841e1" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $sentenceWriter</error>
      <error line="32" code="50018">No DocBlock was found for property $operatorTranslations</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\SentenceWriter\Polish" line="28" package="GoTableaux">
      <name>LaTeXDecorator</name>
      <full_name>\GoTableaux\SentenceWriter\Polish\LaTeXDecorator</full_name>
      <extends>\GoTableaux\SentenceWriter\Standard\LaTeXDecorator</extends>
      <docblock line="24">
        <description><![CDATA[Sets default operator translations for Polish notation.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="30" package="Default">
        <name>$sentenceWriter</name>
        <default><![CDATA[]]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="32" package="Default">
        <name>$operatorTranslations</name>
        <default><![CDATA[array(
		'Conjunction' => '\mathsf{K}',
		'Disjunction' => '\mathsf{A}',
		'Negation'	  => '\mathsf{N}',
		'Material Conditional' 		=> '\mathsf{C}',
		'Material Biconditional' 	=> '\mathsf{E}',
		'Conditional' => '\mathsf{V}',
	)]]></default>
      </property>
    </class>
  </file>
  <file path="SentenceWriter/Polish.php" hash="ac6e6f76606995fe67a406dda5dcc5bb" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="32" code="50018">No DocBlock was found for property $operatorTranslations</error>
      <error line="40" code="50010">No DocBlock was found for method writeAtomicSymbol()</error>
    </parse_markers>
    <namespace-alias name="MolecularSentence">\GoTableaux\Sentence\Molecular</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\SentenceWriter" line="30" package="GoTableaux">
      <name>Polish</name>
      <full_name>\GoTableaux\SentenceWriter\Polish</full_name>
      <extends>\GoTableaux\SentenceWriter</extends>
      <docblock line="26">
        <description><![CDATA[Writes sentences in Polish notation.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="26" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="32" package="Default">
        <name>$operatorTranslations</name>
        <default><![CDATA[array(
		'Conjunction' => 'K',
		'Disjunction' => 'A',
		'Negation'	  => 'N',
		'Material Conditional' 		=> 'M',
		'Material Biconditional' 	=> 'Q',
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceWriter" line="40" package="">
        <name>writeAtomicSymbol</name>
        <type>function</type>
        <argument line="40">
          <name>$symbol</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceWriter" line="51" package="">
        <name>writeMolecular</name>
        <type>function</type>
        <docblock line="45">
          <description><![CDATA[Makes a string representation of a molecular sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="param" description="The molecular sentence to represent." type="\GoTableaux\Sentence\Molecular" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence\Molecular</type>
          </tag>
          <tag line="45" name="return" description="The string representation of the sentence." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>MolecularSentence</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="SentenceWriter/Standard/HTML.php" hash="26d7efd5621fe983fd5ac13b7d93f8b4" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="36" code="50018">No DocBlock was found for property $operatorTranslations</error>
      <error line="45" code="50010">No DocBlock was found for method writeSubscript()</error>
    </parse_markers>
    <namespace-alias name="Vocabulary">\GoTableaux\Vocabulary</namespace-alias>
    <namespace-alias name="Sentence">\GoTableaux\Sentence</namespace-alias>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <namespace-alias name="AtomicSentence">\GoTableaux\Sentence\Atomic</namespace-alias>
    <namespace-alias name="MolecularSentence">\GoTableaux\Sentence\Molecular</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\SentenceWriter\Standard" line="34" package="GoTableaux">
      <name>HTML</name>
      <full_name>\GoTableaux\SentenceWriter\Standard\HTML</full_name>
      <extends>\GoTableaux\SentenceWriter\Standard</extends>
      <docblock line="30">
        <description><![CDATA[Decorates a sentence writer for HTML.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="30" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="36" package="Default">
        <name>$operatorTranslations</name>
        <default><![CDATA[array(
		'Conjunction' => '&amp;',
		'Disjunction' => 'v',
		'Negation'	  => '~',
		'Material Conditional' 	=> '\supset',
		'Material Biconditional' => '\equiv',
		'Conditional' => '\rightarrow',
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceWriter\Standard" line="45" package="">
        <name>writeSubscript</name>
        <type>function</type>
        <argument line="45">
          <name>$subscript</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="SentenceWriter/Standard/LaTeXDecorator.php" hash="0c859c4655b9f70a05106dea8e9b204d" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="36" code="50018">No DocBlock was found for property $sentenceWriter</error>
      <error line="39" code="50018">No DocBlock was found for property $operatorTranslations</error>
      <error line="41" code="50018">No DocBlock was found for property $standardOperatorSymbols</error>
      <error line="63" code="50010">No DocBlock was found for method writeSubscript()</error>
      <error line="68" code="50010">No DocBlock was found for method writeOperator()</error>
      <error line="74" code="50010">No DocBlock was found for method getOperatorSymbolCommands()</error>
      <error line="79" code="50010">No DocBlock was found for method formatCommand()</error>
    </parse_markers>
    <namespace-alias name="Vocabulary">\GoTableaux\Vocabulary</namespace-alias>
    <namespace-alias name="Sentence">\GoTableaux\Sentence</namespace-alias>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <namespace-alias name="AtomicSentence">\GoTableaux\Sentence\Atomic</namespace-alias>
    <namespace-alias name="MolecularSentence">\GoTableaux\Sentence\Molecular</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\SentenceWriter\Standard" line="34" package="GoTableaux">
      <name>LaTeXDecorator</name>
      <full_name>\GoTableaux\SentenceWriter\Standard\LaTeXDecorator</full_name>
      <extends>\GoTableaux\SentenceWriter\Standard</extends>
      <docblock line="30">
        <description><![CDATA[Decorates a sentence writer for LaTeX.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="30" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="36" package="Default">
        <name>$sentenceWriter</name>
        <default><![CDATA[]]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="39" package="Default">
        <name>$operatorTranslations</name>
        <default><![CDATA[array()]]></default>
      </property>
      <property final="false" static="false" visibility="private" line="41" package="Default">
        <name>$standardOperatorSymbols</name>
        <default><![CDATA[array(
		'Conjunction' => '\wedge',
		'Disjunction' => '\vee',
		'Negation'	  => '\neg ',
		'Material Conditional' 	=> '\supset',
		'Material Biconditional' => '\equiv',
		'Conditional' => '\rightarrow',
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux\SentenceWriter\Standard" line="55" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="50">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="param" description="The vocabulary." type="\GoTableaux\Vocabulary" variable="$vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
        </docblock>
        <argument line="55">
          <name>$vocabulary</name>
          <default><![CDATA[]]></default>
          <type>Vocabulary</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceWriter\Standard" line="63" package="">
        <name>writeSubscript</name>
        <type>function</type>
        <argument line="63">
          <name>$subscript</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceWriter\Standard" line="68" package="">
        <name>writeOperator</name>
        <type>function</type>
        <argument line="68">
          <name>$operatorOrName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceWriter\Standard" line="74" package="">
        <name>getOperatorSymbolCommands</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceWriter\Standard" line="79" package="">
        <name>formatCommand</name>
        <type>function</type>
        <argument line="79">
          <name>$command</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="SentenceWriter/Standard.php" hash="3bb01b107055fe74813c1485ad31c78b" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="WriterException">\GoTableaux\Exception\Writer</namespace-alias>
    <namespace-alias name="MolecularSentence">\GoTableaux\Sentence\Molecular</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\SentenceWriter" line="31" package="GoTableaux">
      <name>Standard</name>
      <full_name>\GoTableaux\SentenceWriter\Standard</full_name>
      <extends>\GoTableaux\SentenceWriter</extends>
      <docblock line="27">
        <description><![CDATA[Writes sentences in standard notation.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceWriter" line="39" package="">
        <name>writeMolecular</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Makes a string representation of a molecular sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="param" description="The molecular sentence to represent." type="\GoTableaux\Sentence\Molecular" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence\Molecular</type>
          </tag>
          <tag line="33" name="return" description="The string representation of the sentence." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>MolecularSentence</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="SentenceWriter.php" hash="295b4ec93033a719beeb8141e355eba3" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="317" code="50015">Argument $sentence is missing from the Docblock of _writeSentence()</error>
    </parse_markers>
    <namespace-alias name="ParserUtilities">\GoTableaux\Utilities\Parser</namespace-alias>
    <namespace-alias name="AtomicSentence">\GoTableaux\Sentence\Atomic</namespace-alias>
    <namespace-alias name="MolecularSentence">\GoTableaux\Sentence\Molecular</namespace-alias>
    <class final="false" abstract="true" namespace="GoTableaux" line="32" package="GoTableaux">
      <name>SentenceWriter</name>
      <full_name>\GoTableaux\SentenceWriter</full_name>
      <extends/>
      <docblock line="28">
        <description><![CDATA[Writes sentences.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="28" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="38" package="Default">
        <name>$operatorTranslations</name>
        <default><![CDATA[array()]]></default>
        <docblock line="34">
          <description><![CDATA[Defines the standard operator translations, if any.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="44" package="Default">
        <name>$operatorStrings</name>
        <default><![CDATA[array()]]></default>
        <docblock line="40">
          <description><![CDATA[Holds the operator strings.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="51" package="Default">
        <name>$options</name>
        <default><![CDATA[array( 
		'printZeroSubscripts' => false,
		'dropOuterParentheses' => true,
	)]]></default>
        <docblock line="46">
          <description><![CDATA[Holds the options.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="46" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="61" package="Default">
        <name>$vocabulary</name>
        <default><![CDATA[]]></default>
        <docblock line="56">
          <description><![CDATA[Holds the vocabulary]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="var" description="" type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
          <tag line="56" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="70" package="">
        <name>getInstance</name>
        <type>function</type>
        <docblock line="63">
          <description><![CDATA[Creates a child instance.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="param" description="The vocabulary for the writer to use." type="\GoTableaux\Vocabulary" variable="$vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
          <tag line="63" name="param" description="Type of writer to instantiate, default is 'Standard'." type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="63" name="return" description="New instance." type="\GoTableaux\SentenceWriter">
            <type by_reference="false">\GoTableaux\SentenceWriter</type>
          </tag>
        </docblock>
        <argument line="70">
          <name>$vocabulary</name>
          <default><![CDATA[]]></default>
          <type>Vocabulary</type>
        </argument>
        <argument line="70">
          <name>$type</name>
          <default><![CDATA['Standard']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="82" package="">
        <name>getDecoratorInstance</name>
        <type>function</type>
        <docblock line="76">
          <description><![CDATA[Gets a decorator instance of a given type for a sentence writer.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="76" name="param" description="The sentence writer for the instance to decorate." type="\GoTableaux\SentenceWriter" variable="$sentenceWriter">
            <type by_reference="false">\GoTableaux\SentenceWriter</type>
          </tag>
          <tag line="76" name="param" description="The decorator type to instantiate." type="string" variable="$decoratorType">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="82">
          <name>$sentenceWriter</name>
          <default><![CDATA[]]></default>
          <type>SentenceWriter</type>
        </argument>
        <argument line="82">
          <name>$decoratorType</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux" line="101" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="94">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[<p>Sets the vocabulary.</p>]]></long-description>
          <tag line="94" name="param" description="The vocabulary for the writer to use." type="\GoTableaux\Vocabulary" variable="$vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
        </docblock>
        <argument line="101">
          <name>$vocabulary</name>
          <default><![CDATA[]]></default>
          <type>Vocabulary</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="111" package="">
        <name>getVocabulary</name>
        <type>function</type>
        <docblock line="106">
          <description><![CDATA[Gets the vocabulary.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="106" name="return" description="The writer's vocabulary." type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="122" package="">
        <name>setVocabulary</name>
        <type>function</type>
        <docblock line="116">
          <description><![CDATA[Sets the vocabulary.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="116" name="param" description="" type="\GoTableaux\Vocabulary" variable="$vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
          <tag line="116" name="return" description="Current instance." type="\GoTableaux\SentenceWriter">
            <type by_reference="false">\GoTableaux\SentenceWriter</type>
          </tag>
        </docblock>
        <argument line="122">
          <name>$vocabulary</name>
          <default><![CDATA[]]></default>
          <type>Vocabulary</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="133" package="">
        <name>getOption</name>
        <type>function</type>
        <docblock line="127">
          <description><![CDATA[Gets the value of a single option.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="127" name="param" description="The name of the option to get." type="string" variable="$option">
            <type by_reference="false">string</type>
          </tag>
          <tag line="127" name="return" description="The value of the option." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="133">
          <name>$option</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="143" package="">
        <name>getOptions</name>
        <type>function</type>
        <docblock line="138">
          <description><![CDATA[Gets all the options.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="138" name="return" description="The options. Key is option name, value is option value." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="155" package="">
        <name>setOption</name>
        <type>function</type>
        <docblock line="148">
          <description><![CDATA[Sets an option.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="148" name="param" description="The option to set." type="string" variable="$option">
            <type by_reference="false">string</type>
          </tag>
          <tag line="148" name="param" description="The value of the option to set." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="148" name="return" description="Current instance." type="\GoTableaux\SentenceWriter">
            <type by_reference="false">\GoTableaux\SentenceWriter</type>
          </tag>
        </docblock>
        <argument line="155">
          <name>$option</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="155">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="167" package="">
        <name>setOptions</name>
        <type>function</type>
        <docblock line="160">
          <description><![CDATA[Sets many options.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="160" name="param" description="Array of options to set. Key is option name, value is option value." type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="160" name="return" description="Current instance." type="\GoTableaux\SentenceWriter">
            <type by_reference="false">\GoTableaux\SentenceWriter</type>
          </tag>
        </docblock>
        <argument line="167">
          <name>$options</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="179" package="">
        <name>getOperatorString</name>
        <type>function</type>
        <docblock line="173">
          <description><![CDATA[Gets the string for an operator by its name.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="173" name="param" description="The name of the operator." type="string" variable="$operatorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="173" name="return" description="The string for the operator." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="179">
          <name>$operatorName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="195" package="">
        <name>setOperatorStrings</name>
        <type>function</type>
        <docblock line="189">
          <description><![CDATA[Sets the strings to use for some operators.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="189" name="param" description="Key is operator name, value is string." type="array" variable="$strings">
            <type by_reference="false">array</type>
          </tag>
          <tag line="189" name="return" description="Current instance." type="\GoTableaux\SentenceWriter">
            <type by_reference="false">\GoTableaux\SentenceWriter</type>
          </tag>
        </docblock>
        <argument line="195">
          <name>$strings</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="207" package="">
        <name>writeOperator</name>
        <type>function</type>
        <docblock line="201">
          <description><![CDATA[Writes an operator.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="201" name="param" description="Operator object or name of operator." type="\GoTableaux\Operator|string" variable="$operatorOrName">
            <type by_reference="false">\GoTableaux\Operator</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="201" name="return" description="String representation of the operator." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="207">
          <name>$operatorOrName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="219" package="">
        <name>writeSubscript</name>
        <type>function</type>
        <docblock line="213">
          <description><![CDATA[Writes a subscript index.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="213" name="param" description="The subscript index to write." type="integer" variable="$subscript">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="213" name="return" description="The string representation of the subscript index." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="219">
          <name>$subscript</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="231" package="">
        <name>writeAtomicSymbol</name>
        <type>function</type>
        <docblock line="225">
          <description><![CDATA[Writes an atomic symbol.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="225" name="param" description="The atomic symbol to write." type="string" variable="$symbol">
            <type by_reference="false">string</type>
          </tag>
          <tag line="225" name="return" description="The representation of the atomic symbol." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="231">
          <name>$symbol</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="242" package="">
        <name>writeAtomic</name>
        <type>function</type>
        <docblock line="236">
          <description><![CDATA[Writes an atomic sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="236" name="param" description="The atomic sentence to represent." type="\GoTableaux\Sentence\Atomic" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence\Atomic</type>
          </tag>
          <tag line="236" name="return" description="The string representation of the atomic sentence." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="242">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>AtomicSentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="257" package="">
        <name>writeSentence</name>
        <type>function</type>
        <docblock line="251">
          <description><![CDATA[Makes a string representation of a sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="251" name="param" description="The sentence to write." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="251" name="return" description="The string representation of the sentence." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="257">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="273" package="">
        <name>writeSentences</name>
        <type>function</type>
        <docblock line="267">
          <description><![CDATA[Makes an array of string representations of {@link Sentence}s.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="267" name="param" description="The sentences to write." type="array" variable="$sentences">
            <type by_reference="false">array</type>
          </tag>
          <tag line="267" name="return" description="An array of string representations of the sentences." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="273">
          <name>$sentences</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="287" package="">
        <name>getArgumentArray</name>
        <type>function</type>
        <docblock line="281">
          <description><![CDATA[Makes a formatted Argument array.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="281" name="param" description="The argument to format." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="281" name="return" description="Formatted argument array." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="287">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="301" package="">
        <name>writeArgument</name>
        <type>function</type>
        <docblock line="295">
          <description><![CDATA[Makes a string representation of an argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="295" name="param" description="The argument to write." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="295" name="return" description="The string representation of the argument." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="301">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux" line="315" package="">
        <name>writeMolecular</name>
        <type>function</type>
        <docblock line="309">
          <description><![CDATA[Makes a string representation of a molecular sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="309" name="param" description="The sentence to write." type="\GoTableaux\Sentence\Molecular" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence\Molecular</type>
          </tag>
          <tag line="309" name="return" description="The string representation of the sentence." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="315">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>MolecularSentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux" line="320" package="">
        <name>_writeSentence</name>
        <type>function</type>
        <docblock line="317">
          <description><![CDATA[Recursive function for writing sentences.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="320">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Settings.php" hash="b9a5870cbe69aa3072dc977b847bcaae" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux" line="33" package="GoTableaux">
      <name>Settings</name>
      <full_name>\GoTableaux\Settings</full_name>
      <extends/>
      <docblock line="29">
        <description><![CDATA[Stores the settings.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="29" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="40" package="Default">
        <name>$settings</name>
        <default><![CDATA[]]></default>
        <docblock line="35">
          <description><![CDATA[Holds the settings.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="35" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="48" package="">
        <name>read</name>
        <type>function</type>
        <docblock line="42">
          <description><![CDATA[Reads a setting.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="param" description="The setting to read." type="string" variable="$setting">
            <type by_reference="false">string</type>
          </tag>
          <tag line="42" name="return" description="The setting's value, or null if not set." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="48">
          <name>$setting</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="62" package="">
        <name>write</name>
        <type>function</type>
        <docblock line="55">
          <description><![CDATA[Writes a setting.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="55" name="param" description="The setting to write." type="string" variable="$setting">
            <type by_reference="false">string</type>
          </tag>
          <tag line="55" name="param" description="The value to write." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="55" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="62">
          <name>$setting</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="62">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Utilities/Parser.php" hash="9107544ef2b550be93f7b4d98af07e39" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Exception">\GoTableaux\Exception\Parser</namespace-alias>
    <namespace-alias name="Vocabulary">\GoTableaux\Vocabulary</namespace-alias>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Utilities" line="32" package="GoTableaux">
      <name>Parser</name>
      <full_name>\GoTableaux\Utilities\Parser</full_name>
      <extends/>
      <docblock line="28">
        <description><![CDATA[Collects utilities for sentence parsers.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="28" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux\Utilities" line="41" package="">
        <name>trimSeparators</name>
        <type>function</type>
        <docblock line="34">
          <description><![CDATA[Trims separator (whitespace) characters from beginning and end of a string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="param" description="The string to trim." type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="34" name="param" description="The vocabulary whose separators to trim." type="\GoTableaux\Vocabulary" variable="$vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
          <tag line="34" name="return" description="The trimmed string." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$string</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="41">
          <name>$vocabulary</name>
          <default><![CDATA[]]></default>
          <type>Vocabulary</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux\Utilities" line="53" package="">
        <name>removeSeparators</name>
        <type>function</type>
        <docblock line="46">
          <description><![CDATA[Removes separator (whitespace) characters from a string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="param" description="The string to replace." type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="46" name="param" description="The vocabulary whose separators to remove." type="\GoTableaux\Vocabulary" variable="$vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
          <tag line="46" name="return" description="The string with all separators removed." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$string</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="53">
          <name>$vocabulary</name>
          <default><![CDATA[]]></default>
          <type>Vocabulary</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux\Utilities" line="65" package="">
        <name>dropOuterParens</name>
        <type>function</type>
        <docblock line="58">
          <description><![CDATA[Drops outer parentheses from a string, if they exist.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="param" description="The string to be parsed." type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="58" name="param" description="The vocabulary to use." type="\GoTableaux\Vocabulary" variable="$vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
          <tag line="58" name="return" description="The resulting string." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$string</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="65">
          <name>$vocabulary</name>
          <default><![CDATA[]]></default>
          <type>Vocabulary</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux\Utilities" line="84" package="">
        <name>removeAllParens</name>
        <type>function</type>
        <docblock line="77">
          <description><![CDATA[Removes all parentheses from a string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="77" name="param" description="The string from which to remove parentheses." type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="77" name="param" description="The vocabulary to use." type="\GoTableaux\Vocabulary" variable="$vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
          <tag line="77" name="return" description="The string with parentheses removed." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="84">
          <name>$string</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="84">
          <name>$vocabulary</name>
          <default><![CDATA[]]></default>
          <type>Vocabulary</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux\Utilities" line="97" package="">
        <name>addOuterParens</name>
        <type>function</type>
        <docblock line="90">
          <description><![CDATA[Adds outer parentheses to a string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="90" name="param" description="The string to be added to." type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="90" name="param" description="The vocabulary to use." type="\GoTableaux\Vocabulary" variable="$vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
          <tag line="90" name="return" description="The resulting string." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="97">
          <name>$string</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="97">
          <name>$vocabulary</name>
          <default><![CDATA[]]></default>
          <type>Vocabulary</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux\Utilities" line="114" package="">
        <name>closePosFromOpenPos</name>
        <type>function</type>
        <docblock line="104">
          <description><![CDATA[Finds a string's for the corresponding close mark of an open mark at the
given position.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="104" name="param" description="The string to scan." type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="104" name="param" description="String position of open mark." type="integer" variable="$openPos">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="104" name="param" description="The vocabulary to use." type="\GoTableaux\Vocabulary" variable="$vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
          <tag line="104" name="return" description="The position of the corresponding close mark." type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="104" name="throws" description="Exception\Parser} on parsing error." type="\GoTableaux\Utilities\{@link">
            <type by_reference="false">\GoTableaux\Utilities\{@link</type>
          </tag>
        </docblock>
        <argument line="114">
          <name>$string</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="114">
          <name>$openPos</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="114">
          <name>$vocabulary</name>
          <default><![CDATA[]]></default>
          <type>Vocabulary</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="GoTableaux\Utilities" line="146" package="">
        <name>grabParenGroup</name>
        <type>function</type>
        <docblock line="133">
          <description><![CDATA[Parses first complete parenthesized group in a string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="133" name="param" description="The string to be parsed. Must contain at least one parenthesized group." type="string" variable="$str">
            <type by_reference="false">string</type>
          </tag>
          <tag line="133" name="param" description="The vocabulary to use." type="\GoTableaux\Vocabulary" variable="$vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
          <tag line="133" name="param" description="Whether to include the outer parentheses in the returned string. Default is false." type="boolean" variable="$includeOuter">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="133" name="param" description="String offset at which to start searching." type="integer" variable="$offset">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="133" name="return" description="Everything inside the first parenthesized group. Includes outer parentheses if $includeOuter is set to true." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="133" name="throws" description="Exception\Parser} on no parentheses in string, or parsing error." type="\GoTableaux\Utilities\{@link">
            <type by_reference="false">\GoTableaux\Utilities\{@link</type>
          </tag>
        </docblock>
        <argument line="146">
          <name>$str</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="146">
          <name>$vocabulary</name>
          <default><![CDATA[]]></default>
          <type>Vocabulary</type>
        </argument>
        <argument line="146">
          <name>$includeOuter</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
        <argument line="146">
          <name>$offset</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Utilities.php" hash="bd449dbaa434c3a0cb57aed355dd3965" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <notice line="83" code="50013">Parameter $arr,... could not be found in arraysAreIdentical()</notice>
      <notice line="150" code="50013">Parameter $var,... could not be found in debug()</notice>
      <notice line="174" code="50013">Parameter $var could not be found in debug()</notice>
    </parse_markers>
    <function namespace="GoTableaux" line="180" package="GoTableaux">
      <name>debug</name>
      <type>function</type>
      <docblock line="174">
        <description><![CDATA[Alias for Utilities::debug()]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="174" name="package" description="GoTableaux"/>
        <tag line="174" name="param" description="" type="mixed" variable="$var">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="174" name="return" description="" type="void">
          <type by_reference="false">void</type>
        </tag>
      </docblock>
    </function>
    <class final="false" abstract="false" namespace="GoTableaux" line="28" package="GoTableaux">
      <name>Utilities</name>
      <full_name>\GoTableaux\Utilities</full_name>
      <extends/>
      <docblock line="24">
        <description><![CDATA[Collects general PHP utilities.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="37" package="">
        <name>arrayRm</name>
        <type>function</type>
        <docblock line="30">
          <description><![CDATA[Removes an element from an array, if contained.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="param" description="The element to remove." type="mixed" variable="$element">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="30" name="param" description="The array from which to remove the element." type="array" variable="$array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="30" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="37">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="37">
          <name>$array</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="50" package="">
        <name>uniqueAdd</name>
        <type>function</type>
        <docblock line="43">
          <description><![CDATA[Adds an element to an array, if not already contained.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="param" description="The element to add." type="mixed" variable="$element">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="43" name="param" description="The array to which to add the element." type="array" variable="$array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="43" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="50">
          <name>$array</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="61" package="">
        <name>arrayDiff</name>
        <type>function</type>
        <docblock line="54">
          <description><![CDATA[Strictly subtracts one array from the other.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="param" description="The first array." type="array" variable="$a">
            <type by_reference="false">array</type>
          </tag>
          <tag line="54" name="param" description="The array of items to subtract." type="array" variable="$b">
            <type by_reference="false">array</type>
          </tag>
          <tag line="54" name="return" description="The resulting array." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="61">
          <name>$a</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="61">
          <name>$b</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="75" package="">
        <name>arrayUnique</name>
        <type>function</type>
        <docblock line="69">
          <description><![CDATA[Produces a strictly unique array.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="69" name="param" description="The array to make unique." type="array" variable="$arr">
            <type by_reference="false">array</type>
          </tag>
          <tag line="69" name="return" description="The unique array." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$arr</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="90" package="">
        <name>arraysAreIdentical</name>
        <type>function</type>
        <docblock line="83">
          <description><![CDATA[Compares arrays of objects against identity.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="83" name="param" description="Variable list of arrays to compare." type="array" variable="$arr,...">
            <type by_reference="false">array</type>
          </tag>
          <tag line="83" name="return" description="True if each array has the same keys referencing identical objects." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="109" package="">
        <name>sortByStrLen</name>
        <type>function</type>
        <docblock line="102">
          <description><![CDATA[Sorts two strings by their length.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="102" name="param" description="The first string." type="string" variable="$a">
            <type by_reference="false">string</type>
          </tag>
          <tag line="102" name="param" description="The second string." type="string" variable="$b">
            <type by_reference="false">string</type>
          </tag>
          <tag line="102" name="return" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="109">
          <name>$a</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="109">
          <name>$b</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="124" package="">
        <name>strPosArr</name>
        <type>function</type>
        <docblock line="114">
          <description><![CDATA[Searches a string for the first occurrence of any string in a given array.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="114" name="param" description="The string to search." type="string" variable="$haystack">
            <type by_reference="false">string</type>
          </tag>
          <tag line="114" name="param" description="An array of strings to seek." type="array" variable="$needles">
            <type by_reference="false">array</type>
          </tag>
          <tag line="114" name="param" description="The offset of $haystack at which to begin." type="integer" variable="$offset">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="114" name="param" description="&amp;$match Holds the first match." type="string" variable="$match">
            <type by_reference="false">string</type>
          </tag>
          <tag line="114" name="return" description="Position of $haystack at which the first match was found, OR false if no match is found." type="integer|boolean">
            <type by_reference="false">integer</type>
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="124">
          <name>$haystack</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="124">
          <name>$needles</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="124">
          <name>$offset</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
        <argument line="124">
          <name>$match</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="144" package="">
        <name>getBaseClassName</name>
        <type>function</type>
        <docblock line="137">
          <description><![CDATA[Gets the base class name of an object.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="137" name="param" description="The object whose base class name to get." type="object" variable="$object">
            <type by_reference="false">object</type>
          </tag>
          <tag line="137" name="return" description="The base class name, e.g. a object of class Space\Cadet will return 'Cadet'." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="144">
          <name>$object</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="157" package="">
        <name>debug</name>
        <type>function</type>
        <docblock line="150">
          <description><![CDATA[Prints debugging information, if the debug setting is set to true.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="150" name="param" description="Variables to print information about." type="mixed" variable="$var,...">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="150" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="150" name="see" description="\GoTableaux\config.php" refers="\GoTableaux\config.php"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Vocabulary.php" hash="f71c01b8345df5b8d7a1174e3e7103ed" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="VocabularyException">\GoTableaux\Exception\Vocabulary</namespace-alias>
    <namespace-alias name="AtomicSentence">\GoTableaux\Sentence\Atomic</namespace-alias>
    <namespace-alias name="MolecularSentence">\GoTableaux\Sentence\Molecular</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux" line="32" package="GoTableaux">
      <name>Vocabulary</name>
      <full_name>\GoTableaux\Vocabulary</full_name>
      <extends/>
      <docblock line="28">
        <description><![CDATA[Represents a vocabulary.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="28" name="package" description="GoTableaux"/>
      </docblock>
      <constant namespace="GoTableaux" line="80" package="Default">
        <name>OPER_TERNARY</name>
        <value><![CDATA[3]]></value>
      </constant>
      <constant namespace="GoTableaux" line="81" package="Default">
        <name>OPER_BINARY</name>
        <value><![CDATA[2]]></value>
      </constant>
      <constant namespace="GoTableaux" line="82" package="Default">
        <name>OPER_UNARY</name>
        <value><![CDATA[1]]></value>
      </constant>
      <constant namespace="GoTableaux" line="83" package="Default">
        <name>ATOMIC</name>
        <value><![CDATA[0]]></value>
      </constant>
      <constant namespace="GoTableaux" line="84" package="Default">
        <name>PUNCT_OPEN</name>
        <value><![CDATA[-1]]></value>
      </constant>
      <constant namespace="GoTableaux" line="85" package="Default">
        <name>PUNCT_CLOSE</name>
        <value><![CDATA[-2]]></value>
      </constant>
      <constant namespace="GoTableaux" line="86" package="Default">
        <name>PUNCT_SEPARATOR</name>
        <value><![CDATA[-3]]></value>
      </constant>
      <constant namespace="GoTableaux" line="87" package="Default">
        <name>CTRL_SUBSCRIPT</name>
        <value><![CDATA[-4]]></value>
      </constant>
      <constant namespace="GoTableaux" line="88" package="Default">
        <name>NUMERIC_CHAR</name>
        <value><![CDATA[-5]]></value>
      </constant>
      <property final="false" static="false" visibility="protected" line="41" package="Default">
        <name>$items</name>
        <default><![CDATA[array()]]></default>
        <docblock line="34">
          <description><![CDATA[Holds a hash of all vocabulary items, including operators.]]></description>
          <long-description><![CDATA[<p>Key is item symbol; value is type flag.</p>]]></long-description>
          <tag line="34" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="34" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="50" package="Default">
        <name>$operatorSymbols</name>
        <default><![CDATA[array()]]></default>
        <docblock line="43">
          <description><![CDATA[Holds the operator symbols.]]></description>
          <long-description><![CDATA[<p>Key is symbol, value is operator name.</p>]]></long-description>
          <tag line="43" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="43" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="59" package="Default">
        <name>$operators</name>
        <default><![CDATA[array()]]></default>
        <docblock line="52">
          <description><![CDATA[Holds the operators.]]></description>
          <long-description><![CDATA[<p>Key is operator name; value is {@link Operator operator} object.</p>]]></long-description>
          <tag line="52" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="52" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="71" package="Default">
        <name>$sentences</name>
        <default><![CDATA[array()]]></default>
        <docblock line="61">
          <description><![CDATA[Holds the set of sentences.]]></description>
          <long-description><![CDATA[<p>This is used for tracking {@link Sentence} instances, to ensure object
identity with sentence form identity. Key is sentence string relative to
a {@link SentenceParser parser}, value is {@link Sentence sentence} object.</p>]]></long-description>
          <tag line="61" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="61" name="see" description="\GoTableaux\Vocabulary::registerSentence()" refers="\GoTableaux\Vocabulary::registerSentence()"/>
          <tag line="61" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="77" package="Default">
        <name>$atomicSentences</name>
        <default><![CDATA[array()]]></default>
        <docblock line="73">
          <description><![CDATA[Holds the set of {@link Sentence\Atomic atomic sentences}.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="97" package="">
        <name>createWithLexicon</name>
        <type>function</type>
        <docblock line="90">
          <description><![CDATA[Creates an instance with a lexicon.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="90" name="param" description="Array of lexical items. For format, see the {@link Vocabulary::__consruct() constructor}." type="array" variable="$lexicon">
            <type by_reference="false">array</type>
          </tag>
          <tag line="90" name="return" description="The created instance." type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
        </docblock>
        <argument line="97">
          <name>$lexicon</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="108" package="">
        <name>isOperatorType</name>
        <type>function</type>
        <docblock line="102">
          <description><![CDATA[Checks whether a type flag is of an operator.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="102" name="param" description="The type flag." type="integer" variable="$flag">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="102" name="return" description="True if flag is of an operator, false otherwise." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="108">
          <name>$flag</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="134" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="113">
          <description><![CDATA[Constructor. Initializes lexicon.]]></description>
          <long-description><![CDATA[<p>Example:</p>

<pre><code><?php
$vocabulary = new Vocabulary( array(
    'openMarks' => array('(', '['),
    'closeMarks' => array(')', ']'),
    'atomicSymbols' => array('A', 'B', 'C'),
    'subscripts' => array('_'),
    'separators' => array(' '),
    'operatorSymbols' => array(
        '&' => array('Conjunction' => 2),
        '~' => array('Negation'  => 1)
    )
));
?>
</code></pre>]]></long-description>
          <tag line="113" name="param" description="Structured array of lexical items." type="array" variable="$lexicon">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="134">
          <name>$lexicon</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="145" package="">
        <name>addAtomicSymbol</name>
        <type>function</type>
        <docblock line="139">
          <description><![CDATA[Adds an atomic symbol.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="139" name="param" description="Symbol to be added (single character)." type="string" variable="$symbol">
            <type by_reference="false">string</type>
          </tag>
          <tag line="139" name="return" description="The current instance." type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
        </docblock>
        <argument line="145">
          <name>$symbol</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="157" package="">
        <name>getAtomicSymbols</name>
        <type>function</type>
        <docblock line="150">
          <description><![CDATA[Gets the atomic symbols.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="150" name="param" description="When true, returns a single character. Default is false." type="integer" variable="$single">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="150" name="return" description="Array of characters, or single character." type="array|string">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="157">
          <name>$single</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="168" package="">
        <name>addSubscriptSymbol</name>
        <type>function</type>
        <docblock line="162">
          <description><![CDATA[Sets the symbol used for subscripting atomic symbols]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="162" name="param" description="Symbol to use." type="string" variable="$symbol">
            <type by_reference="false">string</type>
          </tag>
          <tag line="162" name="return" description="The current instance." type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
        </docblock>
        <argument line="168">
          <name>$symbol</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="180" package="">
        <name>getSubscriptSymbols</name>
        <type>function</type>
        <docblock line="173">
          <description><![CDATA[Gets the subscript symbol.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="173" name="param" description="When true, returns a single character. Default is false." type="integer" variable="$single">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="173" name="return" description="Array of characters, or single character." type="array|string">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="180">
          <name>$single</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="191" package="">
        <name>addOpenMark</name>
        <type>function</type>
        <docblock line="185">
          <description><![CDATA[Adds an opening punctuation symbol, e.g. '('.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="185" name="param" description="Symbol to be added (single character)." type="string" variable="$symbol">
            <type by_reference="false">string</type>
          </tag>
          <tag line="185" name="return" description="The current instance." type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
        </docblock>
        <argument line="191">
          <name>$symbol</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="203" package="">
        <name>getOpenMarks</name>
        <type>function</type>
        <docblock line="196">
          <description><![CDATA[Gets the open marks.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="196" name="param" description="When true, returns a single character. Default is false." type="integer" variable="$single">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="196" name="return" description="Array of characters, or single character." type="array|string">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="203">
          <name>$single</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="214" package="">
        <name>addCloseMark</name>
        <type>function</type>
        <docblock line="208">
          <description><![CDATA[Adds a closing punctuation symbol, e.g. ')'.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="208" name="param" description="Symbol to be added (single character)." type="string" variable="$symbol">
            <type by_reference="false">string</type>
          </tag>
          <tag line="208" name="return" description="The current instance." type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
        </docblock>
        <argument line="214">
          <name>$symbol</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="226" package="">
        <name>getCloseMarks</name>
        <type>function</type>
        <docblock line="219">
          <description><![CDATA[Gets the close marks.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="219" name="param" description="When true, returns a single character. Default is false." type="integer" variable="$single">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="219" name="return" description="Array of characters, or single character." type="array|string">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="226">
          <name>$single</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="237" package="">
        <name>addSeparator</name>
        <type>function</type>
        <docblock line="231">
          <description><![CDATA[Adds a separator symbol, e.g. a space character.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="231" name="param" description="Symbol to be added (single character)." type="string" variable="$symbol">
            <type by_reference="false">string</type>
          </tag>
          <tag line="231" name="return" description="The current instance." type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
        </docblock>
        <argument line="237">
          <name>$symbol</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="249" package="">
        <name>getSeparators</name>
        <type>function</type>
        <docblock line="242">
          <description><![CDATA[Gets the separators.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="242" name="param" description="When true, returns a single character. Default is false." type="integer" variable="$single">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="242" name="return" description="Array of characters, or single character." type="array|string">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="249">
          <name>$single</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="263" package="">
        <name>createOperator</name>
        <type>function</type>
        <docblock line="254">
          <description><![CDATA[Creates an operator and adds it to the vocabulary items.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="254" name="param" description="Operator symbol." type="string" variable="$symbol">
            <type by_reference="false">string</type>
          </tag>
          <tag line="254" name="param" description="Arity of operator, either 1 or 2." type="integer" variable="$arity">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="254" name="param" description="Human name of the operator, e.g. 'Conjunction'." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="254" name="return" description="Operator instance." type="\GoTableaux\Operator">
            <type by_reference="false">\GoTableaux\Operator</type>
          </tag>
          <tag line="254" name="throws" description="VocabularyException} on errors." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
        </docblock>
        <argument line="263">
          <name>$symbol</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="263">
          <name>$arity</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="263">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="295" package="">
        <name>getOperatorSymbols</name>
        <type>function</type>
        <docblock line="287">
          <description><![CDATA[Gets all operator symbols.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="287" name="param" description="Arity of operators to get. Default is null, which returns all operator symbols." type="integer" variable="$arity">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="287" name="return" description="Array of operator symbols. Key is operator symbol, value is operator's arity." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="295">
          <name>$arity</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="311" package="">
        <name>getOperatorNames</name>
        <type>function</type>
        <docblock line="304">
          <description><![CDATA[Gets operator names with symbols for keys.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="304" name="param" description="Arity of operators to get. Default is null, which returns all operator names." type="integer" variable="$arity">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="304" name="return" description="Array of operator names with symbols for keys." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="311">
          <name>$arity</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="328" package="">
        <name>getOperatorByName</name>
        <type>function</type>
        <docblock line="321">
          <description><![CDATA[Gets Operator object by its name.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="321" name="param" description="Operator name." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="321" name="return" description="Operator object." type="\GoTableaux\Operator">
            <type by_reference="false">\GoTableaux\Operator</type>
          </tag>
          <tag line="321" name="throws" description="VocabularyException} when no operator is found." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
        </docblock>
        <argument line="328">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="343" package="">
        <name>getOperatorBySymbol</name>
        <type>function</type>
        <docblock line="335">
          <description><![CDATA[Gets Operator object by its symbol.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="335" name="param" description="Operator symbol." type="string" variable="$symbol">
            <type by_reference="false">string</type>
          </tag>
          <tag line="335" name="return" description="Operator instance." type="\GoTableaux\Operator">
            <type by_reference="false">\GoTableaux\Operator</type>
          </tag>
          <tag line="335" name="throws" description="VocabularyException} when $symbol is not an operator symbol in the vocabulary." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
        </docblock>
        <argument line="343">
          <name>$symbol</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="358" package="">
        <name>getSymbolForOperator</name>
        <type>function</type>
        <docblock line="351">
          <description><![CDATA[Gets the symbol used for a particular operator.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="351" name="param" description="Operator object or name of operator." type="\GoTableaux\Operator|string" variable="$operator">
            <type by_reference="false">\GoTableaux\Operator</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="351" name="return" description="Operator symbol." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="351" name="throws" description="VocabularyException} when operator is not in the vocabulary." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
        </docblock>
        <argument line="358">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="374" package="">
        <name>getSymbolType</name>
        <type>function</type>
        <docblock line="367">
          <description><![CDATA[Gets item type by symbol.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="367" name="param" description="The symbol in the vocabulary." type="string" variable="$symbol">
            <type by_reference="false">string</type>
          </tag>
          <tag line="367" name="return" description="Type flag of the symbol." type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="367" name="throws" description="VocabularyException} when symbol is not a vocabulary item." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
        </docblock>
        <argument line="374">
          <name>$symbol</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="393" package="">
        <name>registerSentence</name>
        <type>function</type>
        <docblock line="383">
          <description><![CDATA[Adds a sentence to the vocabulary, maintaining uniqueness.]]></description>
          <long-description><![CDATA[<p>If the sentence, or one of the same form is already in the vocabulary,
then that sentence is returned. Otherwise the passed sentence is
returned.</p>]]></long-description>
          <tag line="383" name="param" description="The sentence to add." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="383" name="return" description="Old or new sentence." type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
        </docblock>
        <argument line="393">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="419" package="">
        <name>getSentences</name>
        <type>function</type>
        <docblock line="414">
          <description><![CDATA[Gets the set of sentences.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="414" name="return" description="Array of {@link Sentence}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux" line="431" package="">
        <name>insertLexicon</name>
        <type>function</type>
        <docblock line="424">
          <description><![CDATA[Adds an array of lexical items to the vocabulary.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="424" name="param" description="Array of lexical items. For format, see the {@link Vocabulary::__construct() constructor}." type="array" variable="$lexicon">
            <type by_reference="false">array</type>
          </tag>
          <tag line="424" name="return" description="Current instance." type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
        </docblock>
        <argument line="431">
          <name>$lexicon</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux" line="465" package="">
        <name>addSymbol</name>
        <type>function</type>
        <docblock line="457">
          <description><![CDATA[Adds a symbol to the vocabulary.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="457" name="param" description="Single character symbol, novel to vocabulary instance." type="string" variable="$symbol">
            <type by_reference="false">string</type>
          </tag>
          <tag line="457" name="param" description="The symbol's type flag." type="integer" variable="$typeFlag">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="457" name="return" description="Current instance." type="\GoTableaux\Vocabulary">
            <type by_reference="false">\GoTableaux\Vocabulary</type>
          </tag>
          <tag line="457" name="throws" description="VocabularyException}." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
        </docblock>
        <argument line="465">
          <name>$symbol</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="465">
          <name>$typeFlag</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux" line="489" package="">
        <name>getItems</name>
        <type>function</type>
        <docblock line="481">
          <description><![CDATA[Gets all items in vocabulary of a type flag.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="481" name="param" description="Type flag or array of type flags." type="integer|array" variable="$typeFlag">
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="481" name="param" description="Whether to return a single character" type="boolean" variable="$single">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="481" name="return" description="Array of vocabulary items, or, if $single is true, a single character string." type="array|string">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="489">
          <name>$typeFlag</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="489">
          <name>$single</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <package name="" full_name=""/>
  <package name="CPL" full_name="CPL"/>
  <package name="Default" full_name="Default"/>
  <package name="FDE" full_name="FDE"/>
  <package name="GO" full_name="GO"/>
  <package name="GoTableaux" full_name="GoTableaux"/>
  <package name="LP" full_name="LP"/>
  <package name="Lukasiewicz" full_name="Lukasiewicz"/>
  <package name="StrongKleene" full_name="StrongKleene"/>
  <namespace name="GoTableaux" full_name="GoTableaux">
    <namespace name="Exception" full_name="GoTableaux\Exception"/>
    <namespace name="Logic" full_name="GoTableaux\Logic">
      <namespace name="CPL" full_name="GoTableaux\Logic\CPL">
        <namespace name="ProofSystem" full_name="GoTableaux\Logic\CPL\ProofSystem">
          <namespace name="Rule" full_name="GoTableaux\Logic\CPL\ProofSystem\Rule"/>
        </namespace>
      </namespace>
      <namespace name="FDE" full_name="GoTableaux\Logic\FDE">
        <namespace name="ProofSystem" full_name="GoTableaux\Logic\FDE\ProofSystem">
          <namespace name="Rule" full_name="GoTableaux\Logic\FDE\ProofSystem\Rule"/>
        </namespace>
      </namespace>
      <namespace name="GO" full_name="GoTableaux\Logic\GO">
        <namespace name="ProofSystem" full_name="GoTableaux\Logic\GO\ProofSystem">
          <namespace name="Rule" full_name="GoTableaux\Logic\GO\ProofSystem\Rule"/>
        </namespace>
      </namespace>
      <namespace name="LP" full_name="GoTableaux\Logic\LP">
        <namespace name="ProofSystem" full_name="GoTableaux\Logic\LP\ProofSystem">
          <namespace name="Rule" full_name="GoTableaux\Logic\LP\ProofSystem\Rule"/>
        </namespace>
      </namespace>
      <namespace name="Lukasiewicz" full_name="GoTableaux\Logic\Lukasiewicz">
        <namespace name="ProofSystem" full_name="GoTableaux\Logic\Lukasiewicz\ProofSystem">
          <namespace name="Rule" full_name="GoTableaux\Logic\Lukasiewicz\ProofSystem\Rule"/>
        </namespace>
      </namespace>
      <namespace name="StrongKleene" full_name="GoTableaux\Logic\StrongKleene">
        <namespace name="ProofSystem" full_name="GoTableaux\Logic\StrongKleene\ProofSystem">
          <namespace name="Rule" full_name="GoTableaux\Logic\StrongKleene\ProofSystem\Rule"/>
        </namespace>
      </namespace>
    </namespace>
    <namespace name="Proof" full_name="GoTableaux\Proof">
      <namespace name="TableauNode" full_name="GoTableaux\Proof\TableauNode"/>
    </namespace>
    <namespace name="ProofSystem" full_name="GoTableaux\ProofSystem">
      <namespace name="TableauxSystem" full_name="GoTableaux\ProofSystem\TableauxSystem">
        <namespace name="Modal" full_name="GoTableaux\ProofSystem\TableauxSystem\Modal"/>
        <namespace name="Rule" full_name="GoTableaux\ProofSystem\TableauxSystem\Rule"/>
      </namespace>
    </namespace>
    <namespace name="ProofWriter" full_name="GoTableaux\ProofWriter">
      <namespace name="Tableau" full_name="GoTableaux\ProofWriter\Tableau"/>
    </namespace>
    <namespace name="Sentence" full_name="GoTableaux\Sentence"/>
    <namespace name="SentenceParser" full_name="GoTableaux\SentenceParser"/>
    <namespace name="SentenceWriter" full_name="GoTableaux\SentenceWriter">
      <namespace name="Polish" full_name="GoTableaux\SentenceWriter\Polish"/>
      <namespace name="Standard" full_name="GoTableaux\SentenceWriter\Standard"/>
    </namespace>
    <namespace name="Utilities" full_name="GoTableaux\Utilities"/>
  </namespace>
  <marker count="2">todo</marker>
  <deprecated count="0"/>
</project>
