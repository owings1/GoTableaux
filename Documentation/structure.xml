<?xml version="1.0" encoding="utf-8"?>
<project version="2.0.0a2" title="GoTableaux">
  <file path="Argument.php" hash="1704e46e669951749ba6b33ba6ab21be" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux" line="28" package="GoTableaux">
      <name>Argument</name>
      <full_name>\GoTableaux\Argument</full_name>
      <extends/>
      <docblock line="24">
        <description><![CDATA[Represents an argument as a set of premises and one conclusion.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="35" package="Default">
        <name>$premises</name>
        <default><![CDATA[array()]]></default>
        <docblock line="30">
          <description><![CDATA[The set of premises. An array of {@link Sentence} objects.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="30" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="42" package="Default">
        <name>$conclusion</name>
        <default><![CDATA[]]></default>
        <docblock line="37">
          <description><![CDATA[The conclusion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="var" description="" type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="37" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="51" package="">
        <name>createWithPremisesAndConclusion</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[Creates an argument with given premises and conclusion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="param" description="The premises of the argument." type="array" variable="$premises">
            <type by_reference="false">array</type>
          </tag>
          <tag line="44" name="param" description="The conclusion of the argument." type="\GoTableaux\Sentence" variable="$conclusion">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="44" name="return" description="The created instance." type="\GoTableaux\Argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$premises</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="51">
          <name>$conclusion</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="63" package="">
        <name>addPremise</name>
        <type>function</type>
        <docblock line="57">
          <description><![CDATA[Adds a premise to the argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="param" description="The premise to add." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="57" name="return" description="Current instance." type="\GoTableaux\Argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="75" package="">
        <name>addPremises</name>
        <type>function</type>
        <docblock line="69">
          <description><![CDATA[Adds multiple premises to the argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="69" name="param" description="The premises as an array of {@link Sentence} objects." type="array" variable="$premises">
            <type by_reference="false">array</type>
          </tag>
          <tag line="69" name="return" description="Current instance." type="\GoTableaux\Argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$premises</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="87" package="">
        <name>getPremises</name>
        <type>function</type>
        <docblock line="82">
          <description><![CDATA[Gets all the premises of the argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="82" name="return" description="Array of {@link Sentence}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="98" package="">
        <name>setConclusion</name>
        <type>function</type>
        <docblock line="92">
          <description><![CDATA[Sets the conclusion of the argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="92" name="param" description="The conclusion." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="92" name="return" description="Current instance." type="\GoTableaux\Argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
        </docblock>
        <argument line="98">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="109" package="">
        <name>getConclusion</name>
        <type>function</type>
        <docblock line="104">
          <description><![CDATA[Gets the conclusion of the argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="104" name="return" description="The conclusion." type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="config.example.php" hash="9c4a4d20bbbed407b13c91354588947f" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
  </file>
  <file path="config.php" hash="e4527422106da91b45c7cebc086a7516" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
  </file>
  <file path="EventHandler.php" hash="fcd361ca47298c7a8f63b1a20995b720" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="31" code="50018">No DocBlock was found for property $bindings</error>
      <error line="33" code="50018">No DocBlock was found for property $bindingCount</error>
      <error line="35" code="50014">Name of argument $object does not match with the DocBlock's name $event in bind()</error>
      <error line="35" code="50014">Name of argument $event does not match with the DocBlock's name $callback in bind()</error>
      <error line="35" code="50015">Argument $callback is missing from the Docblock of bind()</error>
      <error line="62" code="50015">Argument $args is missing from the Docblock of trigger()</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux" line="29" package="GoTableaux">
      <name>EventHandler</name>
      <full_name>\GoTableaux\EventHandler</full_name>
      <extends/>
      <docblock line="24">
        <description><![CDATA[Handles Events.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="true" visibility="private" line="31" package="Default">
        <name>$bindings</name>
        <default><![CDATA[array()]]></default>
      </property>
      <property final="false" static="true" visibility="private" line="33" package="Default">
        <name>$bindingCount</name>
        <default><![CDATA[0]]></default>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="42" package="">
        <name>bind</name>
        <type>function</type>
        <docblock line="35">
          <description><![CDATA[Binds a callback to an event.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="param" description="The event name." type="string" variable="$event">
            <type by_reference="false">string</type>
          </tag>
          <tag line="35" name="param" description="The callback." type="callback" variable="$callback">
            <type by_reference="false">callback</type>
          </tag>
          <tag line="35" name="return" description="The listener id relative to the event." type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$object</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="42">
          <name>$event</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="42">
          <name>$callback</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="69" package="">
        <name>trigger</name>
        <type>function</type>
        <docblock line="62">
          <description><![CDATA[Triggers an event on an object.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="62" name="param" description="The object on which to trigger the event." type="object" variable="$object">
            <type by_reference="false">object</type>
          </tag>
          <tag line="62" name="param" description="The event name to trigger." type="string" variable="$event">
            <type by_reference="false">string</type>
          </tag>
          <tag line="62" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="69">
          <name>$object</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="69">
          <name>$event</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="69">
          <name>$args</name>
          <default><![CDATA[array()]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="82" package="">
        <name>copy</name>
        <type>function</type>
        <docblock line="76">
          <description><![CDATA[Copies event listeners for one object to another.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="76" name="param" description="The source object." type="object" variable="$source">
            <type by_reference="false">object</type>
          </tag>
          <tag line="76" name="param" description="The target object." type="object" variable="$target">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="82">
          <name>$source</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="82">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="96" package="">
        <name>getBindings</name>
        <type>function</type>
        <docblock line="89">
          <description><![CDATA[Gets the bindings of an object.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="89" name="param" description="The object whose bindings to get." type="object" variable="$object">
            <type by_reference="false">object</type>
          </tag>
          <tag line="89" name="param" description="The event name." type="string" variable="$event">
            <type by_reference="false">string</type>
          </tag>
          <tag line="89" name="return" description="The bindings, array( $object, $event, $callback )" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="96">
          <name>$object</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="96">
          <name>$event</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Exception/Loader.php" hash="2565c1849c0365857fa4ff22e8e05372" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Exception" line="28" package="GoTableaux">
      <name>Loader</name>
      <full_name>\GoTableaux\Exception\Loader</full_name>
      <extends>\GoTableaux\Exception</extends>
      <docblock line="24">
        <description><![CDATA[Represents a loader exception.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
    </class>
  </file>
  <file path="Exception/Parser.php" hash="85e28934b040e8a3b6d7bfb3f99908ed" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Exception" line="28" package="GoTableaux">
      <name>Parser</name>
      <full_name>\GoTableaux\Exception\Parser</full_name>
      <extends>\GoTableaux\Exception</extends>
      <docblock line="24">
        <description><![CDATA[Represents a parsing exception.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="34" package="Default">
        <name>$position</name>
        <default><![CDATA[0]]></default>
        <docblock line="30">
          <description><![CDATA[Character position of parse error.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="40" package="Default">
        <name>$input</name>
        <default><![CDATA['']]></default>
        <docblock line="36">
          <description><![CDATA[Input string for which error was raised.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux\Exception" line="49" package="">
        <name>createWithOptions</name>
        <type>function</type>
        <docblock line="42">
          <description><![CDATA[Creates an instance with options array.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="param" description="Associative array of options. Possible keys are 'message', 'code', 'previous', 'position', 'input'." type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="42" name="return" description="Created instance." type="\GoTableaux\Exception\Parser">
            <type by_reference="false">\GoTableaux\Exception\Parser</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$options</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux\Exception" line="71" package="">
        <name>createWithMsgInputPos</name>
        <type>function</type>
        <docblock line="63">
          <description><![CDATA[Creates an instance with message, input, and position parameters.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="param" description="The error message." type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="63" name="param" description="The current input string." type="string" variable="$input">
            <type by_reference="false">string</type>
          </tag>
          <tag line="63" name="param" description="The input string offset at which the error occurred." type="integer" variable="$position">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="63" name="return" description="Created instance." type="\GoTableaux\Exception\Parser">
            <type by_reference="false">\GoTableaux\Exception\Parser</type>
          </tag>
        </docblock>
        <argument line="71">
          <name>$message</name>
          <default><![CDATA['']]></default>
          <type/>
        </argument>
        <argument line="71">
          <name>$input</name>
          <default><![CDATA['']]></default>
          <type/>
        </argument>
        <argument line="71">
          <name>$position</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Exception/Proof.php" hash="72debc7b07d39220d2038abe1cc85da4" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Exception" line="28" package="GoTableaux">
      <name>Proof</name>
      <full_name>\GoTableaux\Exception\Proof</full_name>
      <extends>\GoTableaux\Exception</extends>
      <docblock line="24">
        <description><![CDATA[Represents a proof exception.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
    </class>
  </file>
  <file path="Exception/Rule.php" hash="99fcae879887c0f7a8e319efcf2eb06b" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Exception" line="28" package="GoTableaux">
      <name>Rule</name>
      <full_name>\GoTableaux\Exception\Rule</full_name>
      <extends>\GoTableaux\Exception\Tableau</extends>
      <docblock line="24">
        <description><![CDATA[Represents a tableau rule exception.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
    </class>
  </file>
  <file path="Exception/Tableau.php" hash="50baf44402d9c8e6db88bab162bd9afc" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Exception" line="28" package="GoTableaux">
      <name>Tableau</name>
      <full_name>\GoTableaux\Exception\Tableau</full_name>
      <extends>\GoTableaux\Exception\Proof</extends>
      <docblock line="24">
        <description><![CDATA[Represents a tableau proof exception.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
    </class>
  </file>
  <file path="Exception/Writer.php" hash="2a033e025294e896456a938952c045ac" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux\Exception" line="28" package="GoTableaux">
      <name>Writer</name>
      <full_name>\GoTableaux\Exception\Writer</full_name>
      <extends>\GoTableaux\Exception</extends>
      <docblock line="24">
        <description><![CDATA[Represents a tableau writer exception.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
    </class>
  </file>
  <file path="Exception.php" hash="425a1653b852eca611881dfda2220929" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux" line="27" package="GoTableaux">
      <name>Exception</name>
      <full_name>\GoTableaux\Exception</full_name>
      <extends>\Exception</extends>
      <docblock line="23">
        <description><![CDATA[Represents a program exception.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="GoTableaux"/>
      </docblock>
    </class>
  </file>
  <file path="Loader.php" hash="e1a3ddafa5ca2ec8f29a5f953646d5cb" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="LoaderException">\GoTableaux\Exception\Loader</namespace-alias>
    <constant namespace="GoTableaux" line="35" package="GoTableaux">
      <name>DS</name>
      <value><![CDATA[DIRECTORY_SEPARATOR]]></value>
      <docblock line="31">
        <description><![CDATA[Directory separator shortcut.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="31" name="package" description="GoTableaux"/>
      </docblock>
    </constant>
    <class final="false" abstract="false" namespace="GoTableaux" line="42" package="GoTableaux">
      <name>Loader</name>
      <full_name>\GoTableaux\Loader</full_name>
      <extends/>
      <docblock line="38">
        <description><![CDATA[Loads class files.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="38" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="52" package="">
        <name>loadClass</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[Loads a class file by parsing its namespace.]]></description>
          <long-description><![CDATA[<p>Registered as an autoloader.</p>]]></long-description>
          <tag line="44" name="param" description="The class name to load." type="string" variable="$class">
            <type by_reference="false">string</type>
          </tag>
          <tag line="44" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$class</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="65" package="">
        <name>loadConfig</name>
        <type>function</type>
        <docblock line="60">
          <description><![CDATA[Loads the config file.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="60" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/Rule/Closure.php" hash="c3c91381ca24b1a4aa18106c9f0f5964" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="34" code="50010">No DocBlock was found for method appliesToBranch()</error>
      <error line="48" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $branch in buildExample()</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="32" package="Logics">
      <name>Closure</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\Rule\Closure</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Closure</extends>
      <docblock line="28">
        <description><![CDATA[Represents the tableaux closure rule for CPL.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="28" name="package" description="Logics"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="34" package="">
        <name>appliesToBranch</name>
        <type>function</type>
        <argument line="34">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="34">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="55" package="">
        <name>buildExample</name>
        <type>function</type>
        <docblock line="48">
          <description><![CDATA[Builds an example branch for the rule.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="48" name="param" description="The branch to build." type="\GoTableaux\Logic\CPL\ProofSystem\Rule\TableauBrach" variable="$branch">
            <type by_reference="false">\GoTableaux\Logic\CPL\ProofSystem\Rule\TableauBrach</type>
          </tag>
          <tag line="48" name="param" description="The logic." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="48" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="55">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="55">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/Rule/Conjunction.php" hash="ac3cfc3be710c2987d344197f41840e9" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="32" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class Conjunction</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/CPL/ProofSystem/Rule/Conjunction.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="26" package="Logics">
      <name>Conjunction</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\Rule\Conjunction</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => 'A & B'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="32" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="32">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="32">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="32">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/Rule/Disjunction.php" hash="276126495cb6054065464572c8224279" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="32" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class Disjunction</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/CPL/ProofSystem/Rule/Disjunction.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="26" package="Logics">
      <name>Disjunction</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\Rule\Disjunction</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => 'A V B'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="32" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="32">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="32">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="32">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/Rule/DoubleNegation.php" hash="495d6020c72a2d66c86d54821c115925" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="32" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class DoubleNegation</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/CPL/ProofSystem/Rule/DoubleNegation.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="26" package="Logics">
      <name>DoubleNegation</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\Rule\DoubleNegation</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~~A'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="32" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="32">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="32">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="32">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/Rule/MaterialBiconditional.php" hash="d7b34f877f2ec4620cfdb5fe4192c0e0" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="32" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class MaterialBiconditional</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/CPL/ProofSystem/Rule/MaterialBiconditional.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="26" package="Logics">
      <name>MaterialBiconditional</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\Rule\MaterialBiconditional</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => 'A < B'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="32" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="32">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="32">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="32">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/Rule/MaterialConditional.php" hash="283187476f247e8ca0e13ff817898b12" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="32" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class MaterialConditional</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/CPL/ProofSystem/Rule/MaterialConditional.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="26" package="Logics">
      <name>MaterialConditional</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\Rule\MaterialConditional</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => 'A > B'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="32" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="32">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="32">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="32">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/Rule/NegatedConjunction.php" hash="8f1550ff1ba5e8839c2add7181fc9c34" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="32" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedConjunction</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/CPL/ProofSystem/Rule/NegatedConjunction.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedConjunction</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\Rule\NegatedConjunction</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~(A & B)'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="32" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="32">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="32">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="32">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/Rule/NegatedDisjunction.php" hash="57e919c435ae37a21fa7fabea9423f96" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="32" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedDisjunction</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/CPL/ProofSystem/Rule/NegatedDisjunction.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedDisjunction</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\Rule\NegatedDisjunction</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~(A V B)'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="32" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="32">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="32">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="32">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/Rule/NegatedMaterialBiconditional.php" hash="8d079624a4b098ab796c4b214e806589" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="32" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedMaterialBiconditional</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/CPL/ProofSystem/Rule/NegatedMaterialBiconditional.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedMaterialBiconditional</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\Rule\NegatedMaterialBiconditional</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~(A < B)'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="32" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="32">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="32">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="32">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem/Rule/NegatedMaterialConditional.php" hash="121219b42ffc3977facb4c9a9547c206" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="32" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedMaterialConditional</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/CPL/ProofSystem/Rule/NegatedMaterialConditional.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedMaterialConditional</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem\Rule\NegatedMaterialConditional</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~(A > B)'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL\ProofSystem\Rule" line="32" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="32">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="32">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="32">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL/ProofSystem.php" hash="3295c57e67e79ad8bf164bbe729519ef" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="34" code="50018">No DocBlock was found for property $ruleClasses</error>
    </parse_markers>
    <namespace-alias name="Tableau">\GoTableaux\Proof\Tableau</namespace-alias>
    <namespace-alias name="Argument">\GoTableaux\Argument</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\CPL" line="32" package="Logics">
      <name>ProofSystem</name>
      <full_name>\GoTableaux\Logic\CPL\ProofSystem</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem</extends>
      <docblock line="28">
        <description><![CDATA[Represents the Tableaux system for CPL.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="28" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="34" package="Default">
        <name>$ruleClasses</name>
        <default><![CDATA[array(
		'Closure',
		'DoubleNegation',
		'Conjunction',
		'NegatedDisjunction',
		'NegatedMaterialConditional',
		'NegatedConjunction',
		'Disjunction',
		'MaterialConditional',
		'MaterialBiconditional',
		'NegatedMaterialBiconditional',
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\CPL" line="55" package="">
        <name>buildTrunk</name>
        <type>function</type>
        <docblock line="47">
          <description><![CDATA[Builds the trunk of a tableau for an argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="param" description="The empty tableau." type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="47" name="param" description="The argument." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="47" name="param" description="The logic of the proof system." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="47" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="55">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
        <argument line="55">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
        <argument line="55">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/CPL.php" hash="7166be9f0fda4d3316b50d60320bd3ac" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $title</error>
      <error line="32" code="50018">No DocBlock was found for property $inheritOperatorsFrom</error>
      <error line="34" code="50018">No DocBlock was found for property $externalLinks</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic" line="28" package="Logics">
      <name>CPL</name>
      <full_name>\GoTableaux\Logic\CPL</full_name>
      <extends>\GoTableaux\Logic</extends>
      <docblock line="24">
        <description><![CDATA[Represents Classical Propositional Logic.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$title</name>
        <default><![CDATA['Classical Propositional Logic']]></default>
      </property>
      <property final="false" static="false" visibility="public" line="32" package="Default">
        <name>$inheritOperatorsFrom</name>
        <default><![CDATA['FDE']]></default>
      </property>
      <property final="false" static="false" visibility="public" line="34" package="Default">
        <name>$externalLinks</name>
        <default><![CDATA[array()]]></default>
      </property>
    </class>
  </file>
  <file path="Logic/D/ProofSystem/Rule/FinishAfterSerial.php" hash="8345b02fb0ac26552721f642e653f4aa" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Tableau">\GoTableaux\Proof\Tableau</namespace-alias>
    <namespace-alias name="Util">\GoTableaux\Utilities</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\D\ProofSystem\Rule" line="31" package="Logics">
      <name>FinishAfterSerial</name>
      <full_name>\GoTableaux\Logic\D\ProofSystem\Rule\FinishAfterSerial</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\TableauFinish</extends>
      <docblock line="27">
        <description><![CDATA[Forces finishing of the tableau.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="Logics"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\D\ProofSystem\Rule" line="39" package="">
        <name>applies</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Determines whether the rule can apply to the tableau.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="param" description="The tableau to check." type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="33" name="return" description="Whether the rule can apply." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/D/ProofSystem/Rule/Serial.php" hash="df70c5b9cb5861967d386b33a1b1023d" package="Default">
    <parse_markers>
      <error line="28" code="50010">No DocBlock was found for method appliesToBranch()</error>
      <error line="35" code="50010">No DocBlock was found for method applyToBranch()</error>
      <error line="44" code="50010">No DocBlock was found for method buildExample()</error>
      <critical line="23" code="50005">No short description for class Serial</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/D/ProofSystem/Rule/Serial.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\D\ProofSystem\Rule" line="26" package="Logics">
      <name>Serial</name>
      <full_name>\GoTableaux\Logic\D\ProofSystem\Rule\Serial</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Branch</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\D\ProofSystem\Rule" line="28" package="">
        <name>appliesToBranch</name>
        <type>function</type>
        <argument line="28">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="28">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\D\ProofSystem\Rule" line="35" package="">
        <name>applyToBranch</name>
        <type>function</type>
        <argument line="35">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="35">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\D\ProofSystem\Rule" line="44" package="">
        <name>buildExample</name>
        <type>function</type>
        <argument line="44">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="44">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/D/ProofSystem.php" hash="76365cf1bdb476e4612dca035a4347e2" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="35" code="50018">No DocBlock was found for property $ruleClasses</error>
    </parse_markers>
    <namespace-alias name="Tableau">\GoTableaux\Proof\Tableau</namespace-alias>
    <namespace-alias name="Argument">\GoTableaux\Argument</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\D" line="33" package="Logics">
      <name>ProofSystem</name>
      <full_name>\GoTableaux\Logic\D\ProofSystem</full_name>
      <extends>\GoTableaux\Logic\K\ProofSystem</extends>
      <docblock line="28">
        <description><![CDATA[Represents the Tableaux system for D.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="28" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="35" package="Default">
        <name>$ruleClasses</name>
        <default><![CDATA[array(
		'K.Closure',
		'K.Conjunction',
		'K.NegatedConjunction',
		'K.Disjunction',
		'K.NegatedDisjunction',
		'K.MaterialConditional',
		'K.NegatedMaterialConditional',
		'K.MaterialBiconditional',
		'K.NegatedMaterialBiconditional',
		'K.DoubleNegation',
		'K.Possibility',
		'K.NegatedPossibility',
		'K.Necessity',
		'K.NegatedNecessity',
		// If an application of the serial rule did not then result in other
		// rules applying, force the tableau to finish to prevent infinite
		// application of the serial rule.
		'FinishAfterSerial',
		// Apply serial rule only after all other rules have been applied.
		// Otherwise, an infinite tree will result on invalid arguments.
		'Serial',
	)]]></default>
      </property>
    </class>
  </file>
  <file path="Logic/D.php" hash="6de51da2fd72cffa4cc8d2c7b14ad9e8" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $title</error>
      <error line="32" code="50018">No DocBlock was found for property $inheritOperatorsFrom</error>
      <error line="34" code="50018">No DocBlock was found for property $externalLinks</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic" line="28" package="Logics">
      <name>D</name>
      <full_name>\GoTableaux\Logic\D</full_name>
      <extends>\GoTableaux\Logic</extends>
      <docblock line="24">
        <description><![CDATA[Represents normal modal logic with a serial access relation.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$title</name>
        <default><![CDATA['Deontic Normal Modal Logic']]></default>
      </property>
      <property final="false" static="false" visibility="public" line="32" package="Default">
        <name>$inheritOperatorsFrom</name>
        <default><![CDATA['K']]></default>
      </property>
      <property final="false" static="false" visibility="public" line="34" package="Default">
        <name>$externalLinks</name>
        <default><![CDATA[array(
		'Stanford Encyclopedia' => 'http://plato.stanford.edu/entries/logic-deontic/'
	)]]></default>
      </property>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/Closure.php" hash="94b07f16c3b7a8796fb476f95b5c78e3" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="33" code="50010">No DocBlock was found for method appliesToBranch()</error>
      <error line="41" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $branch in buildExample()</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="31" package="Logics">
      <name>Closure</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\Closure</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Closure</extends>
      <docblock line="27">
        <description><![CDATA[Represents the tableaux closure rule for FDE.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="Logics"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>appliesToBranch</name>
        <type>function</type>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="48" package="">
        <name>buildExample</name>
        <type>function</type>
        <docblock line="41">
          <description><![CDATA[Builds an example branch for the rule.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="41" name="param" description="The branch to build." type="\GoTableaux\Logic\FDE\ProofSystem\Rule\TableauBrach" variable="$branch">
            <type by_reference="false">\GoTableaux\Logic\FDE\ProofSystem\Rule\TableauBrach</type>
          </tag>
          <tag line="41" name="param" description="The logic." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="41" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="48">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="48">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/ConjunctionDesignated.php" hash="2360f4c591cf2b40365f06e2ac197c20" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class ConjunctionDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/ConjunctionDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="Logics">
      <name>ConjunctionDesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\ConjunctionDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => 'A & B',
		'designated' => true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/ConjunctionUndesignated.php" hash="89e4d905a4d30487a8b99cbcab8acf61" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class ConjunctionUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/ConjunctionUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="Logics">
      <name>ConjunctionUndesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\ConjunctionUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => 'A & B',
		'designated' => false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/DisjunctionDesignated.php" hash="46515cc5e91b0d03801bce9b31c01a25" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class DisjunctionDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/DisjunctionDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="Logics">
      <name>DisjunctionDesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\DisjunctionDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => 'A V B',
		'designated' => true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/DisjunctionUndesignated.php" hash="17efe6710670a19ee10c895ce327a20d" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class DisjunctionUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/DisjunctionUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="Logics">
      <name>DisjunctionUndesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\DisjunctionUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => 'A V B',
		'designated' => false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/DoubleNegationDesignated.php" hash="bd97e9ce16c635511bc93e61d75d8f08" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class DoubleNegationDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/DoubleNegationDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="Logics">
      <name>DoubleNegationDesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\DoubleNegationDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~~A',
		'designated' => true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/DoubleNegationUndesignated.php" hash="07400c7c3fb058c8281fa29586a23bb1" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class DoubleNegationUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/DoubleNegationUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="Logics">
      <name>DoubleNegationUndesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\DoubleNegationUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~~A',
		'designated' => false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/MaterialBiconditionalDesignated.php" hash="f481387607ce5aae65053540f442a880" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class MaterialBiconditionalDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/MaterialBiconditionalDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="Logics">
      <name>MaterialBiconditionalDesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\MaterialBiconditionalDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => 'A < B',
		'designated' => true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/MaterialBiconditionalUndesignated.php" hash="021425dee6287b11c78a66a109490779" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class MaterialBiconditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/MaterialBiconditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="Logics">
      <name>MaterialBiconditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\MaterialBiconditionalUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => 'A < B',
		'designated' => false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/MaterialConditionalDesignated.php" hash="a8fabdd8878206360df433809172d69a" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class MaterialConditionalDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/MaterialConditionalDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="Logics">
      <name>MaterialConditionalDesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\MaterialConditionalDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => 'A > B',
		'designated' => true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/MaterialConditionalUndesignated.php" hash="cf334dcec00b057dd069ec619e159b69" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class MaterialConditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/MaterialConditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="Logics">
      <name>MaterialConditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\MaterialConditionalUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => 'A > B',
		'designated' => false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/NegatedConjunctionDesignated.php" hash="1a5dc4c04b9c7d01cfbe2e5073b617a6" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedConjunctionDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/NegatedConjunctionDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedConjunctionDesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\NegatedConjunctionDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~(A & B)',
		'designated' => true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/NegatedConjunctionUndesignated.php" hash="76d115af62e6a89a361f315314f368e9" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedConjunctionUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/NegatedConjunctionUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedConjunctionUndesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\NegatedConjunctionUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~(A & B)',
		'designated' => false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/NegatedDisjunctionDesignated.php" hash="2a99c5af17ed46b7da6bded794ccb2a9" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedDisjunctionDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/NegatedDisjunctionDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedDisjunctionDesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\NegatedDisjunctionDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~(A V B)',
		'designated' => true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/NegatedDisjunctionUndesignated.php" hash="3ab43437eea78fafb42bcea180b2af38" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedDisjunctionUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/NegatedDisjunctionUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedDisjunctionUndesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\NegatedDisjunctionUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~(A V B)',
		'designated' => false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/NegatedMaterialBiconditionalDesignated.php" hash="cd697e6b2c07ba6ae4cbe5ba8dc81d05" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedMaterialBiconditionalDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/NegatedMaterialBiconditionalDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedMaterialBiconditionalDesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\NegatedMaterialBiconditionalDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~(A < B)',
		'designated' => true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/NegatedMaterialBiconditionalUndesignated.php" hash="4d12c9d0bee7885a110a9d1485035acd" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedMaterialBiconditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/NegatedMaterialBiconditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedMaterialBiconditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\NegatedMaterialBiconditionalUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~(A < B)',
		'designated' => false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/NegatedMaterialConditionalDesignated.php" hash="cd801238ac916f6a0f8741cd0788dc8d" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedMaterialConditionalDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/NegatedMaterialConditionalDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedMaterialConditionalDesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\NegatedMaterialConditionalDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~(A > B)',
		'designated' => true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem/Rule/NegatedMaterialConditionalUndesignated.php" hash="7909ab98f6b5d2eac0aa481869d9d30a" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedMaterialConditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/FDE/ProofSystem/Rule/NegatedMaterialConditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedMaterialConditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem\Rule\NegatedMaterialConditionalUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~(A > B)',
		'designated' => false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE/ProofSystem.php" hash="01934f4cc799a2cde4450bd5801eec3f" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="34" code="50018">No DocBlock was found for property $ruleClasses</error>
    </parse_markers>
    <namespace-alias name="Tableau">\GoTableaux\Proof\Tableau</namespace-alias>
    <namespace-alias name="Argument">\GoTableaux\Argument</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\FDE" line="32" package="Logics">
      <name>ProofSystem</name>
      <full_name>\GoTableaux\Logic\FDE\ProofSystem</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem</extends>
      <docblock line="28">
        <description><![CDATA[Represents the FDE tableaux system.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="28" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="34" package="Default">
        <name>$ruleClasses</name>
        <default><![CDATA[array(
		'Closure',
		'ConjunctionDesignated',
		'ConjunctionUndesignated',
		'NegatedConjunctionDesignated',
		'NegatedConjunctionUndesignated',
		'DisjunctionDesignated',
		'DisjunctionUndesignated',
		'NegatedDisjunctionDesignated',
		'NegatedDisjunctionUndesignated',
		'MaterialConditionalDesignated',
		'MaterialConditionalUndesignated',
		'NegatedMaterialConditionalDesignated',
		'NegatedMaterialConditionalUndesignated',
		'MaterialBiconditionalDesignated',
		'MaterialBiconditionalUndesignated',
		'NegatedMaterialBiconditionalDesignated',
		'NegatedMaterialBiconditionalUndesignated',
		'DoubleNegationDesignated',
		'DoubleNegationUndesignated'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\FDE" line="64" package="">
        <name>buildTrunk</name>
        <type>function</type>
        <docblock line="56">
          <description><![CDATA[Constructs the initial list (trunk) for an argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="param" description="The tableau to attach the" type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="56" name="param" description="The argument for which to build the trunk." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="56" name="param" description="The logic of the proof system." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="56" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="64">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
        <argument line="64">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
        <argument line="64">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/FDE.php" hash="6dc8e2c9f608dc6821de3919ee3f641a" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $title</error>
      <error line="32" code="50018">No DocBlock was found for property $operatorArities</error>
      <error line="40" code="50018">No DocBlock was found for property $externalLinks</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic" line="28" package="Logics">
      <name>FDE</name>
      <full_name>\GoTableaux\Logic\FDE</full_name>
      <extends>\GoTableaux\Logic</extends>
      <docblock line="24">
        <description><![CDATA[Represents First Degree Entailment Logic.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$title</name>
        <default><![CDATA['First Degree Entailment 4-valued logic']]></default>
      </property>
      <property final="false" static="false" visibility="public" line="32" package="Default">
        <name>$operatorArities</name>
        <default><![CDATA[array(
		'Negation' => 1,
		'Conjunction' => 2,
		'Disjunction' => 2,
		'Material Conditional' => 2,
		'Material Biconditional' => 2,
	)]]></default>
      </property>
      <property final="false" static="false" visibility="public" line="40" package="Default">
        <name>$externalLinks</name>
        <default><![CDATA[array(
		'Stanford Encyclopedia' => 'http://plato.stanford.edu/entries/logic-paraconsistent/'
	)]]></default>
      </property>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/ConditionalUndesignated.php" hash="166dbced1e63920b0d98b94013a5f600" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class ConditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/ConditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="Logics">
      <name>ConditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\ConditionalUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => 'A $ B',
		'designated' => false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/ConjunctionUndesignated.php" hash="39980aa60167a339d3bfb93dbb002c0f" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class ConjunctionUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/ConjunctionUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="Logics">
      <name>ConjunctionUndesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\ConjunctionUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => 'A & B',
		'designated' 	=> false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/DisjunctionUndesignated.php" hash="9cf8e6227abdae7061518db17b30aa78" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class DisjunctionUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/DisjunctionUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="Logics">
      <name>DisjunctionUndesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\DisjunctionUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => 'A V B',
		'designated' 	=> false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/MaterialBiconditionalUndesignated.php" hash="e4f628548700fd3b93d0bf935cc1a544" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class MaterialBiconditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/MaterialBiconditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="Logics">
      <name>MaterialBiconditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\MaterialBiconditionalUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => 'A < B',
		'designated' 	=> false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/MaterialConditionalUndesignated.php" hash="e0a61195ff846ac4ce1386c2e9bbfe2b" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class MaterialConditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/MaterialConditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="Logics">
      <name>MaterialConditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\MaterialConditionalUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => 'A > B',
		'designated' 	=> false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/NegatedConditionalDesignated.php" hash="d704561eb7fbff96448d39ca3cacf725" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedConditionalDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/NegatedConditionalDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedConditionalDesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\NegatedConditionalDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~(A $ B)',
		'designated' => true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/NegatedConditionalUndesignated.php" hash="0e71db97b474a99b452fa7fcb349c37f" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedConditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/NegatedConditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedConditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\NegatedConditionalUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~(A $ B)',
		'designated' => false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/NegatedConjunctionDesignated.php" hash="7b7cca6e452a6f34720503aa2750938e" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedConjunctionDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/NegatedConjunctionDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedConjunctionDesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\NegatedConjunctionDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~(A & B)',
		'designated' 	=> true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/NegatedConjunctionUndesignated.php" hash="aa5e93ce32966892499490d53269ef07" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedConjunctionUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/NegatedConjunctionUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedConjunctionUndesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\NegatedConjunctionUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~(A & B)',
		'designated' 	=> false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/NegatedDisjunctionDesignated.php" hash="24a90a10766521d6996bf0a4d422648a" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedDisjunctionDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/NegatedDisjunctionDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedDisjunctionDesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\NegatedDisjunctionDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~(A V B)',
		'designated' 	=> true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/NegatedDisjunctionUndesignated.php" hash="71447d6359d13493eee1c89d25f95dc1" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedDisjunctionUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/NegatedDisjunctionUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedDisjunctionUndesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\NegatedDisjunctionUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~(A V B)',
		'designated' 	=> false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/NegatedMaterialBiconditionalDesignated.php" hash="da0c15b87030f9fb599035c853df34bd" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedMaterialBiconditionalDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/NegatedMaterialBiconditionalDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedMaterialBiconditionalDesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\NegatedMaterialBiconditionalDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~(A < B)',
		'designated' 	=> true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/NegatedMaterialBiconditionalUndesignated.php" hash="645498aee7354209bf26dfca099ac864" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedMaterialBiconditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/NegatedMaterialBiconditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedMaterialBiconditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\NegatedMaterialBiconditionalUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~(A < B)',
		'designated' 	=> false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/NegatedMaterialConditionalDesignated.php" hash="f0625b54b4526d4ffe03488932ed4ded" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedMaterialConditionalDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/NegatedMaterialConditionalDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedMaterialConditionalDesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\NegatedMaterialConditionalDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~(A > B)',
		'designated' 	=> true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem/Rule/NegatedMaterialConditionalUndesignated.php" hash="71c937348d586e165dea88c889816e3c" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedMaterialConditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/GO/ProofSystem/Rule/NegatedMaterialConditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedMaterialConditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem\Rule\NegatedMaterialConditionalUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~(A > B)',
		'designated' 	=> false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\GO\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/GO/ProofSystem.php" hash="2ffb4208fd748abf25766d73cbed33fd" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="31" code="50018">No DocBlock was found for property $ruleClasses</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\GO" line="29" package="Logics">
      <name>ProofSystem</name>
      <full_name>\GoTableaux\Logic\GO\ProofSystem</full_name>
      <extends>\GoTableaux\Logic\FDE\ProofSystem</extends>
      <docblock line="24">
        <description><![CDATA[Represents the Tableaux system for GO.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="31" package="Default">
        <name>$ruleClasses</name>
        <default><![CDATA[array(
		'FDE.Closure',
		'StrongKleene.Closure',
		'FDE.ConjunctionDesignated',
		'ConjunctionUndesignated',
		'NegatedConjunctionDesignated',
		'NegatedConjunctionUndesignated',
		'FDE.DisjunctionDesignated',
		'DisjunctionUndesignated',
		'NegatedDisjunctionDesignated',
		'NegatedDisjunctionUndesignated',
		'FDE.MaterialConditionalDesignated',
		'MaterialConditionalUndesignated',
		'NegatedMaterialConditionalDesignated',
		'NegatedMaterialConditionalUndesignated',
		'FDE.MaterialBiconditionalDesignated',
		'MaterialBiconditionalUndesignated',
		'NegatedMaterialBiconditionalDesignated',
		'NegatedMaterialBiconditionalUndesignated',
		'FDE.DoubleNegationDesignated',
		'FDE.DoubleNegationUndesignated',
		'Lukasiewicz.ConditionalDesignated',
		'ConditionalUndesignated',
		'NegatedConditionalDesignated',
		'NegatedConditionalUndesignated',
	)]]></default>
      </property>
    </class>
  </file>
  <file path="Logic/GO.php" hash="2e01aab3f192fb582f7da6697f505c61" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $title</error>
      <error line="32" code="50018">No DocBlock was found for property $inheritOperatorsFrom</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic" line="28" package="Logics">
      <name>GO</name>
      <full_name>\GoTableaux\Logic\GO</full_name>
      <extends>\GoTableaux\Logic</extends>
      <docblock line="24">
        <description><![CDATA[Represents GO 3-valued Propositional Logic.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$title</name>
        <default><![CDATA['Gappy Objects 3-valued Logic']]></default>
      </property>
      <property final="false" static="false" visibility="public" line="32" package="Default">
        <name>$inheritOperatorsFrom</name>
        <default><![CDATA['Lukasiewicz']]></default>
      </property>
    </class>
  </file>
  <file path="Logic/K/ProofSystem/Rule/Closure.php" hash="5e3ed4784c38145e8f5778b70d2386f5" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="33" code="50010">No DocBlock was found for method appliesToBranch()</error>
      <error line="43" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $branch in buildExample()</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="31" package="Logics">
      <name>Closure</name>
      <full_name>\GoTableaux\Logic\K\ProofSystem\Rule\Closure</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Closure</extends>
      <docblock line="27">
        <description><![CDATA[Represents the tableaux closure rule for K.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="Logics"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="33" package="">
        <name>appliesToBranch</name>
        <type>function</type>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="50" package="">
        <name>buildExample</name>
        <type>function</type>
        <docblock line="43">
          <description><![CDATA[Builds an example branch for the rule.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="param" description="The branch to build." type="\GoTableaux\Logic\K\ProofSystem\Rule\TableauBrach" variable="$branch">
            <type by_reference="false">\GoTableaux\Logic\K\ProofSystem\Rule\TableauBrach</type>
          </tag>
          <tag line="43" name="param" description="The logic." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="43" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="50">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/K/ProofSystem/Rule/Conjunction.php" hash="a432438f66d879dd716d75f1bd011ccf" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class Conjunction</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/K/ProofSystem/Rule/Conjunction.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="26" package="Logics">
      <name>Conjunction</name>
      <full_name>\GoTableaux\Logic\K\ProofSystem\Rule\Conjunction</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => 'A & B',
		'i' => '*'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/K/ProofSystem/Rule/Disjunction.php" hash="d3342d1837eb2c04284f19d266f2590c" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class Disjunction</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/K/ProofSystem/Rule/Disjunction.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="26" package="Logics">
      <name>Disjunction</name>
      <full_name>\GoTableaux\Logic\K\ProofSystem\Rule\Disjunction</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => 'A V B',
		'i' => '*'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/K/ProofSystem/Rule/DoubleNegation.php" hash="8d52f2e61f2f22d0680ac44fb6a46757" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class DoubleNegation</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/K/ProofSystem/Rule/DoubleNegation.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="26" package="Logics">
      <name>DoubleNegation</name>
      <full_name>\GoTableaux\Logic\K\ProofSystem\Rule\DoubleNegation</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~~A',
		'i' => '*'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/K/ProofSystem/Rule/MaterialBiconditional.php" hash="899da397e9222113d4ef28412bd6e4ea" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class MaterialBiconditional</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/K/ProofSystem/Rule/MaterialBiconditional.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="26" package="Logics">
      <name>MaterialBiconditional</name>
      <full_name>\GoTableaux\Logic\K\ProofSystem\Rule\MaterialBiconditional</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => 'A < B',
		'i' => '*'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/K/ProofSystem/Rule/MaterialConditional.php" hash="8939a60051fbf893610ef041de81a6c7" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class MaterialConditional</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/K/ProofSystem/Rule/MaterialConditional.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="26" package="Logics">
      <name>MaterialConditional</name>
      <full_name>\GoTableaux\Logic\K\ProofSystem\Rule\MaterialConditional</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => 'A > B',
		'i' => '*'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/K/ProofSystem/Rule/Necessity.php" hash="97222693bd07d95fe9da15308a3e632f" package="Default">
    <parse_markers>
      <error line="30" code="50010">No DocBlock was found for method appliesToBranch()</error>
      <error line="44" code="50010">No DocBlock was found for method applyToBranch()</error>
      <error line="57" code="50010">No DocBlock was found for method applyToNodeForIndex()</error>
      <error line="63" code="50010">No DocBlock was found for method buildExample()</error>
      <critical line="24" code="50005">No short description for class Necessity</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/K/ProofSystem/Rule/Necessity.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="27" package="Logics">
      <name>Necessity</name>
      <full_name>\GoTableaux\Logic\K\ProofSystem\Rule\Necessity</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Branch</extends>
      <docblock line="24">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Logics"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="30" package="">
        <name>appliesToBranch</name>
        <type>function</type>
        <argument line="30">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="30">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="44" package="">
        <name>applyToBranch</name>
        <type>function</type>
        <argument line="44">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="44">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="57" package="">
        <name>applyToNodeForIndex</name>
        <type>function</type>
        <argument line="57">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="57">
          <name>$i</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="57">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="57">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="63" package="">
        <name>buildExample</name>
        <type>function</type>
        <argument line="63">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="63">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/K/ProofSystem/Rule/NegatedConjunction.php" hash="34672a5b8fff2da4126d4916eae1f522" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedConjunction</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/K/ProofSystem/Rule/NegatedConjunction.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedConjunction</name>
      <full_name>\GoTableaux\Logic\K\ProofSystem\Rule\NegatedConjunction</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~(A & B)',
		'i' => '*'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/K/ProofSystem/Rule/NegatedDisjunction.php" hash="0ec5b499190fbc85b155808ffd654dc7" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedDisjunction</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/K/ProofSystem/Rule/NegatedDisjunction.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedDisjunction</name>
      <full_name>\GoTableaux\Logic\K\ProofSystem\Rule\NegatedDisjunction</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~(A V B)',
		'i' => '*'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/K/ProofSystem/Rule/NegatedMaterialBiconditional.php" hash="6d60184cbb04858f9af39616c109e6d5" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedMaterialBiconditional</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/K/ProofSystem/Rule/NegatedMaterialBiconditional.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedMaterialBiconditional</name>
      <full_name>\GoTableaux\Logic\K\ProofSystem\Rule\NegatedMaterialBiconditional</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~(A < B)',
		'i' => '*'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/K/ProofSystem/Rule/NegatedMaterialConditional.php" hash="504998a6a732db0f8c545e94042a3edb" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedMaterialConditional</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/K/ProofSystem/Rule/NegatedMaterialConditional.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedMaterialConditional</name>
      <full_name>\GoTableaux\Logic\K\ProofSystem\Rule\NegatedMaterialConditional</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~(A > B)',
		'i' => '*'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/K/ProofSystem/Rule/NegatedNecessity.php" hash="46cc9b0e3847b8bb9cc357579f8babc6" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedNecessity</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/K/ProofSystem/Rule/NegatedNecessity.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedNecessity</name>
      <full_name>\GoTableaux\Logic\K\ProofSystem\Rule\NegatedNecessity</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~NA',
		'i' => '*'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/K/ProofSystem/Rule/NegatedPossibility.php" hash="94bb5896734a3c628fa884d55fc10a84" package="Default">
    <parse_markers>
      <error line="30" code="50010">No DocBlock was found for method appliesToBranch()</error>
      <error line="44" code="50010">No DocBlock was found for method applyToBranch()</error>
      <error line="57" code="50010">No DocBlock was found for method applyToNodeForIndex()</error>
      <error line="63" code="50010">No DocBlock was found for method buildExample()</error>
      <error line="69" code="50010">No DocBlock was found for method getSentence()</error>
      <critical line="24" code="50005">No short description for class NegatedPossibility</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/K/ProofSystem/Rule/NegatedPossibility.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="27" package="Logics">
      <name>NegatedPossibility</name>
      <full_name>\GoTableaux\Logic\K\ProofSystem\Rule\NegatedPossibility</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Branch</extends>
      <docblock line="24">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Logics"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="30" package="">
        <name>appliesToBranch</name>
        <type>function</type>
        <argument line="30">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="30">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="44" package="">
        <name>applyToBranch</name>
        <type>function</type>
        <argument line="44">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="44">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="57" package="">
        <name>applyToNodeForIndex</name>
        <type>function</type>
        <argument line="57">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="57">
          <name>$i</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="57">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="57">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="63" package="">
        <name>buildExample</name>
        <type>function</type>
        <argument line="63">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="63">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="69" package="">
        <name>getSentence</name>
        <type>function</type>
        <argument line="69">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="69">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/K/ProofSystem/Rule/Possibility.php" hash="8732c0ca02c20ba896762cdb33ca5ea6" package="Default">
    <parse_markers>
      <error line="29" code="50018">No DocBlock was found for property $conditions</error>
      <error line="34" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="24" code="50005">No short description for class Possibility</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/K/ProofSystem/Rule/Possibility.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="27" package="Logics">
      <name>Possibility</name>
      <full_name>\GoTableaux\Logic\K\ProofSystem\Rule\Possibility</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="24">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="29" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => 'PA',
		'i' => '*'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\K\ProofSystem\Rule" line="34" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="34">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="34">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="34">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/K/ProofSystem.php" hash="0294e6bf479406cd8adf27e1e0a7528f" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="35" code="50018">No DocBlock was found for property $ruleClasses</error>
    </parse_markers>
    <namespace-alias name="Tableau">\GoTableaux\Proof\Tableau</namespace-alias>
    <namespace-alias name="Argument">\GoTableaux\Argument</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\K" line="33" package="Logics">
      <name>ProofSystem</name>
      <full_name>\GoTableaux\Logic\K\ProofSystem</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem</extends>
      <docblock line="28">
        <description><![CDATA[Represents the Tableaux system for K.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="28" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="35" package="Default">
        <name>$ruleClasses</name>
        <default><![CDATA[array(
		'Closure',
		'Conjunction',
		'NegatedConjunction',
		'Disjunction',
		'NegatedDisjunction',
		'MaterialConditional',
		'NegatedMaterialConditional',
		'MaterialBiconditional',
		'NegatedMaterialBiconditional',
		'DoubleNegation',
		'Possibility',
		'NegatedPossibility',
		'Necessity',
		'NegatedNecessity',
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\K" line="60" package="">
        <name>buildTrunk</name>
        <type>function</type>
        <docblock line="52">
          <description><![CDATA[Constructs the initial list (trunk) for an argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="param" description="The tableau to attach the" type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="52" name="param" description="The argument for which to build the trunk." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="52" name="param" description="The logic of the proof system." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="52" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="60">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
        <argument line="60">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
        <argument line="60">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/K.php" hash="718e48d874aeceb29af6e8471503fc2d" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $title</error>
      <error line="32" code="50018">No DocBlock was found for property $inheritOperatorsFrom</error>
      <error line="34" code="50018">No DocBlock was found for property $operatorArities</error>
      <error line="36" code="50018">No DocBlock was found for property $externalLinks</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic" line="28" package="Logics">
      <name>K</name>
      <full_name>\GoTableaux\Logic\K</full_name>
      <extends>\GoTableaux\Logic</extends>
      <docblock line="24">
        <description><![CDATA[Represents normal modal logic.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$title</name>
        <default><![CDATA['Kripke Normal Modal Logic']]></default>
      </property>
      <property final="false" static="false" visibility="public" line="32" package="Default">
        <name>$inheritOperatorsFrom</name>
        <default><![CDATA['FDE']]></default>
      </property>
      <property final="false" static="false" visibility="public" line="34" package="Default">
        <name>$operatorArities</name>
        <default><![CDATA[array( 'Necessity' => 1, 'Possibility' => 1 )]]></default>
      </property>
      <property final="false" static="false" visibility="public" line="36" package="Default">
        <name>$externalLinks</name>
        <default><![CDATA[array(
		'Stanford Encyclopedia' => 'http://plato.stanford.edu/entries/logic-modal/'
	)]]></default>
      </property>
    </class>
  </file>
  <file path="Logic/LP/ProofSystem/Rule/Closure.php" hash="4acf3ef47cd2432501d3a77d2b147eb4" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="33" code="50010">No DocBlock was found for method appliesToBranch()</error>
      <error line="42" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $branch in buildExample()</error>
    </parse_markers>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\LP\ProofSystem\Rule" line="31" package="Logics">
      <name>Closure</name>
      <full_name>\GoTableaux\Logic\LP\ProofSystem\Rule\Closure</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Closure</extends>
      <docblock line="27">
        <description><![CDATA[Represents the LP closure rule.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="Logics"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\LP\ProofSystem\Rule" line="33" package="">
        <name>appliesToBranch</name>
        <type>function</type>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\LP\ProofSystem\Rule" line="49" package="">
        <name>buildExample</name>
        <type>function</type>
        <docblock line="42">
          <description><![CDATA[Builds an example branch for the rule.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="param" description="The branch to build." type="\GoTableaux\Logic\LP\ProofSystem\Rule\TableauBrach" variable="$branch">
            <type by_reference="false">\GoTableaux\Logic\LP\ProofSystem\Rule\TableauBrach</type>
          </tag>
          <tag line="42" name="param" description="The logic." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="42" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="49">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/LP/ProofSystem.php" hash="b07ce6592cb762774e215a94dc5b79bf" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $ruleClasses</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\LP" line="28" package="Logics">
      <name>ProofSystem</name>
      <full_name>\GoTableaux\Logic\LP\ProofSystem</full_name>
      <extends>\GoTableaux\Logic\FDE\ProofSystem</extends>
      <docblock line="24">
        <description><![CDATA[Represents the LP tableaux system.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$ruleClasses</name>
        <default><![CDATA[array(
		'Closure',
		'FDE.Closure',
		'FDE.ConjunctionDesignated',
		'FDE.ConjunctionUndesignated',
		'FDE.NegatedConjunctionDesignated',
		'FDE.NegatedConjunctionUndesignated',
		'FDE.DisjunctionDesignated',
		'FDE.DisjunctionUndesignated',
		'FDE.NegatedDisjunctionDesignated',
		'FDE.NegatedDisjunctionUndesignated',
		'FDE.MaterialConditionalDesignated',
		'FDE.MaterialConditionalUndesignated',
		'FDE.NegatedMaterialConditionalDesignated',
		'FDE.NegatedMaterialConditionalUndesignated',
		'FDE.MaterialBiconditionalDesignated',
		'FDE.MaterialBiconditionalUndesignated',
		'FDE.NegatedMaterialBiconditionalDesignated',
		'FDE.NegatedMaterialBiconditionalUndesignated',
		'FDE.DoubleNegationDesignated',
		'FDE.DoubleNegationUndesignated',
	)]]></default>
      </property>
    </class>
  </file>
  <file path="Logic/LP.php" hash="cfdfef5656292660e7ad8320325333af" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $title</error>
      <error line="32" code="50018">No DocBlock was found for property $inheritOperatorsFrom</error>
      <error line="34" code="50018">No DocBlock was found for property $externalLinks</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic" line="28" package="Logics">
      <name>LP</name>
      <full_name>\GoTableaux\Logic\LP</full_name>
      <extends>\GoTableaux\Logic</extends>
      <docblock line="24">
        <description><![CDATA[Represents the Logic of Paradox.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$title</name>
        <default><![CDATA['The Logic of Paradox']]></default>
      </property>
      <property final="false" static="false" visibility="public" line="32" package="Default">
        <name>$inheritOperatorsFrom</name>
        <default><![CDATA['FDE']]></default>
      </property>
      <property final="false" static="false" visibility="public" line="34" package="Default">
        <name>$externalLinks</name>
        <default><![CDATA[array(
		'Stanford Encyclopedia' => 'http://plato.stanford.edu/entries/logic-paraconsistent/',
		'Liar Paradox' => 'http://plato.stanford.edu/entries/liar-paradox/'
	)]]></default>
      </property>
    </class>
  </file>
  <file path="Logic/Lukasiewicz/ProofSystem/Rule/ConditionalDesignated.php" hash="6fb5bc56a73f9a5e7af06a809ea1cc7b" package="Default">
    <markers>
      <todo line="44">write test that these rules would fail</todo>
    </markers>
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class ConditionalDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/Lukasiewicz/ProofSystem/Rule/ConditionalDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\Lukasiewicz\ProofSystem\Rule" line="26" package="Logics">
      <name>ConditionalDesignated</name>
      <full_name>\GoTableaux\Logic\Lukasiewicz\ProofSystem\Rule\ConditionalDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => 'A $ B',
		'designated' => true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\Lukasiewicz\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/Lukasiewicz/ProofSystem/Rule/ConditionalUndesignated.php" hash="65b845b81b414cb01c7eb318e96d894b" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class ConditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/Lukasiewicz/ProofSystem/Rule/ConditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\Lukasiewicz\ProofSystem\Rule" line="26" package="Logics">
      <name>ConditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\Lukasiewicz\ProofSystem\Rule\ConditionalUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => 'A $ B',
		'designated' => false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\Lukasiewicz\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/Lukasiewicz/ProofSystem/Rule/NegatedConditionalDesignated.php" hash="08f46b411dc4fee0e5e916efe28e525e" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedConditionalDesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/Lukasiewicz/ProofSystem/Rule/NegatedConditionalDesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\Lukasiewicz\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedConditionalDesignated</name>
      <full_name>\GoTableaux\Logic\Lukasiewicz\ProofSystem\Rule\NegatedConditionalDesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~(A $ B)',
		'designated' => true,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\Lukasiewicz\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/Lukasiewicz/ProofSystem/Rule/NegatedConditionalUndesignated.php" hash="9d78f63651945b64de93312606f76b92" package="Default">
    <parse_markers>
      <error line="28" code="50018">No DocBlock was found for property $conditions</error>
      <error line="33" code="50010">No DocBlock was found for method applyToNode()</error>
      <critical line="23" code="50005">No short description for class NegatedConditionalUndesignated</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/Lukasiewicz/ProofSystem/Rule/NegatedConditionalUndesignated.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\Lukasiewicz\ProofSystem\Rule" line="26" package="Logics">
      <name>NegatedConditionalUndesignated</name>
      <full_name>\GoTableaux\Logic\Lukasiewicz\ProofSystem\Rule\NegatedConditionalUndesignated</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array(
		'sentenceForm' => '~(A $ B)',
		'designated' => false,
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\Lukasiewicz\ProofSystem\Rule" line="33" package="">
        <name>applyToNode</name>
        <type>function</type>
        <argument line="33">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/Lukasiewicz/ProofSystem.php" hash="b1f1d245c4b43c22d9f76bef15906db9" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $ruleClasses</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\Lukasiewicz" line="28" package="Logics">
      <name>ProofSystem</name>
      <full_name>\GoTableaux\Logic\Lukasiewicz\ProofSystem</full_name>
      <extends>\GoTableaux\Logic\FDE\ProofSystem</extends>
      <docblock line="24">
        <description><![CDATA[Represents the Lukasiewicz 3 tableaux system.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$ruleClasses</name>
        <default><![CDATA[array(
		'StrongKleene.Closure',
		'FDE.Closure',
		'FDE.ConjunctionDesignated',
		'FDE.ConjunctionUndesignated',
		'FDE.NegatedConjunctionDesignated',
		'FDE.NegatedConjunctionUndesignated',
		'FDE.DisjunctionDesignated',
		'FDE.DisjunctionUndesignated',
		'FDE.NegatedDisjunctionDesignated',
		'FDE.NegatedDisjunctionUndesignated',
		'FDE.MaterialConditionalDesignated',
		'FDE.MaterialConditionalUndesignated',
		'FDE.NegatedMaterialConditionalDesignated',
		'FDE.NegatedMaterialConditionalUndesignated',
		'FDE.MaterialBiconditionalDesignated',
		'FDE.MaterialBiconditionalUndesignated',
		'FDE.NegatedMaterialBiconditionalDesignated',
		'FDE.NegatedMaterialBiconditionalUndesignated',
		'FDE.DoubleNegationDesignated',
		'FDE.DoubleNegationUndesignated',
		'ConditionalDesignated',
		'ConditionalUndesignated',
		'NegatedConditionalDesignated',
		'NegatedConditionalUndesignated',
	)]]></default>
      </property>
    </class>
  </file>
  <file path="Logic/Lukasiewicz.php" hash="5da8a1329f06c0a3d34d3dabd4e6ab18" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $title</error>
      <error line="32" code="50018">No DocBlock was found for property $inheritOperatorsFrom</error>
      <error line="34" code="50018">No DocBlock was found for property $operatorArities</error>
      <error line="36" code="50018">No DocBlock was found for property $externalLinks</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic" line="28" package="Logics">
      <name>Lukasiewicz</name>
      <full_name>\GoTableaux\Logic\Lukasiewicz</full_name>
      <extends>\GoTableaux\Logic</extends>
      <docblock line="24">
        <description><![CDATA[Represents Lukasiewicz 3-valued logic.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$title</name>
        <default><![CDATA['Lukasiewicz 3-valued Logic']]></default>
      </property>
      <property final="false" static="false" visibility="public" line="32" package="Default">
        <name>$inheritOperatorsFrom</name>
        <default><![CDATA['FDE']]></default>
      </property>
      <property final="false" static="false" visibility="public" line="34" package="Default">
        <name>$operatorArities</name>
        <default><![CDATA[array( 'Conditional' => 2 )]]></default>
      </property>
      <property final="false" static="false" visibility="public" line="36" package="Default">
        <name>$externalLinks</name>
        <default><![CDATA[array(
		'Stanford Encyclopedia' => 'http://plato.stanford.edu/entries/logic-manyvalued/#LukLog'
	)]]></default>
      </property>
    </class>
  </file>
  <file path="Logic/S4/ProofSystem/Rule/Transitive.php" hash="fac8c9bede7c29328b4e8ae689fdbe33" package="Default">
    <parse_markers>
      <error line="28" code="50010">No DocBlock was found for method appliesToBranch()</error>
      <error line="38" code="50010">No DocBlock was found for method applyToBranch()</error>
      <error line="49" code="50010">No DocBlock was found for method buildExample()</error>
      <critical line="23" code="50005">No short description for class Transitive</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/S4/ProofSystem/Rule/Transitive.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\S4\ProofSystem\Rule" line="26" package="Logics">
      <name>Transitive</name>
      <full_name>\GoTableaux\Logic\S4\ProofSystem\Rule\Transitive</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Branch</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\S4\ProofSystem\Rule" line="28" package="">
        <name>appliesToBranch</name>
        <type>function</type>
        <argument line="28">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="28">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\S4\ProofSystem\Rule" line="38" package="">
        <name>applyToBranch</name>
        <type>function</type>
        <argument line="38">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="38">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\S4\ProofSystem\Rule" line="49" package="">
        <name>buildExample</name>
        <type>function</type>
        <argument line="49">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="49">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/S4/ProofSystem.php" hash="e2af2fa88e90a41640fc27d0bad39cf7" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="35" code="50018">No DocBlock was found for property $ruleClasses</error>
    </parse_markers>
    <namespace-alias name="Tableau">\GoTableaux\Proof\Tableau</namespace-alias>
    <namespace-alias name="Argument">\GoTableaux\Argument</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\S4" line="33" package="Logics">
      <name>ProofSystem</name>
      <full_name>\GoTableaux\Logic\S4\ProofSystem</full_name>
      <extends>\GoTableaux\Logic\K\ProofSystem</extends>
      <docblock line="28">
        <description><![CDATA[Represents the Tableaux system for S4.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="28" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="35" package="Default">
        <name>$ruleClasses</name>
        <default><![CDATA[array(
		'K.Closure',
		'T.Reflexive',
		'Transitive',
		'K.Conjunction',
		'K.NegatedConjunction',
		'K.Disjunction',
		'K.NegatedDisjunction',
		'K.MaterialConditional',
		'K.NegatedMaterialConditional',
		'K.MaterialBiconditional',
		'K.NegatedMaterialBiconditional',
		'K.DoubleNegation',
		'K.Possibility',
		'K.NegatedPossibility',
		'K.Necessity',
		'K.NegatedNecessity',
	)]]></default>
      </property>
    </class>
  </file>
  <file path="Logic/S4.php" hash="6a0a2195f1fd0c27384b4c2572386624" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $title</error>
      <error line="32" code="50018">No DocBlock was found for property $inheritOperatorsFrom</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic" line="28" package="Logics">
      <name>S4</name>
      <full_name>\GoTableaux\Logic\S4</full_name>
      <extends>\GoTableaux\Logic</extends>
      <docblock line="24">
        <description><![CDATA[Represents normal modal logic with reflexive and transitive access relation.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$title</name>
        <default><![CDATA['S4 Normal Modal Logic']]></default>
      </property>
      <property final="false" static="false" visibility="public" line="32" package="Default">
        <name>$inheritOperatorsFrom</name>
        <default><![CDATA['K']]></default>
      </property>
    </class>
  </file>
  <file path="Logic/S5/ProofSystem/Rule/Symmetric.php" hash="4dd9bda2726ea44fea15b5cafad3de47" package="Default">
    <parse_markers>
      <error line="28" code="50010">No DocBlock was found for method appliesToBranch()</error>
      <error line="37" code="50010">No DocBlock was found for method applyToBranch()</error>
      <error line="47" code="50010">No DocBlock was found for method buildExample()</error>
      <critical line="23" code="50005">No short description for class Symmetric</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/S5/ProofSystem/Rule/Symmetric.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\S5\ProofSystem\Rule" line="26" package="Logics">
      <name>Symmetric</name>
      <full_name>\GoTableaux\Logic\S5\ProofSystem\Rule\Symmetric</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Branch</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\S5\ProofSystem\Rule" line="28" package="">
        <name>appliesToBranch</name>
        <type>function</type>
        <argument line="28">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="28">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\S5\ProofSystem\Rule" line="37" package="">
        <name>applyToBranch</name>
        <type>function</type>
        <argument line="37">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="37">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\S5\ProofSystem\Rule" line="47" package="">
        <name>buildExample</name>
        <type>function</type>
        <argument line="47">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="47">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/S5/ProofSystem.php" hash="50c806afebd0a0ef74bf0778663b0914" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="35" code="50018">No DocBlock was found for property $ruleClasses</error>
    </parse_markers>
    <namespace-alias name="Tableau">\GoTableaux\Proof\Tableau</namespace-alias>
    <namespace-alias name="Argument">\GoTableaux\Argument</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\S5" line="33" package="Logics">
      <name>ProofSystem</name>
      <full_name>\GoTableaux\Logic\S5\ProofSystem</full_name>
      <extends>\GoTableaux\Logic\K\ProofSystem</extends>
      <docblock line="28">
        <description><![CDATA[Represents the Tableaux system for S5.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="28" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="35" package="Default">
        <name>$ruleClasses</name>
        <default><![CDATA[array(
		'K.Closure',
		'Symmetric',
		'S4.Transitive',
		'T.Reflexive',
		'K.Conjunction',
		'K.NegatedConjunction',
		'K.Disjunction',
		'K.NegatedDisjunction',
		'K.MaterialConditional',
		'K.NegatedMaterialConditional',
		'K.MaterialBiconditional',
		'K.NegatedMaterialBiconditional',
		'K.DoubleNegation',
		'K.Possibility',
		'K.NegatedPossibility',
		'K.Necessity',
		'K.NegatedNecessity',
	)]]></default>
      </property>
    </class>
  </file>
  <file path="Logic/S5.php" hash="5b7c6c22df9294b498852ed78fbe399a" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $title</error>
      <error line="32" code="50018">No DocBlock was found for property $inheritOperatorsFrom</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic" line="28" package="Logics">
      <name>S5</name>
      <full_name>\GoTableaux\Logic\S5</full_name>
      <extends>\GoTableaux\Logic</extends>
      <docblock line="24">
        <description><![CDATA[Represents normal modal logic with reflexive, symmetric, and transitive access relation.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$title</name>
        <default><![CDATA['S5 Normal Modal Logic']]></default>
      </property>
      <property final="false" static="false" visibility="public" line="32" package="Default">
        <name>$inheritOperatorsFrom</name>
        <default><![CDATA['K']]></default>
      </property>
    </class>
  </file>
  <file path="Logic/StrongKleene/ProofSystem/Rule/Closure.php" hash="6ef6af4eb0eb7c88a7c210bd1eb3e63b" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="33" code="50010">No DocBlock was found for method appliesToBranch()</error>
      <error line="43" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $branch in buildExample()</error>
    </parse_markers>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\StrongKleene\ProofSystem\Rule" line="31" package="Logics">
      <name>Closure</name>
      <full_name>\GoTableaux\Logic\StrongKleene\ProofSystem\Rule\Closure</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Closure</extends>
      <docblock line="27">
        <description><![CDATA[Represents the K3 closure rule.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="Logics"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\StrongKleene\ProofSystem\Rule" line="33" package="">
        <name>appliesToBranch</name>
        <type>function</type>
        <argument line="33">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="33">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\StrongKleene\ProofSystem\Rule" line="50" package="">
        <name>buildExample</name>
        <type>function</type>
        <docblock line="43">
          <description><![CDATA[Builds an example branch for the rule.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="param" description="The branch to build." type="\GoTableaux\Logic\StrongKleene\ProofSystem\Rule\TableauBrach" variable="$branch">
            <type by_reference="false">\GoTableaux\Logic\StrongKleene\ProofSystem\Rule\TableauBrach</type>
          </tag>
          <tag line="43" name="param" description="The logic." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="43" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="50">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/StrongKleene/ProofSystem.php" hash="c48a23806adb7bf4d145ab09deed20a7" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $ruleClasses</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\StrongKleene" line="28" package="Logics">
      <name>ProofSystem</name>
      <full_name>\GoTableaux\Logic\StrongKleene\ProofSystem</full_name>
      <extends>\GoTableaux\Logic\FDE\ProofSystem</extends>
      <docblock line="24">
        <description><![CDATA[Represents the K3 tableaux system.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$ruleClasses</name>
        <default><![CDATA[array(
		'Closure',
		'FDE.Closure',
		'FDE.ConjunctionDesignated',
		'FDE.ConjunctionUndesignated',
		'FDE.NegatedConjunctionDesignated',
		'FDE.NegatedConjunctionUndesignated',
		'FDE.DisjunctionDesignated',
		'FDE.DisjunctionUndesignated',
		'FDE.NegatedDisjunctionDesignated',
		'FDE.NegatedDisjunctionUndesignated',
		'FDE.MaterialConditionalDesignated',
		'FDE.MaterialConditionalUndesignated',
		'FDE.NegatedMaterialConditionalDesignated',
		'FDE.NegatedMaterialConditionalUndesignated',
		'FDE.MaterialBiconditionalDesignated',
		'FDE.MaterialBiconditionalUndesignated',
		'FDE.NegatedMaterialBiconditionalDesignated',
		'FDE.NegatedMaterialBiconditionalUndesignated',
		'FDE.DoubleNegationDesignated',
		'FDE.DoubleNegationUndesignated',
	)]]></default>
      </property>
    </class>
  </file>
  <file path="Logic/StrongKleene.php" hash="938f5b9f5165f8fe33428fbf40e710cd" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $title</error>
      <error line="32" code="50018">No DocBlock was found for property $inheritOperatorsFrom</error>
      <error line="34" code="50018">No DocBlock was found for property $externalLinks</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic" line="28" package="Logics">
      <name>StrongKleene</name>
      <full_name>\GoTableaux\Logic\StrongKleene</full_name>
      <extends>\GoTableaux\Logic</extends>
      <docblock line="24">
        <description><![CDATA[Represents Strong Kleene Logic.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$title</name>
        <default><![CDATA['Strong Kleene 3-valued Logic']]></default>
      </property>
      <property final="false" static="false" visibility="public" line="32" package="Default">
        <name>$inheritOperatorsFrom</name>
        <default><![CDATA['FDE']]></default>
      </property>
      <property final="false" static="false" visibility="public" line="34" package="Default">
        <name>$externalLinks</name>
        <default><![CDATA[array(
		'Kleene\'s Three Valued Logics and Their Children (Fitting)' => 'http://comet.lehman.cuny.edu/fitting/bookspapers/pdf/papers/KleeneThree.pdf'
	)]]></default>
      </property>
    </class>
  </file>
  <file path="Logic/T/ProofSystem/Rule/Reflexive.php" hash="11ca86658078d37f652a1028ab3f575d" package="Default">
    <parse_markers>
      <error line="28" code="50010">No DocBlock was found for method appliesToBranch()</error>
      <error line="35" code="50010">No DocBlock was found for method applyToBranch()</error>
      <error line="44" code="50010">No DocBlock was found for method buildExample()</error>
      <critical line="23" code="50005">No short description for class Reflexive</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file Logic/T/ProofSystem/Rule/Reflexive.php</error>
    </parse_markers>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\T\ProofSystem\Rule" line="26" package="Logics">
      <name>Reflexive</name>
      <full_name>\GoTableaux\Logic\T\ProofSystem\Rule\Reflexive</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Branch</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="23" name="package" description="Logics"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\T\ProofSystem\Rule" line="28" package="">
        <name>appliesToBranch</name>
        <type>function</type>
        <argument line="28">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="28">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\T\ProofSystem\Rule" line="35" package="">
        <name>applyToBranch</name>
        <type>function</type>
        <argument line="35">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="35">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Logic\T\ProofSystem\Rule" line="44" package="">
        <name>buildExample</name>
        <type>function</type>
        <argument line="44">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
        <argument line="44">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logic/T/ProofSystem.php" hash="69d8c52cab2666213acbe3a6d9688289" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="35" code="50018">No DocBlock was found for property $ruleClasses</error>
    </parse_markers>
    <namespace-alias name="Tableau">\GoTableaux\Proof\Tableau</namespace-alias>
    <namespace-alias name="Argument">\GoTableaux\Argument</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Logic\T" line="33" package="Logics">
      <name>ProofSystem</name>
      <full_name>\GoTableaux\Logic\T\ProofSystem</full_name>
      <extends>\GoTableaux\Logic\K\ProofSystem</extends>
      <docblock line="28">
        <description><![CDATA[Represents the Tableaux system for T.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="28" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="35" package="Default">
        <name>$ruleClasses</name>
        <default><![CDATA[array(
		'K.Closure',
		'Reflexive',
		'K.Conjunction',
		'K.NegatedConjunction',
		'K.Disjunction',
		'K.NegatedDisjunction',
		'K.MaterialConditional',
		'K.NegatedMaterialConditional',
		'K.MaterialBiconditional',
		'K.NegatedMaterialBiconditional',
		'K.DoubleNegation',
		'K.Possibility',
		'K.NegatedPossibility',
		'K.Necessity',
		'K.NegatedNecessity',
	)]]></default>
      </property>
    </class>
  </file>
  <file path="Logic/T.php" hash="0a80d92ad8e9dc573675cf101679c337" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $title</error>
      <error line="32" code="50018">No DocBlock was found for property $inheritOperatorsFrom</error>
      <error line="34" code="50018">No DocBlock was found for property $externalLinks</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\Logic" line="28" package="Logics">
      <name>T</name>
      <full_name>\GoTableaux\Logic\T</full_name>
      <extends>\GoTableaux\Logic</extends>
      <docblock line="24">
        <description><![CDATA[Represents normal modal logic with reflexive access relation.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="Logics"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$title</name>
        <default><![CDATA['T Normal Modal Logic']]></default>
      </property>
      <property final="false" static="false" visibility="public" line="32" package="Default">
        <name>$inheritOperatorsFrom</name>
        <default><![CDATA['K']]></default>
      </property>
      <property final="false" static="false" visibility="public" line="34" package="Default">
        <name>$externalLinks</name>
        <default><![CDATA[array(
		'Stanford Encyclopedia' => 'http://plato.stanford.edu/entries/logic-modal/'
	)]]></default>
      </property>
    </class>
  </file>
  <file path="Logic.php" hash="ff56d167856c4b926d5388b536bac580" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="33" code="50018">No DocBlock was found for property $title</error>
      <error line="35" code="50018">No DocBlock was found for property $inheritOperatorsFrom</error>
      <error line="37" code="50018">No DocBlock was found for property $operatorArities</error>
      <error line="39" code="50018">No DocBlock was found for property $externalLinks</error>
      <error line="41" code="50018">No DocBlock was found for property $operators</error>
      <error line="43" code="50018">No DocBlock was found for property $sentences</error>
      <error line="127" code="50010">No DocBlock was found for method getProofWriter()</error>
      <error line="145" code="50010">No DocBlock was found for method getOperators()</error>
      <error line="150" code="50010">No DocBlock was found for method getOperatorNames()</error>
    </parse_markers>
    <namespace-alias name="AtomicSentence">\GoTableaux\Sentence\Atomic</namespace-alias>
    <namespace-alias name="MolecularSentence">\GoTableaux\Sentence\Molecular</namespace-alias>
    <class final="false" abstract="true" namespace="GoTableaux" line="31" package="GoTableaux">
      <name>Logic</name>
      <full_name>\GoTableaux\Logic</full_name>
      <extends/>
      <docblock line="27">
        <description><![CDATA[Represents a Logic.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="33" package="Default">
        <name>$title</name>
        <default><![CDATA['']]></default>
      </property>
      <property final="false" static="false" visibility="public" line="35" package="Default">
        <name>$inheritOperatorsFrom</name>
        <default><![CDATA[null]]></default>
      </property>
      <property final="false" static="false" visibility="public" line="37" package="Default">
        <name>$operatorArities</name>
        <default><![CDATA[array()]]></default>
      </property>
      <property final="false" static="false" visibility="public" line="39" package="Default">
        <name>$externalLinks</name>
        <default><![CDATA[array()]]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="41" package="Default">
        <name>$operators</name>
        <default><![CDATA[array()]]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="43" package="Default">
        <name>$sentences</name>
        <default><![CDATA[array()]]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="50" package="Default">
        <name>$proofSystem</name>
        <default><![CDATA[]]></default>
        <docblock line="45">
          <description><![CDATA[Holds a reference to the proof system.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="var" description="" type="\GoTableaux\ProofSystem">
            <type by_reference="false">\GoTableaux\ProofSystem</type>
          </tag>
          <tag line="45" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="57" package="Default">
        <name>$instances</name>
        <default><![CDATA[array()]]></default>
        <docblock line="52">
          <description><![CDATA[Holds the singleton instances of the logics.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="52" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="67" package="">
        <name>getInstance</name>
        <type>function</type>
        <docblock line="59">
          <description><![CDATA[Gets the singleton instance of a particular logic.]]></description>
          <long-description><![CDATA[<p>If the logic class is not loaded, it will attempt to load automatically.</p>]]></long-description>
          <tag line="59" name="param" description="The name of the logic." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="59" name="return" description="The instance of the logic." type="\GoTableaux\Logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
        </docblock>
        <argument line="67">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="true" abstract="false" static="false" visibility="private" namespace="GoTableaux" line="79" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="76">
          <description><![CDATA[Constructor. Final & private, for forcing single instances for each logic.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="101" package="">
        <name>getName</name>
        <type>function</type>
        <docblock line="96">
          <description><![CDATA[Gets the name of the Logic.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="96" name="return" description="The name of the logic." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="112" package="">
        <name>getParser</name>
        <type>function</type>
        <docblock line="106">
          <description><![CDATA[Gets a new sentence parser of the specified type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="106" name="param" description="Type of parser to instantiate. Default is 'Standard'." type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="106" name="return" description="The initialized sentence parser." type="\GoTableaux\SentenceParser">
            <type by_reference="false">\GoTableaux\SentenceParser</type>
          </tag>
        </docblock>
        <argument line="112">
          <name>$type</name>
          <default><![CDATA['Standard']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="122" package="">
        <name>getProofSystem</name>
        <type>function</type>
        <docblock line="117">
          <description><![CDATA[Gets the proof system.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="117" name="return" description="The logic's proof system." type="\GoTableaux\ProofSystem">
            <type by_reference="false">\GoTableaux\ProofSystem</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="127" package="">
        <name>getProofWriter</name>
        <type>function</type>
        <argument line="127">
          <name>$output</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="127">
          <name>$notation</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="127">
          <name>$format</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="138" package="">
        <name>getOperator</name>
        <type>function</type>
        <docblock line="132">
          <description><![CDATA[Gets an operator.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="132" name="param" description="The name of the operator." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="132" name="return" description="The operator object." type="\GoTableaux\Operator">
            <type by_reference="false">\GoTableaux\Operator</type>
          </tag>
        </docblock>
        <argument line="138">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="145" package="">
        <name>getOperators</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="150" package="">
        <name>getOperatorNames</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="162" package="">
        <name>parseSentence</name>
        <type>function</type>
        <docblock line="155">
          <description><![CDATA[Parses a sentence string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="155" name="param" description="The sentence string to parse." type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="155" name="param" description="The parser type to do the parsing. Default is 'Standard'." type="string" variable="$parserType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="155" name="return" description="The sentence instance, registered in the logic's vocabulary." type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
        </docblock>
        <argument line="162">
          <name>$string</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="162">
          <name>$parserType</name>
          <default><![CDATA['Standard']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="175" package="">
        <name>parseSentences</name>
        <type>function</type>
        <docblock line="168">
          <description><![CDATA[Parses an array of sentence strings.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="168" name="param" description="Array of sentence strings to parse." type="array" variable="$strings">
            <type by_reference="false">array</type>
          </tag>
          <tag line="168" name="param" description="The parser type to do the parsing. Default is 'Standard'." type="string" variable="$notation">
            <type by_reference="false">string</type>
          </tag>
          <tag line="168" name="return" description="Array of {@link Sentence}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="175">
          <name>$strings</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="175">
          <name>$notation</name>
          <default><![CDATA['Standard']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="191" package="">
        <name>parseArgument</name>
        <type>function</type>
        <docblock line="183">
          <description><![CDATA[Parses an argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="183" name="param" description="The premise string(s)." type="string|array" variable="$premiseStrings">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="183" name="param" description="Non-empty conclusion string." type="string" variable="$conclusionString">
            <type by_reference="false">string</type>
          </tag>
          <tag line="183" name="param" description="The parser type to do the parsing. Default is 'Standard'." type="string" variable="$notation">
            <type by_reference="false">string</type>
          </tag>
          <tag line="183" name="return" description="The argument instance." type="\GoTableaux\Argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
        </docblock>
        <argument line="191">
          <name>$premiseStrings</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="191">
          <name>$conclusionString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="191">
          <name>$notation</name>
          <default><![CDATA['Standard']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="204" package="">
        <name>constructProofForArgument</name>
        <type>function</type>
        <docblock line="198">
          <description><![CDATA[Builds a proof for an argument with the proof system.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="198" name="param" description="The argument for which to build the proof." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="198" name="return" description="$proof The resulting (putative) proof." type="\GoTableaux\Proof">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
        </docblock>
        <argument line="204">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="218" package="">
        <name>applyOperatorToOperands</name>
        <type>function</type>
        <docblock line="209">
          <description><![CDATA[Applies an operator to some operands to generate a new sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="209" name="param" description="The name of the operator, or the operator object." type="string|\GoTableaux\Operator" variable="$operatorOrName">
            <type by_reference="false">string</type>
            <type by_reference="false">\GoTableaux\Operator</type>
          </tag>
          <tag line="209" name="param" description="The sentence(s) to which to apply the operator." type="array|\GoTableaux\Sentence" variable="$operands">
            <type by_reference="false">array</type>
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="209" name="return" description="The resulting sentence." type="\Sentence\Molecular">
            <type by_reference="false">\Sentence\Molecular</type>
          </tag>
          <tag line="209" name="throws" description="on type error." type="\GoTableaux\Exception">
            <type by_reference="false">\GoTableaux\Exception</type>
          </tag>
        </docblock>
        <argument line="218">
          <name>$operatorOrName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="218">
          <name>$operands</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="238" package="">
        <name>negate</name>
        <type>function</type>
        <docblock line="230">
          <description><![CDATA[Negates a sentence.]]></description>
          <long-description><![CDATA[<p>Requires an operator named 'Negation' in the language.</p>]]></long-description>
          <tag line="230" name="param" description="The sentence to negate." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="230" name="return" description="The negated sentence." type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
        </docblock>
        <argument line="238">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="253" package="">
        <name>registerSentence</name>
        <type>function</type>
        <docblock line="243">
          <description><![CDATA[Adds a sentence to the vocabulary, maintaining uniqueness.]]></description>
          <long-description><![CDATA[<p>If the sentence, or one of the same form is already in the set of sentences,
then that sentence is returned. Otherwise the passed sentence is
returned.</p>]]></long-description>
          <tag line="243" name="param" description="The sentence to add." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="243" name="return" description="Old or new sentence." type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
        </docblock>
        <argument line="253">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="274" package="">
        <name>getSentences</name>
        <type>function</type>
        <docblock line="269">
          <description><![CDATA[Gets the set of sentences.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="269" name="return" description="The sentences." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Model.php" hash="2bd9768e644bf2603ab599eb70501a78" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux" line="28" package="GoTableaux">
      <name>Model</name>
      <full_name>\GoTableaux\Model</full_name>
      <extends/>
      <docblock line="24">
        <description><![CDATA[Represents model-theoretic model.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
    </class>
  </file>
  <file path="Operator.php" hash="9609e17fff8b4a3acc6ec8849064620d" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="VocabularyException">\GoTableaux\Exception\Vocabulary</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux" line="31" package="GoTableaux">
      <name>Operator</name>
      <full_name>\GoTableaux\Operator</full_name>
      <extends/>
      <docblock line="26">
        <description><![CDATA[Represents an operator.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="26" name="package" description="GoTableaux"/>
        <tag line="26" name="see" description="\GoTableaux\Vocabulary::createOperator()" refers="\GoTableaux\Vocabulary::createOperator()"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="38" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="33">
          <description><![CDATA[Holds the name of the operator.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="33" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="45" package="Default">
        <name>$arity</name>
        <default><![CDATA[]]></default>
        <docblock line="40">
          <description><![CDATA[Holds the arity of the operator.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="40" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="55" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="47">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="param" description="The human name of the operator, e.g. 'Conjunction'." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="47" name="param" description="The arity of the operator." type="integer" variable="$arity">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="47" name="throws" description="VobabularyException} on parameter errors." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
          <tag line="47" name="see" description="\GoTableaux\Vocabulary::createOperator()" refers="\GoTableaux\Vocabulary::createOperator()"/>
        </docblock>
        <argument line="55">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="55">
          <name>$arity</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="70" package="">
        <name>getName</name>
        <type>function</type>
        <docblock line="65">
          <description><![CDATA[Gets the name of the operator.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="return" description="The human name of the operator, e.g. 'Conjunction'." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="80" package="">
        <name>getArity</name>
        <type>function</type>
        <docblock line="75">
          <description><![CDATA[Gets the arity of the operator.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="75" name="return" description="The arity of the operator." type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Proof/Tableau.php" hash="3079223d28346fb4f449a6297e2ff43a" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="TableauException">\GoTableaux\Exception\Tableau</namespace-alias>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <namespace-alias name="EventHandler">\GoTableaux\EventHandler</namespace-alias>
    <namespace-alias name="Rule">\GoTableaux\ProofSystem\TableauxSystem\Rule</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Proof" line="36" package="GoTableaux">
      <name>Tableau</name>
      <full_name>\GoTableaux\Proof\Tableau</full_name>
      <extends>\GoTableaux\Proof</extends>
      <docblock line="29">
        <description><![CDATA[Represents a tableau for an argument.]]></description>
        <long-description><![CDATA[<p>Core events: afterCreateBranch</p>]]></long-description>
        <tag line="29" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="42" package="Default">
        <name>$metaSymbolNames</name>
        <default><![CDATA[array( 'closeMarker' )]]></default>
        <docblock line="38">
          <description><![CDATA[Meta symbol names required by the node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="48" package="Default">
        <name>$finished</name>
        <default><![CDATA[false]]></default>
        <docblock line="44">
          <description><![CDATA[Holds whether the tableau is finished.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="54" package="Default">
        <name>$branches</name>
        <default><![CDATA[array()]]></default>
        <docblock line="50">
          <description><![CDATA[Holds the branches on the tree.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="60" package="Default">
        <name>$lastRule</name>
        <default><![CDATA[]]></default>
        <docblock line="56">
          <description><![CDATA[Holds a reference to the last rule applied.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="var" description="The last rule applied." type="\GoTableaux\ProofSystem\TableauxSystem\Rule">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem\Rule</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="67" package="">
        <name>createBranch</name>
        <type>function</type>
        <docblock line="62">
          <description><![CDATA[Creates a new branch and attaches it to the tableau.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="62" name="return" description="The created instance." type="\GoTableaux\Proof\Branch">
            <type by_reference="false">\GoTableaux\Proof\Branch</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="82" package="">
        <name>attach</name>
        <type>function</type>
        <docblock line="74">
          <description><![CDATA[Attaches one or more branches to the tree.]]></description>
          <long-description><![CDATA[<p>Ignores branches that are already on the tree.</p>]]></long-description>
          <tag line="74" name="param" description="The branch or array of branches to add." type="\GoTableaux\Proof\Branch|array" variable="$branches">
            <type by_reference="false">\GoTableaux\Proof\Branch</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="74" name="return" description="Current instance." type="\GoTableaux\Proof\Tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
        </docblock>
        <argument line="82">
          <name>$branches</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="101" package="">
        <name>getBranches</name>
        <type>function</type>
        <docblock line="96">
          <description><![CDATA[Gets all branches on the tree.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="96" name="return" description="Array of {@link Branch}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="111" package="">
        <name>getOpenBranches</name>
        <type>function</type>
        <docblock line="106">
          <description><![CDATA[Gets all open branches on the tree.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="106" name="return" description="Array of {@link Branch} objects." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="121" package="">
        <name>hasOpenBranches</name>
        <type>function</type>
        <docblock line="116">
          <description><![CDATA[Checks whether there are any open branches on the tree.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="116" name="return" description="Whether there are any open branches." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="133" package="">
        <name>isClosed</name>
        <type>function</type>
        <docblock line="126">
          <description><![CDATA[Checks whether the tableau is closed.]]></description>
          <long-description><![CDATA[<p>A tableau is closed when it has no open branches.</p>]]></long-description>
          <tag line="126" name="return" description="Whether the tableau is closed." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="146" package="">
        <name>isFinished</name>
        <type>function</type>
        <docblock line="138">
          <description><![CDATA[Checks whether the tableau is finished.]]></description>
          <long-description><![CDATA[<p>A tableau is finished iff it is closed or marked as finished. Marking as
finished is useful for stopper rules to prevent infinite tableaux.</p>]]></long-description>
          <tag line="138" name="return" description="Whether the tableau is finished." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="160" package="">
        <name>finish</name>
        <type>function</type>
        <docblock line="152">
          <description><![CDATA[Marks a tableau as finished.]]></description>
          <long-description><![CDATA[<p>A tableau is finished iff it is closed or marked as finished. Marking as
finished is useful for stopper rules to prevent infinite tableaux.</p>]]></long-description>
          <tag line="152" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="171" package="">
        <name>detach</name>
        <type>function</type>
        <docblock line="165">
          <description><![CDATA[Removes one or more branches from the tree.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="165" name="param" description="The branch or array of branches to remove." type="\GoTableaux\Proof\Branch|array" variable="$branches">
            <type by_reference="false">\GoTableaux\Proof\Branch</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="165" name="return" description="Current instance." type="\GoTableaux\Proof\Tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
        </docblock>
        <argument line="171">
          <name>$branches</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="186" package="">
        <name>clearBranches</name>
        <type>function</type>
        <docblock line="181">
          <description><![CDATA[Clears all branches from the tree.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="181" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="196" package="">
        <name>getStructure</name>
        <type>function</type>
        <docblock line="191">
          <description><![CDATA[Gets the tableau's tree structure representation.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="191" name="return" description="The tree structure." type="\GoTableaux\Proof\Structure">
            <type by_reference="false">\GoTableaux\Proof\Structure</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="206" package="">
        <name>copy</name>
        <type>function</type>
        <docblock line="201">
          <description><![CDATA[Copies the tree and all its branches.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="201" name="return" description="The cloned tree." type="\GoTableaux\Proof\Tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="223" package="">
        <name>setLastRule</name>
        <type>function</type>
        <docblock line="217">
          <description><![CDATA[Sets the last rule applied.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="217" name="param" description="The last rule that applied." type="\GoTableaux\ProofSystem\TableauxSystem\Rule" variable="$rule">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem\Rule</type>
          </tag>
          <tag line="217" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="223">
          <name>$rule</name>
          <default><![CDATA[]]></default>
          <type>Rule</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="233" package="">
        <name>getLastRule</name>
        <type>function</type>
        <docblock line="228">
          <description><![CDATA[Gets the last rule applied.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="228" name="return" description="The last rule applied, or null if none set." type="\GoTableaux\ProofSystem\TableauxSystem\Rule|null">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem\Rule</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Proof/TableauBranch.php" hash="e62f272e62d652cf5e8a97615bcdffe2" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Sentence">\GoTableaux\Sentence</namespace-alias>
    <namespace-alias name="EventHandler">\GoTableaux\EventHandler</namespace-alias>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Proof" line="36" package="GoTableaux">
      <name>TableauBranch</name>
      <full_name>\GoTableaux\Proof\TableauBranch</full_name>
      <extends/>
      <docblock line="29">
        <description><![CDATA[Represents a tableau branch.]]></description>
        <long-description><![CDATA[<p>Core events: beforeAddNode, afterAddNode.</p>]]></long-description>
        <tag line="29" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="42" package="Default">
        <name>$nodes</name>
        <default><![CDATA[array()]]></default>
        <docblock line="38">
          <description><![CDATA[Holds the nodes of the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="48" package="Default">
        <name>$tickedNodes</name>
        <default><![CDATA[array()]]></default>
        <docblock line="44">
          <description><![CDATA[Tracks the ticked nodes relative to the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="54" package="Default">
        <name>$closed</name>
        <default><![CDATA[false]]></default>
        <docblock line="50">
          <description><![CDATA[Tracks whether the branch is closed.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="60" package="Default">
        <name>$tableau</name>
        <default><![CDATA[]]></default>
        <docblock line="56">
          <description><![CDATA[Holds a reference to the tableau.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="var" description="" type="\GoTableaux\Proof\Tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="66" package="Default">
        <name>$listeners</name>
        <default><![CDATA[array()]]></default>
        <docblock line="62">
          <description><![CDATA[Holds the listeners.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="62" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="72" package="Default">
        <name>$_listenerCount</name>
        <default><![CDATA[0]]></default>
        <docblock line="68">
          <description><![CDATA[Counts the listeners as they are added, to make an id.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="68" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="81" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="74">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[<p>Initializes the tableau.</p>]]></long-description>
          <tag line="74" name="param" description="The tableau of the branch." type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="92" package="">
        <name>getTableau</name>
        <type>function</type>
        <docblock line="87">
          <description><![CDATA[Gets the tableau.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="87" name="return" description="The tableau." type="\GoTableaux\Proof\Tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="102" package="">
        <name>getNodes</name>
        <type>function</type>
        <docblock line="97">
          <description><![CDATA[Gets the nodes on the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="97" name="return" description="The {@link TableauNode nodes}." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="112" package="">
        <name>getTickedNodes</name>
        <type>function</type>
        <docblock line="107">
          <description><![CDATA[Gets all nodes on the branch that are ticked relative to the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="107" name="return" description="Array of {@link TableauNode}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="122" package="">
        <name>getUntickedNodes</name>
        <type>function</type>
        <docblock line="117">
          <description><![CDATA[Gets all the nodes on the branch that are not ticked relative to the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="117" name="return" description="The unticked nodes." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="133" package="">
        <name>getNodesByClassName</name>
        <type>function</type>
        <docblock line="127">
          <description><![CDATA[Gets all nodes that have certain class name.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="127" name="param" description="The class(es)." type="array|string" variable="$classes">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="127" name="return" description="The nodes on the branch that are of all the classes." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="133">
          <name>$classes</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="147" package="">
        <name>close</name>
        <type>function</type>
        <docblock line="142">
          <description><![CDATA[Closes the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="142" name="return" description="Current instance." type="\GoTableaux\Proof\TableauBranch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="158" package="">
        <name>isClosed</name>
        <type>function</type>
        <docblock line="153">
          <description><![CDATA[Checks whether the branch is closed.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="153" name="return" description="Whether the branch is closed." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="168" package="">
        <name>isOpen</name>
        <type>function</type>
        <docblock line="163">
          <description><![CDATA[Checks whether the branch is open.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="163" name="return" description="Whether the branch is open." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="179" package="">
        <name>hasNode</name>
        <type>function</type>
        <docblock line="173">
          <description><![CDATA[Checks whether a node is on the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="173" name="param" description="The node to check." type="\GoTableaux\Proof\TableauNode" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
          <tag line="173" name="return" description="Whether the node is on the branch." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="179">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>TableauNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="189" package="">
        <name>copy</name>
        <type>function</type>
        <docblock line="184">
          <description><![CDATA[Clones the branch. Maintains references to the nodes.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="184" name="return" description="The new copy." type="\GoTableaux\Proof\TableauBranch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="204" package="">
        <name>branch</name>
        <type>function</type>
        <docblock line="196">
          <description><![CDATA[Branches the branch.]]></description>
          <long-description><![CDATA[<p>Copies the branch, attaches the copy to the tableau, and returns the new
branch.</p>]]></long-description>
          <tag line="196" name="return" description="The new branch" type="\GoTableaux\Proof\TableauBranch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="223" package="">
        <name>find</name>
        <type>function</type>
        <docblock line="211">
          <description><![CDATA[Finds nodes on the branch matching the given conditions.]]></description>
          <long-description><![CDATA[<p>The default parameters for the conditions are 'class' Each node class provides a filter function which returns false when the
node fails to meet the conditions provided.</p>]]></long-description>
          <tag line="211" name="param" description="Wether to return one or all results ('all' or 'one')." type="string" variable="$ret">
            <type by_reference="false">string</type>
          </tag>
          <tag line="211" name="param" description="The conditions to apply." type="array" variable="$conditions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="211" name="return" description="The results depending on $ret." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="211" name="throws" description="on an invalid $ret value." type="\ErrorException">
            <type by_reference="false">\ErrorException</type>
          </tag>
          <tag line="211" name="see" description="\GoTableaux\Proof\TableauNode::filter()" refers="\GoTableaux\Proof\TableauNode::filter()"/>
        </docblock>
        <argument line="223">
          <name>$ret</name>
          <default><![CDATA['all']]></default>
          <type/>
        </argument>
        <argument line="223">
          <name>$conditions</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="259" package="">
        <name>tickNode</name>
        <type>function</type>
        <docblock line="253">
          <description><![CDATA[Ticks a node relative to the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="253" name="param" description="The node to tick." type="\GoTableaux\Proof\TableauNode" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
          <tag line="253" name="return" description="Current instance." type="\GoTableaux\Proof\TableauBranch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
        </docblock>
        <argument line="259">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>TableauNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="271" package="">
        <name>untickNode</name>
        <type>function</type>
        <docblock line="265">
          <description><![CDATA[Unticks a node relative to the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="265" name="param" description="The node to untick." type="\GoTableaux\Proof\TableauNode" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
          <tag line="265" name="return" description="" type="\GoTableaux\Proof\TableauBranch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
        </docblock>
        <argument line="271">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>TableauNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="283" package="">
        <name>nodeIsTicked</name>
        <type>function</type>
        <docblock line="277">
          <description><![CDATA[Determines whether a node is ticked relative to the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="277" name="param" description="The node to check." type="\GoTableaux\Proof\TableauNode" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
          <tag line="277" name="return" description="Whether the node is ticked relative to the branch." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="283">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>TableauNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="294" package="">
        <name>addNode</name>
        <type>function</type>
        <docblock line="288">
          <description><![CDATA[Adds a node to the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="288" name="param" description="The node to add." type="\GoTableaux\Proof\TableauNode" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
          <tag line="288" name="return" description="Current instance." type="\GoTableaux\Proof\TableauBranch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
        </docblock>
        <argument line="294">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>TableauNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="310" package="">
        <name>removeNode</name>
        <type>function</type>
        <docblock line="303">
          <description><![CDATA[Removes all references to a node from the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="303" name="param" description="The node to remove. If the node is on the branch in multiple places, each reference is removed." type="\GoTableaux\Proof\TableauNode" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
          <tag line="303" name="return" description="Current instance." type="\GoTableaux\Proof\TableauBranch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
        </docblock>
        <argument line="310">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>TableauNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="323" package="">
        <name>createNode</name>
        <type>function</type>
        <docblock line="316">
          <description><![CDATA[Creates a node on the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="316" name="param" description="The node class(es) to instantiate." type="string|array" variable="$classes">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="316" name="param" description="The properties of the node." type="array" variable="$properties">
            <type by_reference="false">array</type>
          </tag>
          <tag line="316" name="return" description="Current instance." type="\GoTableaux\Proof\TableauBranch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
        </docblock>
        <argument line="323">
          <name>$classes</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="323">
          <name>$properties</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="341" package="">
        <name>getIndexes</name>
        <type>function</type>
        <docblock line="336">
          <description><![CDATA[Gets all the indexes that appear on the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="336" name="return" description="The indexes on the branch." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="360" package="">
        <name>newIndex</name>
        <type>function</type>
        <docblock line="355">
          <description><![CDATA[Gets an index that does not appear on the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="355" name="return" description="An index new to the branch." type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Proof/TableauNode/Access.php" hash="421d678caba406b4dc8766525118a315" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="TableauException">\GoTableaux\Exception\Tableau</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Proof\TableauNode" line="31" package="GoTableaux">
      <name>Access</name>
      <full_name>\GoTableaux\Proof\TableauNode\Access</full_name>
      <extends>\GoTableaux\Proof\TableauNode\Modal</extends>
      <docblock line="27">
        <description><![CDATA[Represents a modal logic access relation node.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="37" package="Default">
        <name>$metaSymbolNames</name>
        <default><![CDATA[array( 'accessRelationSymbol' )]]></default>
        <docblock line="33">
          <description><![CDATA[Meta symbol names required by the node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="43" package="Default">
        <name>$forceClassOnConditions</name>
        <default><![CDATA[array( 'j' )]]></default>
        <docblock line="39">
          <description><![CDATA[States which filter conditions should enforce a node to be this class.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="50" package="Default">
        <name>$j</name>
        <default><![CDATA[]]></default>
        <docblock line="45">
          <description><![CDATA[Holds a reference to the seen world index.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="45" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="59" package="">
        <name>setProperties</name>
        <type>function</type>
        <docblock line="52">
          <description><![CDATA[Sets the node properties.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="param" description="The properties." type="array" variable="$properties">
            <type by_reference="false">array</type>
          </tag>
          <tag line="52" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="52" name="throws" description="when no second index is given." type="\GoTableaux\Exception\Tableau">
            <type by_reference="false">\GoTableaux\Exception\Tableau</type>
          </tag>
        </docblock>
        <argument line="59">
          <name>$properties</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="80" package="">
        <name>filter</name>
        <type>function</type>
        <docblock line="67">
          <description><![CDATA[Determines whether the node passes the given conditions.]]></description>
          <long-description><![CDATA[<p>This is called, for example, when querying a branch for particular nodes.
Direct children should first check $this->node->filter(), and return
false if it does, otherwise continue with filtering. Further descendants
should likewise check parent::filter().</p>]]></long-description>
          <tag line="67" name="param" description="A hash of the conditions to pass." type="array" variable="$conditions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="67" name="param" description="The logic." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="67" name="return" description="Wether the node passes (i.e. is not ruled out by) the conditions." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="67" name="see" description="\GoTableaux\Proof\TableauNode\TableauBranch::find()" refers="\GoTableaux\Proof\TableauNode\TableauBranch::find()"/>
        </docblock>
        <argument line="80">
          <name>$conditions</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="80">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="92" package="">
        <name>setJ</name>
        <type>function</type>
        <docblock line="86">
          <description><![CDATA[Sets the second index.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="86" name="param" description="The second index." type="integer" variable="$j">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="86" name="return" description="Current instance." type="\GoTableaux\Proof\TableauNode\AccessNode">
            <type by_reference="false">\GoTableaux\Proof\TableauNode\AccessNode</type>
          </tag>
        </docblock>
        <argument line="92">
          <name>$j</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="102" package="">
        <name>getJ</name>
        <type>function</type>
        <docblock line="97">
          <description><![CDATA[Gets the second index.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="97" name="return" description="The second index." type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Proof/TableauNode/ManyValued.php" hash="5930424e23dc7c3d6912324ac2b04911" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="TableauException">\GoTableaux\Exception\Tableau</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Proof\TableauNode" line="31" package="GoTableaux">
      <name>ManyValued</name>
      <full_name>\GoTableaux\Proof\TableauNode\ManyValued</full_name>
      <extends>\GoTableaux\Proof\TableauNode</extends>
      <docblock line="27">
        <description><![CDATA[Signifies a many-valued tableau node that has a designation marker.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="37" package="Default">
        <name>$metaSymbolNames</name>
        <default><![CDATA[array( 'designatedMarker', 'undesignatedMarker' )]]></default>
        <docblock line="33">
          <description><![CDATA[Meta symbol names required by the node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="43" package="Default">
        <name>$forceClassOnConditions</name>
        <default><![CDATA[array( 'designated' )]]></default>
        <docblock line="39">
          <description><![CDATA[States which filter conditions should enforce a node to be this class.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="49" package="Default">
        <name>$designated</name>
        <default><![CDATA[]]></default>
        <docblock line="45">
          <description><![CDATA[Holds the designation]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="57" package="">
        <name>setProperties</name>
        <type>function</type>
        <docblock line="51">
          <description><![CDATA[Sets the node properties.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="param" description="The properties." type="array" variable="$properties">
            <type by_reference="false">array</type>
          </tag>
          <tag line="51" name="throws" description="when no designation is given." type="\GoTableaux\Exception\Tableau">
            <type by_reference="false">\GoTableaux\Exception\Tableau</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$properties</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="78" package="">
        <name>filter</name>
        <type>function</type>
        <docblock line="65">
          <description><![CDATA[Determines whether the node passes the given conditions.]]></description>
          <long-description><![CDATA[<p>This is called, for example, when querying a branch for particular nodes.
Direct children should first check $this->node->filter(), and return
false if it does, otherwise continue with filtering. Further descendants
should likewise check parent::filter().</p>]]></long-description>
          <tag line="65" name="param" description="A hash of the conditions to pass." type="array" variable="$conditions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="65" name="param" description="The logic." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="65" name="return" description="Wether the node passes (i.e. is not ruled out by) the conditions." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="65" name="see" description="\GoTableaux\Proof\TableauNode\TableauBranch::find()" refers="\GoTableaux\Proof\TableauNode\TableauBranch::find()"/>
        </docblock>
        <argument line="78">
          <name>$conditions</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="78">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="89" package="">
        <name>isDesignated</name>
        <type>function</type>
        <docblock line="84">
          <description><![CDATA[Returns whether the node is designated.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="84" name="return" description="Whether the node is designated." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="100" package="">
        <name>setDesignation</name>
        <type>function</type>
        <docblock line="94">
          <description><![CDATA[Sets the designation of the node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="94" name="param" description="The designation." type="boolean" variable="$isDesignated">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="94" name="return" description="Current instance." type="\GoTableaux\Proof\TableauNode\ManyValued">
            <type by_reference="false">\GoTableaux\Proof\TableauNode\ManyValued</type>
          </tag>
        </docblock>
        <argument line="100">
          <name>$isDesignated</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Proof/TableauNode/Modal.php" hash="363a895483984f4755485fa3fc00cfcf" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="TableauException">\GoTableaux\Exception\Tableau</namespace-alias>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Proof\TableauNode" line="32" package="GoTableaux">
      <name>Modal</name>
      <full_name>\GoTableaux\Proof\TableauNode\Modal</full_name>
      <extends>\GoTableaux\Proof\TableauNode</extends>
      <docblock line="28">
        <description><![CDATA[Signifies a modal tableau node that has at least one index.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="28" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="38" package="Default">
        <name>$metaSymbolNames</name>
        <default><![CDATA[array( 'worldSymbol' )]]></default>
        <docblock line="34">
          <description><![CDATA[Meta symbol names required by the node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="44" package="Default">
        <name>$forceClassOnConditions</name>
        <default><![CDATA[array( 'i' )]]></default>
        <docblock line="40">
          <description><![CDATA[States which filter conditions should enforce a node to be this class.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="50" package="Default">
        <name>$i</name>
        <default><![CDATA[]]></default>
        <docblock line="46">
          <description><![CDATA[Holds the (first) index.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="57" package="">
        <name>setProperties</name>
        <type>function</type>
        <docblock line="52">
          <description><![CDATA[Sets the node properties.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="param" description="The properties." type="array" variable="$properties">
            <type by_reference="false">array</type>
          </tag>
          <tag line="52" name="throws" description="when no sentence is given." type="\GoTableaux\Exception\Tableau">
            <type by_reference="false">\GoTableaux\Exception\Tableau</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$properties</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="78" package="">
        <name>filter</name>
        <type>function</type>
        <docblock line="65">
          <description><![CDATA[Determines whether the node passes the given conditions.]]></description>
          <long-description><![CDATA[<p>This is called, for example, when querying a branch for particular nodes.
Direct children should first check $this->node->filter(), and return
false if it does, otherwise continue with filtering. Further descendants
should likewise check parent::filter().</p>]]></long-description>
          <tag line="65" name="param" description="A hash of the conditions to pass." type="array" variable="$conditions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="65" name="param" description="The logic." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="65" name="return" description="Wether the node passes (i.e. is not ruled out by) the conditions." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="65" name="see" description="\GoTableaux\Proof\TableauNode\TableauBranch::find()" refers="\GoTableaux\Proof\TableauNode\TableauBranch::find()"/>
        </docblock>
        <argument line="78">
          <name>$conditions</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="78">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="90" package="">
        <name>getI</name>
        <type>function</type>
        <docblock line="85">
          <description><![CDATA[Returns the index, or the first index, of a modal node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="85" name="return" description="The index, or first index of the node." type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="101" package="">
        <name>setI</name>
        <type>function</type>
        <docblock line="95">
          <description><![CDATA[Sets the first index]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="95" name="param" description="The index." type="integer" variable="$i">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="95" name="return" description="Current instance." type="\GoTableaux\Proof\TableauNode\Modal">
            <type by_reference="false">\GoTableaux\Proof\TableauNode\Modal</type>
          </tag>
        </docblock>
        <argument line="101">
          <name>$i</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Proof/TableauNode/Sentence.php" hash="eb8eb968de0fe5ae6c3f7add7cc7a0e8" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Sent">\GoTableaux\Sentence</namespace-alias>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="TableauException">\GoTableaux\Exception\Tableau</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Proof\TableauNode" line="33" package="GoTableaux">
      <name>Sentence</name>
      <full_name>\GoTableaux\Proof\TableauNode\Sentence</full_name>
      <extends>\GoTableaux\Proof\TableauNode</extends>
      <docblock line="29">
        <description><![CDATA[Represents a sentence tableau node.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="29" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="39" package="Default">
        <name>$forceClassOnConditions</name>
        <default><![CDATA[array( 'sentence', 'sentenceForm', 'operator' )]]></default>
        <docblock line="35">
          <description><![CDATA[States which filter conditions should enforce a node to be this class.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="45" package="Default">
        <name>$sentence</name>
        <default><![CDATA[]]></default>
        <docblock line="41">
          <description><![CDATA[Holds a reference to the sentence on the node]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="41" name="var" description="" type="\GoTableaux\Proof\TableauNode\Sentence">
            <type by_reference="false">\GoTableaux\Proof\TableauNode\Sentence</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="52" package="">
        <name>setProperties</name>
        <type>function</type>
        <docblock line="47">
          <description><![CDATA[Sets the node properties.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="param" description="The properties." type="array" variable="$properties">
            <type by_reference="false">array</type>
          </tag>
          <tag line="47" name="throws" description="when no sentence is given." type="\GoTableaux\Exception\Tableau">
            <type by_reference="false">\GoTableaux\Exception\Tableau</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$properties</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="67" package="">
        <name>beforeAttach</name>
        <type>function</type>
        <docblock line="60">
          <description><![CDATA[Registers the node's sentence with the logic's vocabulary before the
node is attached to the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="60" name="param" description="The branch to which the node is to be attached." type="\GoTableaux\Proof\TableauBranch" variable="$branch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
          <tag line="60" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="67">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>Branch</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="90" package="">
        <name>filter</name>
        <type>function</type>
        <docblock line="77">
          <description><![CDATA[Determines whether the node passes the given conditions.]]></description>
          <long-description><![CDATA[<p>This is called, for example, when querying a branch for particular nodes.
Direct children should first check $this->node->filter(), and return
false if it does, otherwise continue with filtering. Further descendants
should likewise check parent::filter().</p>]]></long-description>
          <tag line="77" name="param" description="A hash of the conditions to pass." type="array" variable="$conditions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="77" name="param" description="The logic." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="77" name="return" description="Wether the node passes (i.e. is not ruled out by) the conditions." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="77" name="see" description="\GoTableaux\Proof\TableauNode\TableauBranch::find()" refers="\GoTableaux\Proof\TableauNode\TableauBranch::find()"/>
        </docblock>
        <argument line="90">
          <name>$conditions</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="90">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="117" package="">
        <name>setSentence</name>
        <type>function</type>
        <docblock line="111">
          <description><![CDATA[Sets the sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="111" name="param" description="The sentence to place on the node." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="111" name="return" description="Current instance." type="\GoTableaux\Proof\TableauNode\Sentence">
            <type by_reference="false">\GoTableaux\Proof\TableauNode\Sentence</type>
          </tag>
        </docblock>
        <argument line="117">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sent</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof\TableauNode" line="127" package="">
        <name>getSentence</name>
        <type>function</type>
        <docblock line="122">
          <description><![CDATA[Gets the sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="122" name="return" description="The sentence on the node." type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Proof/TableauNode.php" hash="a8724fdf774773f6dc87dab6f799f3eb" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Proof" line="31" package="GoTableaux">
      <name>TableauNode</name>
      <full_name>\GoTableaux\Proof\TableauNode</full_name>
      <extends/>
      <docblock line="27">
        <description><![CDATA[Represents a node on a branch.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="37" package="Default">
        <name>$metaSymbolNames</name>
        <default><![CDATA[array( 'tickMarker' )]]></default>
        <docblock line="33">
          <description><![CDATA[Meta proof symbol names required by the node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="43" package="Default">
        <name>$node</name>
        <default><![CDATA[]]></default>
        <docblock line="39">
          <description><![CDATA[The node for decorators.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="var" description="" type="\GoTableaux\Proof\TableauNode">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="49" package="Default">
        <name>$master</name>
        <default><![CDATA[]]></default>
        <docblock line="45">
          <description><![CDATA[The decorating node, if any.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="var" description="" type="\GoTableaux\Proof\TableauNode">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="55" package="Default">
        <name>$childClasses</name>
        <default><![CDATA[array()]]></default>
        <docblock line="51">
          <description><![CDATA[The child classes.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux\Proof" line="62" package="">
        <name>getChildClasses</name>
        <type>function</type>
        <docblock line="57">
          <description><![CDATA[Gets all the child classes.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="return" description="The child classes." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux\Proof" line="78" package="">
        <name>induceClassesFromConditions</name>
        <type>function</type>
        <docblock line="73">
          <description><![CDATA[Induces node classes based on which conditions are set.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="param" description="The conditions." type="array" variable="$conditions">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="78">
          <name>$conditions</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="104" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="94">
          <description><![CDATA[Constructor. Initializes decorator.]]></description>
          <long-description><![CDATA[<p>To build a node, first create an instance of TableauNode with empty
arguments, then successively add decorators, each time passing the newly
created node, along with the properties.</p>]]></long-description>
          <tag line="94" name="param" description="The node to decorate." type="\GoTableaux\Proof\TableauNode" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
          <tag line="94" name="param" description="The properties hash of the node." type="array" variable="$properties">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$node</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="104">
          <name>$properties</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="120" package="">
        <name>__call</name>
        <type>function</type>
        <docblock line="113">
          <description><![CDATA[Passes undeclared functions to decorated instance.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="113" name="param" description="The name of the method invoked." type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
          <tag line="113" name="param" description="The passed arguments." type="array" variable="$args">
            <type by_reference="false">array</type>
          </tag>
          <tag line="113" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="120">
          <name>$method</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="120">
          <name>$args</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="134" package="">
        <name>tickAtBranch</name>
        <type>function</type>
        <docblock line="127">
          <description><![CDATA[Ticks the node relative to a branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="127" name="param" description="The branch relative to which to tick the node." type="\GoTableaux\Proof\TableauBranch" variable="$branch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
          <tag line="127" name="return" description="Current instance." type="\GoTableaux\Proof\TableauNode">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
        </docblock>
        <argument line="134">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="146" package="">
        <name>isTickedAtBranch</name>
        <type>function</type>
        <docblock line="140">
          <description><![CDATA[Checks whether the node is ticked relative to a particular branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="140" name="param" description="The branch relative to which to check." type="\GoTableaux\Proof\TableauBranch" variable="$branch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
          <tag line="140" name="return" description="Whether the node is ticked relative to $branch." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="146">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="156" package="">
        <name>getClasses</name>
        <type>function</type>
        <docblock line="151">
          <description><![CDATA[Gets all the classes of the node, including decorated classes.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="151" name="return" description="The classes of the node" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="171" package="">
        <name>hasClass</name>
        <type>function</type>
        <docblock line="165">
          <description><![CDATA[Determines wether the node or its decorated instance has a given class.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="165" name="param" description="The class to check." type="string" variable="$class">
            <type by_reference="false">string</type>
          </tag>
          <tag line="165" name="return" description="Whether the node or its instance has the class." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="171">
          <name>$class</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="193" package="">
        <name>filter</name>
        <type>function</type>
        <docblock line="180">
          <description><![CDATA[Determines whether the node passes the given conditions.]]></description>
          <long-description><![CDATA[<p>This is called, for example, when querying a branch for particular nodes.
Direct children should first check $this->node->filter(), and return
false if it does, otherwise continue with filtering. Further descendants
should likewise check parent::filter().</p>]]></long-description>
          <tag line="180" name="param" description="A hash of the conditions to pass." type="array" variable="$conditions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="180" name="param" description="The logic." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="180" name="return" description="Wether the node passes (i.e. is not ruled out by) the conditions." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="180" name="see" description="\GoTableaux\Proof\TableauBranch::find()" refers="\GoTableaux\Proof\TableauBranch::find()"/>
        </docblock>
        <argument line="193">
          <name>$conditions</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="193">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="209" package="">
        <name>beforeAttach</name>
        <type>function</type>
        <docblock line="201">
          <description><![CDATA[Called before the node is added to a branch.]]></description>
          <long-description><![CDATA[<p>Implementations should always call parent::beforeAttach().</p>]]></long-description>
          <tag line="201" name="param" description="The branch that the node is to be added to." type="\GoTableaux\Proof\TableauBranch" variable="$branch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
          <tag line="201" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="209">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="223" package="">
        <name>setProperties</name>
        <type>function</type>
        <docblock line="214">
          <description><![CDATA[Called during construct for decorators.]]></description>
          <long-description><![CDATA[<p>Direct children should always call $this->node->setProperties(),
and further descendants should call parent::setProperties().</p>]]></long-description>
          <tag line="214" name="param" description="A hash of properties to set." type="array" variable="$properties">
            <type by_reference="false">array</type>
          </tag>
          <tag line="214" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="223">
          <name>$properties</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux\Proof" line="233" package="">
        <name>getMaster</name>
        <type>function</type>
        <docblock line="228">
          <description><![CDATA[Gets the master decorating node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="228" name="return" description="The master node." type="\GoTableaux\Proof\TableauNode">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Proof/TableauStructure.php" hash="93c9b3fb75b9e3de72e7003ff939ffa4" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <critical line="41" code="50019">No short description for property $tableau</critical>
      <critical line="47" code="50019">No short description for property $nodes</critical>
      <critical line="53" code="50019">No short description for property $tickedNodes</critical>
      <critical line="59" code="50019">No short description for property $structures</critical>
      <critical line="65" code="50019">No short description for property $closed</critical>
      <error line="84" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $node in findBranchesWithNode()</error>
      <error line="162" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $node in nodeIsTicked()</error>
    </parse_markers>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <namespace-alias name="Exception">\GoTableaux\Exception\Tableau</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Proof" line="39" package="GoTableaux">
      <name>TableauStructure</name>
      <full_name>\GoTableaux\Proof\TableauStructure</full_name>
      <extends/>
      <docblock line="27">
        <description><![CDATA[Represents the proper 'tree' structure of a tableau.]]></description>
        <long-description><![CDATA[<p>This is a simple composition structure class which takes a {@link Tableau}
object and creates a tree structure from its branches. Thinking of a branch
as a tuple of nodes, a single node can appear on more than one branch. This
is helpful in applying rules. This class collapses common nodes into one
structure. A structure comprises an array of {@link Node} objects, and an
array of self-similar Structure objects.</p>]]></long-description>
        <tag line="27" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="45" package="Default">
        <name>$tableau</name>
        <default><![CDATA[]]></default>
        <docblock line="41">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="41" name="var" description="" type="\GoTableaux\Proof\Tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="41" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="51" package="Default">
        <name>$nodes</name>
        <default><![CDATA[array()]]></default>
        <docblock line="47">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="var" description="Array of {@link Node} objects." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="47" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="57" package="Default">
        <name>$tickedNodes</name>
        <default><![CDATA[array()]]></default>
        <docblock line="53">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="53" name="var" description="Array of {@link Node} objects." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="53" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="63" package="Default">
        <name>$structures</name>
        <default><![CDATA[array()]]></default>
        <docblock line="59">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="var" description="Array of self-similar objects." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="59" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="69" package="Default">
        <name>$closed</name>
        <default><![CDATA[false]]></default>
        <docblock line="65">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="65" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux\Proof" line="77" package="">
        <name>getInstance</name>
        <type>function</type>
        <docblock line="71">
          <description><![CDATA[Creates an instance from a tableau.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="71" name="param" description="The tableau whose structure to represent." type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="71" name="return" description="New instance." type="\GoTableaux\Proof\Structure">
            <type by_reference="false">\GoTableaux\Proof\Structure</type>
          </tag>
        </docblock>
        <argument line="77">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="GoTableaux\Proof" line="91" package="">
        <name>findBranchesWithNode</name>
        <type>function</type>
        <docblock line="84">
          <description><![CDATA[Gets all branches that have a particular node on them.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="84" name="param" description="Array of {@link Branch}es to search." type="array" variable="$branches">
            <type by_reference="false">array</type>
          </tag>
          <tag line="84" name="param" description="The node to search for." type="\GoTableaux\Proof\Node" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\Node</type>
          </tag>
          <tag line="84" name="return" description="Array of branches." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="91">
          <name>$branches</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="91">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>TableauNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="GoTableaux\Proof" line="102" package="">
        <name>findNodesCommonToBranches</name>
        <type>function</type>
        <docblock line="96">
          <description><![CDATA[Gets all nodes that are on each of an array of branches.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="96" name="param" description="Array of {@link Branch}es." type="array" variable="$branches">
            <type by_reference="false">array</type>
          </tag>
          <tag line="96" name="return" description="Array of common {@link Node}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$branches</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="124" package="">
        <name>setTableau</name>
        <type>function</type>
        <docblock line="118">
          <description><![CDATA[Sets the tableau to represent.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="118" name="param" description="The tableau whose structure to represent." type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="118" name="return" description="Current instance." type="\GoTableaux\Proof\Structure">
            <type by_reference="false">\GoTableaux\Proof\Structure</type>
          </tag>
        </docblock>
        <argument line="124">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="135" package="">
        <name>build</name>
        <type>function</type>
        <docblock line="130">
          <description><![CDATA[Builds the tree structure.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="130" name="return" description="Current instance." type="\GoTableaux\Proof\Structure">
            <type by_reference="false">\GoTableaux\Proof\Structure</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="147" package="">
        <name>getNodes</name>
        <type>function</type>
        <docblock line="142">
          <description><![CDATA[Gets the nodes of the current structure.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="142" name="return" description="Array of {@link Node}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="157" package="">
        <name>getStructures</name>
        <type>function</type>
        <docblock line="152">
          <description><![CDATA[Gets the child structures of the current structure.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="152" name="return" description="Array of {@link Structure}s." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="168" package="">
        <name>nodeIsTicked</name>
        <type>function</type>
        <docblock line="162">
          <description><![CDATA[Checks whether a node is ticked relative to the current structure.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="162" name="param" description="The node to check." type="\GoTableaux\Proof\Node" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\Node</type>
          </tag>
          <tag line="162" name="return" description="Whether the node is ticked." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="168">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>TableauNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Proof" line="178" package="">
        <name>isClosed</name>
        <type>function</type>
        <docblock line="173">
          <description><![CDATA[Checks whether the structure is closed.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="173" name="return" description="Whether the structure is closed." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux\Proof" line="190" package="">
        <name>structurize</name>
        <type>function</type>
        <docblock line="183">
          <description><![CDATA[Recursive structurizing function.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="183" name="param" description="Array of {@link Branch}es to structurize." type="array" variable="$branches">
            <type by_reference="false">array</type>
          </tag>
          <tag line="183" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="183" name="access" description="private"/>
        </docblock>
        <argument line="190">
          <name>$branches</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Proof.php" hash="05dc74cd8a0fc691dcc9e25f0d8549c0" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="51" code="50014">Name of argument $proofSystem does not match with the DocBlock's name $argument in __construct()</error>
      <error line="51" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $proofSystem in __construct()</error>
      <notice line="51" code="50013">Parameter $argument could not be found in __construct()</notice>
      <error line="62" code="50010">No DocBlock was found for method getType()</error>
      <error line="122" code="50010">No DocBlock was found for method getProofSystemType()</error>
      <error line="127" code="50010">No DocBlock was found for method getWriter()</error>
    </parse_markers>
    <class final="false" abstract="true" namespace="GoTableaux" line="29" package="GoTableaux">
      <name>Proof</name>
      <full_name>\GoTableaux\Proof</full_name>
      <extends/>
      <docblock line="24">
        <description><![CDATA[Represents a proof.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="36" package="Default">
        <name>$argument</name>
        <default><![CDATA[]]></default>
        <docblock line="31">
          <description><![CDATA[Reference to the argument for the proof.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="var" description="" type="\GoTableaux\Argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="31" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="43" package="Default">
        <name>$proofSystem</name>
        <default><![CDATA[]]></default>
        <docblock line="38">
          <description><![CDATA[Reference to the proof system.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="" type="\GoTableaux\ProofSystem">
            <type by_reference="false">\GoTableaux\ProofSystem</type>
          </tag>
          <tag line="38" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="49" package="Default">
        <name>$metaSymbolNames</name>
        <default><![CDATA[array()]]></default>
        <docblock line="45">
          <description><![CDATA[Meta proof symbol names.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="57" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="51">
          <description><![CDATA[Constructor. Initializes argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="param" description="Argument for the proof." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="51" name="param" description="The proof system of the proof." type="\GoTableaux\ProofSystem" variable="$proofSystem">
            <type by_reference="false">\GoTableaux\ProofSystem</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$proofSystem</name>
          <default><![CDATA[]]></default>
          <type>ProofSystem</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="62" package="">
        <name>getType</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="74" package="">
        <name>getMetaSymbolNames</name>
        <type>function</type>
        <docblock line="69">
          <description><![CDATA[Gets the meta symbols names.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="69" name="return" description="The meta symbol names." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="85" package="">
        <name>addMetaSymbolNames</name>
        <type>function</type>
        <docblock line="79">
          <description><![CDATA[Adds meta symbol names.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="79" name="param" description="The meta symbol name(s)." type="string|array" variable="$names">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="79" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="85">
          <name>$names</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="95" package="">
        <name>getArgument</name>
        <type>function</type>
        <docblock line="90">
          <description><![CDATA[Gets the Argument object.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="90" name="return" description="The argument." type="\GoTableaux\Argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="106" package="">
        <name>setArgument</name>
        <type>function</type>
        <docblock line="100">
          <description><![CDATA[Sets the argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="100" name="param" description="The argument." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="100" name="return" description="Current instance." type="\GoTableaux\Proof">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
        </docblock>
        <argument line="106">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="117" package="">
        <name>getProofSystem</name>
        <type>function</type>
        <docblock line="112">
          <description><![CDATA[Gets the ProofSystem object.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="112" name="return" description="The proof's proof system." type="\GoTableaux\ProofSystem">
            <type by_reference="false">\GoTableaux\ProofSystem</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="122" package="">
        <name>getProofSystemType</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="127" package="">
        <name>getWriter</name>
        <type>function</type>
        <argument line="127">
          <name>$output</name>
          <default><![CDATA['Simple']]></default>
          <type/>
        </argument>
        <argument line="127">
          <name>$notation</name>
          <default><![CDATA['Standard']]></default>
          <type/>
        </argument>
        <argument line="127">
          <name>$format</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="136" package="">
        <name>isValid</name>
        <type>function</type>
        <docblock line="131">
          <description><![CDATA[Checks whether the proof is valid]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="131" name="return" description="Whether the proof is valid." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ProofSystem/TableauxSystem/Rule/Branch.php" hash="75fdf26dd728123c7b76270277a20d33" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <notice line="55" code="50013">Parameter $logic could not be found in apply()</notice>
      <error line="90" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $branch in buildExample()</error>
    </parse_markers>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <namespace-alias name="Tableau">\GoTableaux\Proof\Tableau</namespace-alias>
    <namespace-alias name="TableauBranch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <class final="false" abstract="true" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="33" package="GoTableaux">
      <name>Branch</name>
      <full_name>\GoTableaux\ProofSystem\TableauxSystem\Rule\Branch</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule</extends>
      <docblock line="29">
        <description><![CDATA[Represents a tableau rule that applies to a branch.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="29" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="43" package="">
        <name>applies</name>
        <type>function</type>
        <docblock line="35">
          <description><![CDATA[Determines whether the rule can apply to the tableau.]]></description>
          <long-description><![CDATA[<p>A branch rule can apply to a tableau when it can apply to an open branch.</p>]]></long-description>
          <tag line="35" name="param" description="The tableau to check." type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="35" name="return" description="Whether the rule can apply." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="43">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="64" package="">
        <name>apply</name>
        <type>function</type>
        <docblock line="55">
          <description><![CDATA[Applies the rule to a tableau.]]></description>
          <long-description><![CDATA[<p>A branch rule applies to the first open branch.</p>]]></long-description>
          <tag line="55" name="param" description="The tableau to which to apply the rule." type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="55" name="param" description="The logic." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="55" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="64">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="81" package="">
        <name>getExample</name>
        <type>function</type>
        <docblock line="75">
          <description><![CDATA[Creates an example tableau for the rule.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="75" name="param" description="The logic." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="75" name="return" description="The example tableau." type="\GoTableaux\Proof\Tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="97" package="">
        <name>buildExample</name>
        <type>function</type>
        <docblock line="90">
          <description><![CDATA[Builds an example branch for the rule.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="90" name="param" description="The branch to build." type="\GoTableaux\ProofSystem\TableauxSystem\Rule\TableauBrach" variable="$branch">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem\Rule\TableauBrach</type>
          </tag>
          <tag line="90" name="param" description="The logic." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="90" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="97">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
        <argument line="97">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="106" package="">
        <name>appliesToBranch</name>
        <type>function</type>
        <docblock line="99">
          <description><![CDATA[Determines whether a rule can apply to a branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="99" name="param" description="The branch to check." type="\GoTableaux\Proof\TableauBranch" variable="$branch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
          <tag line="99" name="param" description="The logic of the proof system." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="99" name="return" description="Whether the rule can apply." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="106">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
        <argument line="106">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="115" package="">
        <name>applyToBranch</name>
        <type>function</type>
        <docblock line="108">
          <description><![CDATA[Applies the rule to an open branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="108" name="param" description="The open branch." type="\GoTableaux\Proof\TableauBranch" variable="$branch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
          <tag line="108" name="param" description="The logic of the proof system." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="108" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="115">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
        <argument line="115">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofSystem/TableauxSystem/Rule/Closure.php" hash="38bc83839cbe94867102db9081b2bf88" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <markers>
      <todo line="54">implement in child classes</todo>
    </markers>
    <parse_markers>
      <error line="45" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $branch in buildExample()</error>
    </parse_markers>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="TableauBranch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <class final="false" abstract="true" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="31" package="GoTableaux">
      <name>Closure</name>
      <full_name>\GoTableaux\ProofSystem\TableauxSystem\Rule\Closure</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Branch</extends>
      <docblock line="27">
        <description><![CDATA[Represents a tableau closure rule.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="GoTableaux"/>
      </docblock>
      <method final="true" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="40" package="">
        <name>applyToBranch</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Closes the branch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="param" description="The open branch." type="\GoTableaux\Proof\TableauBranch" variable="$branch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
          <tag line="33" name="param" description="The logic of the proof system." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="33" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
        <argument line="40">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="52" package="">
        <name>buildExample</name>
        <type>function</type>
        <docblock line="45">
          <description><![CDATA[Builds an example branch for the rule.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="param" description="The branch to build." type="\GoTableaux\ProofSystem\TableauxSystem\Rule\TableauBrach" variable="$branch">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem\Rule\TableauBrach</type>
          </tag>
          <tag line="45" name="param" description="The logic." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="45" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
        <argument line="52">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofSystem/TableauxSystem/Rule/Node.php" hash="ae6cbca662a53855fa3614a83714d770" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="58" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $branch in applyToBranch()</error>
      <error line="81" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $branch in buildExample()</error>
      <error line="113" code="50015">Argument $branch is missing from the Docblock of getApplicableNode()</error>
      <error line="113" code="50015">Argument $logic is missing from the Docblock of getApplicableNode()</error>
      <error line="163" code="50015">Argument $node is missing from the Docblock of appliesToNode()</error>
      <error line="163" code="50015">Argument $branch is missing from the Docblock of appliesToNode()</error>
      <error line="163" code="50015">Argument $logic is missing from the Docblock of appliesToNode()</error>
      <error line="174" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $branch in applyToNode()</error>
    </parse_markers>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="TableauBranch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="TableauNode">\GoTableaux\Proof\TableauNode</namespace-alias>
    <namespace-alias name="TableauException">\GoTableaux\Exception\Tableau</namespace-alias>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <class final="false" abstract="true" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="34" package="GoTableaux">
      <name>Node</name>
      <full_name>\GoTableaux\ProofSystem\TableauxSystem\Rule\Node</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule\Branch</extends>
      <docblock line="30">
        <description><![CDATA[Implements the transitivity rule for a modal tableaux system.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="30" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="40" package="Default">
        <name>$conditions</name>
        <default><![CDATA[array()]]></default>
        <docblock line="36">
          <description><![CDATA[Gives conditions for matching a single node to which the rule applies.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="param" description="array" type="" variable=""/>
        </docblock>
      </property>
      <method final="true" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="51" package="">
        <name>appliesToBranch</name>
        <type>function</type>
        <docblock line="42">
          <description><![CDATA[Determines whether a rule can apply to a branch.]]></description>
          <long-description><![CDATA[<p>A node rule can apply to a branch when it can apply to a node.</p>]]></long-description>
          <tag line="42" name="param" description="The branch to check." type="\GoTableaux\Proof\TableauBranch" variable="$branch">
            <type by_reference="false">\GoTableaux\Proof\TableauBranch</type>
          </tag>
          <tag line="42" name="param" description="The logic of the proof system." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="42" name="return" description="Whether the rule can apply." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
        <argument line="51">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="true" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="68" package="">
        <name>applyToBranch</name>
        <type>function</type>
        <docblock line="58">
          <description><![CDATA[Looks for a node on the branch that meets $this->conditions, and passes
it to applyToNode().]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="param" description="The branch." type="\GoTableaux\ProofSystem\TableauxSystem\Rule\Branch" variable="$branch">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem\Rule\Branch</type>
          </tag>
          <tag line="58" name="param" description="The logic." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="58" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="58" name="throws" description="if there is no node on the branch to which the rule applies." type="\GoTableaux\Exception\Tableau">
            <type by_reference="false">\GoTableaux\Exception\Tableau</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
        <argument line="68">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="true" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="88" package="">
        <name>buildExample</name>
        <type>function</type>
        <docblock line="81">
          <description><![CDATA[Builds an example branch for the rule.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="81" name="param" description="The branch to build." type="\GoTableaux\ProofSystem\TableauxSystem\Rule\TableauBrach" variable="$branch">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem\Rule\TableauBrach</type>
          </tag>
          <tag line="81" name="param" description="The logic." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="81" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="88">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
        <argument line="88">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="108" package="">
        <name>getConditions</name>
        <type>function</type>
        <docblock line="103">
          <description><![CDATA[Gets the conditions. Forces unticked.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="103" name="return" description="The conditions." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="119" package="">
        <name>getApplicableNode</name>
        <type>function</type>
        <docblock line="113">
          <description><![CDATA[Gets the first applicable node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="113" name="return" description="The first applicable node." type="\GoTableaux\Proof\TableauNode">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
          <tag line="113" name="throws" description="when no applicable nodes found." type="\GoTableaux\Exception\Tableau">
            <type by_reference="false">\GoTableaux\Exception\Tableau</type>
          </tag>
        </docblock>
        <argument line="119">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
        <argument line="119">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="133" package="">
        <name>getExampleNode</name>
        <type>function</type>
        <docblock line="126">
          <description><![CDATA[Gets an example node based on the rule's conditions.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="126" name="param" description="The logic." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="126" name="return" description="The example node, or false if no example could be induced." type="\GoTableaux\Proof\TableauNode|boolean">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="133">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="169" package="">
        <name>appliesToNode</name>
        <type>function</type>
        <docblock line="163">
          <description><![CDATA[Determines whether the rule applies to a node.]]></description>
          <long-description><![CDATA[<p>The default implementation is to run a simple find query on the branch
with the rule's conditions.</p>]]></long-description>
        </docblock>
        <argument line="169">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>TableauNode</type>
        </argument>
        <argument line="169">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
        <argument line="169">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="182" package="">
        <name>applyToNode</name>
        <type>function</type>
        <docblock line="174">
          <description><![CDATA[Applies the changes to a branch for an unticked node that meets $this->conditions.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="174" name="param" description="The node to apply the changes." type="\GoTableaux\Proof\TableauNode" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
          <tag line="174" name="param" description="The branch for which the rule is applying." type="\GoTableaux\ProofSystem\TableauxSystem\Rule\Branch" variable="$branch">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem\Rule\Branch</type>
          </tag>
          <tag line="174" name="param" description="The logic of the proof system." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="174" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="182">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>TableauNode</type>
        </argument>
        <argument line="182">
          <name>$branch</name>
          <default><![CDATA[]]></default>
          <type>TableauBranch</type>
        </argument>
        <argument line="182">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofSystem/TableauxSystem/Rule/TableauFinish.php" hash="7f23b12802c9504a4c2ccad059738811" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <notice line="42" code="50013">Parameter $logic could not be found in apply()</notice>
    </parse_markers>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Tableau">\GoTableaux\Proof\Tableau</namespace-alias>
    <namespace-alias name="TableauBranch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <class final="false" abstract="true" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="32" package="GoTableaux">
      <name>TableauFinish</name>
      <full_name>\GoTableaux\ProofSystem\TableauxSystem\Rule\TableauFinish</full_name>
      <extends>\GoTableaux\ProofSystem\TableauxSystem\Rule</extends>
      <docblock line="28">
        <description><![CDATA[Forces finishing of the tableau.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="28" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="49" package="">
        <name>apply</name>
        <type>function</type>
        <docblock line="42">
          <description><![CDATA[Applies the rule to a tableau.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="param" description="The tableau to which to apply the rule." type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="42" name="param" description="The logic." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="42" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem\Rule" line="62" package="">
        <name>getExample</name>
        <type>function</type>
        <docblock line="56">
          <description><![CDATA[Creates an example tableau for the rule.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="param" description="The logic." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="56" name="return" description="The example tableau." type="\GoTableaux\Proof\Tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
        </docblock>
        <argument line="62">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofSystem/TableauxSystem/Rule.php" hash="a63b431f895bfb6f08944c8879b87407" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Tableau">\GoTableaux\Proof\Tableau</namespace-alias>
    <class final="false" abstract="true" namespace="GoTableaux\ProofSystem\TableauxSystem" line="31" package="GoTableaux">
      <name>Rule</name>
      <full_name>\GoTableaux\ProofSystem\TableauxSystem\Rule</full_name>
      <extends/>
      <docblock line="27">
        <description><![CDATA[Represents a tableau rule that applies to a branch.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem" line="42" package="">
        <name>getName</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Gets the logic-qualified name of the rule.]]></description>
          <long-description><![CDATA[<p>The logic name is deduced from the namespace of the rule class. E.g.,
\GoTableaux\Logic\CPL\ProofSystem\Rule\MaterialConditional is rendered
CPL.MaterialConditional.</p>]]></long-description>
          <tag line="33" name="return" description="The name of the rule." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem" line="54" package="">
        <name>applies</name>
        <type>function</type>
        <docblock line="48">
          <description><![CDATA[Determines whether the rule can apply to the tableau.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="48" name="param" description="The tableau to check." type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="48" name="return" description="Whether the rule can apply." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="54">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem" line="62" package="">
        <name>apply</name>
        <type>function</type>
        <docblock line="56">
          <description><![CDATA[Applies the rule to a tableau.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="param" description="The tableau to which to apply the rule." type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="56" name="return" description="Whether the rule did apply." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="62">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux\ProofSystem\TableauxSystem" line="73" package="">
        <name>getExample</name>
        <type>function</type>
        <docblock line="67">
          <description><![CDATA[Creates an example tableau for the rule.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="67" name="param" description="The logic." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="67" name="return" description="The example tableau." type="\GoTableaux\Proof\Tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
        </docblock>
        <argument line="73">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofSystem/TableauxSystem.php" hash="7ea19829a2f161faeffdc811b14fc4a3" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="55" code="50010">No DocBlock was found for method getProofWriter()</error>
      <error line="60" code="50010">No DocBlock was found for method setupTableau()</error>
      <error line="210" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $tableau in isValidProof()</error>
    </parse_markers>
    <namespace-alias name="Settings">\GoTableaux\Settings</namespace-alias>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Argument">\GoTableaux\Argument</namespace-alias>
    <namespace-alias name="Proof">\GoTableaux\Proof</namespace-alias>
    <namespace-alias name="Tableau">\GoTableaux\Proof\Tableau</namespace-alias>
    <namespace-alias name="Branch">\GoTableaux\Proof\TableauBranch</namespace-alias>
    <namespace-alias name="TableauException">\GoTableaux\Exception\Tableau</namespace-alias>
    <namespace-alias name="Rule">\GoTableaux\ProofSystem\TableauxSystem\Rule</namespace-alias>
    <namespace-alias name="ClosureRule">\GoTableaux\ProofSystem\TableauxSystem\Rule\Closure</namespace-alias>
    <namespace-alias name="ProofWriter">\GoTableaux\ProofWriter</namespace-alias>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <namespace-alias name="EventHandler">\GoTableaux\EventHandler</namespace-alias>
    <class final="false" abstract="true" namespace="GoTableaux\ProofSystem" line="41" package="GoTableaux">
      <name>TableauxSystem</name>
      <full_name>\GoTableaux\ProofSystem\TableauxSystem</full_name>
      <extends>\GoTableaux\ProofSystem</extends>
      <docblock line="37">
        <description><![CDATA[Represents a tableaux proof system.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="37" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="47" package="Default">
        <name>$ruleClasses</name>
        <default><![CDATA[array()]]></default>
        <docblock line="43">
          <description><![CDATA[Defines the rule class names for the logic.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="53" package="Default">
        <name>$_rules</name>
        <default><![CDATA[array()]]></default>
        <docblock line="49">
          <description><![CDATA[Holds the tableau rules.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="49" name="var" description="" type="\GoTableaux\ProofSystem\array.">
            <type by_reference="false">\GoTableaux\ProofSystem\array.</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem" line="55" package="">
        <name>getProofWriter</name>
        <type>function</type>
        <argument line="55">
          <name>$output</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="55">
          <name>$notation</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="55">
          <name>$format</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem" line="60" package="">
        <name>setupTableau</name>
        <type>function</type>
        <argument line="60">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux\ProofSystem" line="85" package="">
        <name>addRules</name>
        <type>function</type>
        <docblock line="79">
          <description><![CDATA[Adds tableau rules. Duplicate entries are ignored.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="79" name="param" description="The rule(s) to add." type="\GoTableaux\ProofSystem\TableauxSystem\Rule|array" variable="$rules">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem\Rule</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="79" name="return" description="Current Instance." type="\GoTableaux\ProofSystem\TableauxSystem">
            <type by_reference="false">\GoTableaux\ProofSystem\TableauxSystem</type>
          </tag>
        </docblock>
        <argument line="85">
          <name>$rules</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem" line="106" package="">
        <name>getRules</name>
        <type>function</type>
        <docblock line="97">
          <description><![CDATA[Gets the tableau rules.]]></description>
          <long-description><![CDATA[<p>Lazy instantiation of the rules. Reads $ruleClasses and resolves them
into class names.</p>]]></long-description>
          <tag line="97" name="param" description="Whether to include closure rules." type="boolean" variable="$includeClosure">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="97" name="return" description="The rule instances." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="106">
          <name>$includeClosure</name>
          <default><![CDATA[true]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem" line="135" package="">
        <name>getClosureRules</name>
        <type>function</type>
        <docblock line="130">
          <description><![CDATA[Gets the closure rules.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="130" name="return" description="The rule instances." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem" line="146" package="">
        <name>ruleCanApply</name>
        <type>function</type>
        <docblock line="140">
          <description><![CDATA[Determines whether at least one rule can apply to a tableau.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="140" name="param" description="The tableau to check." type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="140" name="return" description="Whether at least one rule can apply." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="146">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
      </method>
      <method final="true" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem" line="159" package="">
        <name>constructProofForArgument</name>
        <type>function</type>
        <docblock line="153">
          <description><![CDATA[Constructs a proof for an argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="153" name="param" description="The argument." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="153" name="return" description="The tableau proof." type="\GoTableaux\Proof\Tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
        </docblock>
        <argument line="159">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem" line="181" package="">
        <name>step</name>
        <type>function</type>
        <docblock line="175">
          <description><![CDATA[Applies the next applicable rule to the tableau.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="175" name="param" description="The tableau to step." type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="175" name="return" description="True if a rule applied, false if the tableau is finished." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="181">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem" line="202" package="">
        <name>getStages</name>
        <type>function</type>
        <docblock line="195">
          <description><![CDATA[Returns an array of tableaux representing the state of the proof for an
argument at each stage.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="195" name="param" description="The argument whose tableau stages to build." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="195" name="return" description="The stages of the tableau." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="202">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
      </method>
      <method final="true" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofSystem" line="217" package="">
        <name>isValidProof</name>
        <type>function</type>
        <docblock line="210">
          <description><![CDATA[Checks whether a Tableau is a valid proof.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="210" name="param" description="The tableau whose validity to check." type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="210" name="return" description="Whether the tableau is a valid proof." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="210" name="throws" description="ProofException} when $proof is of wrong type." type="\GoTableaux\ProofSystem\{@link">
            <type by_reference="false">\GoTableaux\ProofSystem\{@link</type>
          </tag>
        </docblock>
        <argument line="217">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux\ProofSystem" line="230" package="">
        <name>buildTrunk</name>
        <type>function</type>
        <docblock line="222">
          <description><![CDATA[Constructs the initial list (trunk) for an argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="222" name="param" description="The tableau to attach the" type="\GoTableaux\Proof\Tableau" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof\Tableau</type>
          </tag>
          <tag line="222" name="param" description="The argument for which to build the trunk." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="222" name="param" description="The logic of the proof system." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="222" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="230">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Tableau</type>
        </argument>
        <argument line="230">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
        <argument line="230">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofSystem.php" hash="afb58069a38caf8de513114fd0bc72dc" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="47" code="50010">No DocBlock was found for method getType()</error>
      <error line="66" code="50010">No DocBlock was found for method getProofWriter()</error>
    </parse_markers>
    <class final="false" abstract="true" namespace="GoTableaux" line="28" package="GoTableaux">
      <name>ProofSystem</name>
      <full_name>\GoTableaux\ProofSystem</full_name>
      <extends/>
      <docblock line="24">
        <description><![CDATA[Represents a proof system.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="35" package="Default">
        <name>$logic</name>
        <default><![CDATA[]]></default>
        <docblock line="30">
          <description><![CDATA[Holds a reference to the logic instance.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="\GoTableaux\Logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="30" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="42" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="37">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="param" description="The logic for the proof system to use." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="47" package="">
        <name>getType</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="61" package="">
        <name>getLogic</name>
        <type>function</type>
        <docblock line="54">
          <description><![CDATA[Gets the logic instance.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="return" description="The logic instance." type="\GoTableaux\Logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="54" name="throws" description="ProofException} on empty logic." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
          <tag line="54" name="see" description="\GoTableaux\Logic::__construct()" refers="\GoTableaux\Logic::__construct()"/>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux" line="66" package="">
        <name>getProofWriter</name>
        <type>function</type>
        <argument line="66">
          <name>$output</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="66">
          <name>$notation</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="66">
          <name>$format</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux" line="74" package="">
        <name>constructProofForArgument</name>
        <type>function</type>
        <docblock line="68">
          <description><![CDATA[Constructs a proof for an argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="68" name="param" description="The argument for which to construct the proof." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="68" name="return" description="$proof The constructed proof object." type="\GoTableaux\Proof">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
        </docblock>
        <argument line="74">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux" line="83" package="">
        <name>isValidProof</name>
        <type>function</type>
        <docblock line="76">
          <description><![CDATA[Checks whether a putative proof is valid.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="76" name="param" description="The proof whose validity to check." type="\GoTableaux\Proof" variable="$proof">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="76" name="return" description="Whether the proof is valid." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="76" name="throws" description="ProofException} on type errors." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
        </docblock>
        <argument line="83">
          <name>$proof</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofWriter/Tableau/JSON.php" hash="db6bfe3cbbe11e64efa39ee6f1ff6c78" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Structure">\GoTableaux\Proof\TableauStructure</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\ProofWriter\Tableau" line="30" package="GoTableaux">
      <name>JSON</name>
      <full_name>\GoTableaux\ProofWriter\Tableau\JSON</full_name>
      <extends>\GoTableaux\ProofWriter\Tableau</extends>
      <docblock line="26">
        <description><![CDATA[Represents a JSON tableau proof writer.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="26" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter\Tableau" line="38" package="">
        <name>writeStructure</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[Makes a string representation of a tableau structure.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="param" description="The tableau structure to represent." type="\GoTableaux\Proof\TableauStructure" variable="$structure">
            <type by_reference="false">\GoTableaux\Proof\TableauStructure</type>
          </tag>
          <tag line="32" name="return" description="The string representation of the structure." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="38">
          <name>$structure</name>
          <default><![CDATA[]]></default>
          <type>Structure</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofWriter/Tableau/LaTeX_Qtree.php" hash="8c362de8436148df1c140306eb245d85" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="35" code="50018">No DocBlock was found for property $metaSymbolStrings</error>
      <error line="37" code="50018">No DocBlock was found for property $_metaSymbolStrings</error>
      <error line="47" code="50018">No DocBlock was found for property $_operatorStrings</error>
      <error line="49" code="50010">No DocBlock was found for method writeWorldIndex()</error>
      <error line="54" code="50014">Name of argument $notation does not match with the DocBlock's name $sentenceWriterType in __construct()</error>
      <error line="54" code="50015">Argument $format is missing from the Docblock of __construct()</error>
      <notice line="54" code="50013">Parameter $sentenceWriterType could not be found in __construct()</notice>
    </parse_markers>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Proof">\GoTableaux\Proof</namespace-alias>
    <namespace-alias name="Structure">\GoTableaux\Proof\TableauStructure</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\ProofWriter\Tableau" line="32" package="GoTableaux">
      <name>LaTeX_Qtree</name>
      <full_name>\GoTableaux\ProofWriter\Tableau\LaTeX_Qtree</full_name>
      <extends>\GoTableaux\ProofWriter\Tableau</extends>
      <docblock line="28">
        <description><![CDATA[Writes tableaux using the LaTeX Qtree package.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="28" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="35" package="Default">
        <name>$metaSymbolStrings</name>
        <default><![CDATA[array()]]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="37" package="Default">
        <name>$_metaSymbolStrings</name>
        <default><![CDATA[array(
		'closeMarker' 			=> '\times',
		'designatedMarker' 		=> '+',
		'undesignatedMarker' 	=> '-',
		'worldSymbol' 			=> 'w',
		'accessRelationSymbol' 	=> '\mathcal{R}',
		'tickMarker'			=> '\bullet',
	)]]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="47" package="Default">
        <name>$_operatorStrings</name>
        <default><![CDATA[array()]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter\Tableau" line="49" package="">
        <name>writeWorldIndex</name>
        <type>function</type>
        <argument line="49">
          <name>$index</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter\Tableau" line="63" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="54">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[<p>Decorates the sentence writer with the LaTeX decorator; sets default
LaTeX translations, and removes the tickMarker translation.</p>]]></long-description>
          <tag line="54" name="param" description="The logic with which to initialize the writer." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="54" name="param" description="The sentence notation type to use." type="string" variable="$sentenceWriterType">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
        <argument line="63">
          <name>$notation</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="63">
          <name>$format</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter\Tableau" line="85" package="">
        <name>writeProof</name>
        <type>function</type>
        <docblock line="79">
          <description><![CDATA[Makes a string representation of a proof.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="79" name="param" description="The proof to represent." type="\GoTableaux\Proof" variable="$tableau">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="79" name="return" description="The string representation." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="85">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter\Tableau" line="112" package="">
        <name>writeStructure</name>
        <type>function</type>
        <docblock line="106">
          <description><![CDATA[Makes a string representation of a tableau structure.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="106" name="param" description="The tableau structure to represent." type="\GoTableaux\Proof\TableauStructure" variable="$structure">
            <type by_reference="false">\GoTableaux\Proof\TableauStructure</type>
          </tag>
          <tag line="106" name="return" description="The string representation of the structure." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="112">
          <name>$structure</name>
          <default><![CDATA[]]></default>
          <type>Structure</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofWriter/Tableau/Simple.php" hash="36c79a6072823709dcd4516ea847106a" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Structure">\GoTableaux\Proof\TableauStructure</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\ProofWriter\Tableau" line="30" package="GoTableaux">
      <name>Simple</name>
      <full_name>\GoTableaux\ProofWriter\Tableau\Simple</full_name>
      <extends>\GoTableaux\ProofWriter\Tableau</extends>
      <docblock line="26">
        <description><![CDATA[Represents a simple tableau proof writer.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="26" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter\Tableau" line="38" package="">
        <name>writeStructure</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[Makes a string representation of a tableau structure.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="param" description="The tableau structure to represent." type="\GoTableaux\Proof\TableauStructure" variable="$structure">
            <type by_reference="false">\GoTableaux\Proof\TableauStructure</type>
          </tag>
          <tag line="32" name="return" description="The string representation of the structure." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="38">
          <name>$structure</name>
          <default><![CDATA[]]></default>
          <type>Structure</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofWriter/Tableau.php" hash="585c9d4f6314f27d5fce718e30cd8eab" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="49" code="50010">No DocBlock was found for method writeCloseMarker()</error>
      <error line="54" code="50010">No DocBlock was found for method writeDesignationMarker()</error>
      <error line="59" code="50010">No DocBlock was found for method writeTickMarker()</error>
      <error line="64" code="50010">No DocBlock was found for method writeWorldIndex()</error>
      <error line="95" code="50014">Name of argument $tableau does not match with the DocBlock's name $tableauOrStructure in getArray()</error>
      <notice line="95" code="50013">Parameter $tableauOrStructure could not be found in getArray()</notice>
      <notice line="95" code="50013">Parameter $logic could not be found in getArray()</notice>
      <error line="108" code="50010">No DocBlock was found for method writeProof()</error>
      <error line="168" code="50010">No DocBlock was found for method writeStructure()</error>
    </parse_markers>
    <namespace-alias name="Logic">\GoTableaux\Logic</namespace-alias>
    <namespace-alias name="Proof">\GoTableaux\Proof</namespace-alias>
    <namespace-alias name="SentenceWriter">\GoTableaux\SentenceWriter</namespace-alias>
    <namespace-alias name="TableauStructure">\GoTableaux\Proof\TableauStructure</namespace-alias>
    <namespace-alias name="Node">\GoTableaux\Proof\TableauNode</namespace-alias>
    <class final="false" abstract="true" namespace="GoTableaux\ProofWriter" line="34" package="GoTableaux">
      <name>Tableau</name>
      <full_name>\GoTableaux\ProofWriter\Tableau</full_name>
      <extends>\GoTableaux\ProofWriter</extends>
      <docblock line="30">
        <description><![CDATA[Represents a tableaux writer.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="30" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="40" package="Default">
        <name>$metaSymbolStrings</name>
        <default><![CDATA[array(
		'tickMarker'			=> '^',
		'closeMarker' 			=> '[><]',
		'designatedMarker' 		=> '+',
		'undesignatedMarker' 	=> '-',
		'worldSymbol' 			=> 'w',
		'accessRelationSymbol' 	=> 'R',
	)]]></default>
        <docblock line="36">
          <description><![CDATA[Translations for tableau-wide markings.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="49" package="">
        <name>writeCloseMarker</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="54" package="">
        <name>writeDesignationMarker</name>
        <type>function</type>
        <argument line="54">
          <name>$isDesignated</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="59" package="">
        <name>writeTickMarker</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="64" package="">
        <name>writeWorldIndex</name>
        <type>function</type>
        <argument line="64">
          <name>$index</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="77" package="">
        <name>writeNode</name>
        <type>function</type>
        <docblock line="69">
          <description><![CDATA[Writes a node based on its type.]]></description>
          <long-description><![CDATA[<p>Calls the appropriate functions based on the type of node.</p>]]></long-description>
          <tag line="69" name="param" description="The node to write." type="\GoTableaux\Proof\TableauNode" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
          <tag line="69" name="return" description="The string representation of the node." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="77">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="103" package="">
        <name>getArray</name>
        <type>function</type>
        <docblock line="95">
          <description><![CDATA[Gets a formatted data array of a tableau.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="95" name="param" description="Tableau or Structure object to get data from." type="\GoTableaux\Proof" variable="$tableauOrStructure">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="95" name="param" description="The logic, required if first parameter is a Structure." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="95" name="return" description="Formatted data array." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="103">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="108" package="">
        <name>writeProof</name>
        <type>function</type>
        <argument line="108">
          <name>$tableau</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="119" package="">
        <name>getClassesForNode</name>
        <type>function</type>
        <docblock line="113">
          <description><![CDATA[Gets type information about a node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="113" name="param" description="The node to examine." type="\GoTableaux\Proof\TableauNode" variable="$node">
            <type by_reference="false">\GoTableaux\Proof\TableauNode</type>
          </tag>
          <tag line="113" name="return" description="The classes to which the node belongs." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="119">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="133" package="">
        <name>getArrayForStructure</name>
        <type>function</type>
        <docblock line="126">
          <description><![CDATA[Creates an array structure with tree structure data for exporting.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="126" name="param" description="The tree structure to serialize." type="\GoTableaux\Proof\TableauStructure" variable="$structure">
            <type by_reference="false">\GoTableaux\Proof\TableauStructure</type>
          </tag>
          <tag line="126" name="param" description="" type="integer" variable="$n">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="126" name="return" description="The tree data." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="133">
          <name>$structure</name>
          <default><![CDATA[]]></default>
          <type>TableauStructure</type>
        </argument>
        <argument line="133">
          <name>$n</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux\ProofWriter" line="168" package="">
        <name>writeStructure</name>
        <type>function</type>
        <argument line="168">
          <name>$structure</name>
          <default><![CDATA[]]></default>
          <type>TableauStructure</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ProofWriter.php" hash="ee4f60c913bba533a3de221b9935098d" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="33" code="50018">No DocBlock was found for property $metaSymbolStrings</error>
      <critical line="35" code="50019">No short description for property $sentenceWriter</critical>
      <critical line="40" code="50019">No short description for property $logic</critical>
      <error line="45" code="50014">Name of argument $output does not match with the DocBlock's name $type in getInstance()</error>
      <notice line="45" code="50013">Parameter $type could not be found in getInstance()</notice>
      <error line="63" code="50015">Argument $format is missing from the Docblock of __construct()</error>
    </parse_markers>
    <namespace-alias name="WriterException">\GoTableaux\Exception\Writer</namespace-alias>
    <namespace-alias name="SentenceWriterDecorator">\GoTableaux\SentenceWriter\Decorator</namespace-alias>
    <class final="false" abstract="true" namespace="GoTableaux" line="31" package="GoTableaux">
      <name>ProofWriter</name>
      <full_name>\GoTableaux\ProofWriter</full_name>
      <extends/>
      <docblock line="27">
        <description><![CDATA[Writes proofs.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="33" package="Default">
        <name>$metaSymbolStrings</name>
        <default><![CDATA[array()]]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="38" package="Default">
        <name>$sentenceWriter</name>
        <default><![CDATA[]]></default>
        <docblock line="35">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="var" description="" type="\GoTableaux\SentenceWriter">
            <type by_reference="false">\GoTableaux\SentenceWriter</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="43" package="Default">
        <name>$logic</name>
        <default><![CDATA[]]></default>
        <docblock line="40">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="var" description="" type="\GoTableaux\Logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="55" package="">
        <name>getInstance</name>
        <type>function</type>
        <docblock line="45">
          <description><![CDATA[Gets a child instance.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="param" description="The type of proof." type="string" variable="$proofType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="45" name="param" description="The logic to use." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="45" name="param" description="Proof writer output type." type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="45" name="param" description="The type of sentence writer to use." type="string" variable="$notation">
            <type by_reference="false">string</type>
          </tag>
          <tag line="45" name="param" description="The sentence writer format." type="string" variable="$format">
            <type by_reference="false">string</type>
          </tag>
          <tag line="45" name="return" description="Created instance." type="\GoTableaux\ProofWriter">
            <type by_reference="false">\GoTableaux\ProofWriter</type>
          </tag>
        </docblock>
        <argument line="55">
          <name>$proofType</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="55">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
        <argument line="55">
          <name>$output</name>
          <default><![CDATA['Simple']]></default>
          <type/>
        </argument>
        <argument line="55">
          <name>$notation</name>
          <default><![CDATA['Standard']]></default>
          <type/>
        </argument>
        <argument line="55">
          <name>$format</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="69" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="63">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="param" description="The logic." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="63" name="param" description="The type of sentence writer to use." type="string" variable="$notation">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="69">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
        <argument line="69">
          <name>$notation</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="69">
          <name>$format</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="83" package="">
        <name>writeSentence</name>
        <type>function</type>
        <docblock line="75">
          <description><![CDATA[Writes a sentence.]]></description>
          <long-description><![CDATA[<p>Delegates to sentence writer.</p>]]></long-description>
          <tag line="75" name="param" description="The sentence to write." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="75" name="return" description="The string representation of the sentence." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="83">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="96" package="">
        <name>writeArgumentOfProof</name>
        <type>function</type>
        <docblock line="88">
          <description><![CDATA[Writes a proof's argument.]]></description>
          <long-description><![CDATA[<p>Delegates to $this->sentenceWriter.</p>]]></long-description>
          <tag line="88" name="param" description="The proof whose argument to write." type="\GoTableaux\Proof" variable="$proof">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="88" name="return" description="The string for the argument." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="96">
          <name>$proof</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux" line="107" package="">
        <name>getArray</name>
        <type>function</type>
        <docblock line="101">
          <description><![CDATA[Gets a formatted data array of a proof.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="101" name="param" description="Proof to get data from." type="\GoTableaux\Proof" variable="$proof">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="101" name="return" description="Formatted data array." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="107">
          <name>$proof</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux" line="115" package="">
        <name>writeProof</name>
        <type>function</type>
        <docblock line="109">
          <description><![CDATA[Makes a string representation of a proof.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="109" name="param" description="The proof to represent." type="\GoTableaux\Proof" variable="$proof">
            <type by_reference="false">\GoTableaux\Proof</type>
          </tag>
          <tag line="109" name="return" description="The string representation." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="115">
          <name>$proof</name>
          <default><![CDATA[]]></default>
          <type>Proof</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Sentence/Atomic.php" hash="2018b096207c28aacca6e2c3c8cb3e52" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Exception">\GoTableaux\Exception</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Sentence" line="30" package="GoTableaux">
      <name>Atomic</name>
      <full_name>\GoTableaux\Sentence\Atomic</full_name>
      <extends>\GoTableaux\Sentence</extends>
      <docblock line="26">
        <description><![CDATA[Represents an atomic sentence.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="26" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="36" package="Default">
        <name>$symbolIndex</name>
        <default><![CDATA[]]></default>
        <docblock line="32">
          <description><![CDATA[Atomic symbol index.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="42" package="Default">
        <name>$subscript</name>
        <default><![CDATA[]]></default>
        <docblock line="38">
          <description><![CDATA[Subscript of the atomic symbol.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Sentence" line="50" package="">
        <name>setSymbolIndex</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[Sets the atomic symbol index.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="param" description="The index of the atomic symbol" type="integer" variable="$index">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="44" name="return" description="Current instance." type="\GoTableaux\Sentence\Atomic">
            <type by_reference="false">\GoTableaux\Sentence\Atomic</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$index</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Sentence" line="61" package="">
        <name>getSymbolIndex</name>
        <type>function</type>
        <docblock line="56">
          <description><![CDATA[Gets the atomic symbol index.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="return" description="The index of the atomic symbol" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Sentence" line="72" package="">
        <name>setSubscript</name>
        <type>function</type>
        <docblock line="66">
          <description><![CDATA[Sets the subscript of the atomic symbol.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="66" name="param" description="The subscript." type="integer" variable="$subscript">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="66" name="return" description="Current instance." type="\GoTableaux\Sentence\Atomic">
            <type by_reference="false">\GoTableaux\Sentence\Atomic</type>
          </tag>
        </docblock>
        <argument line="72">
          <name>$subscript</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Sentence" line="84" package="">
        <name>getSubscript</name>
        <type>function</type>
        <docblock line="79">
          <description><![CDATA[Gets the subscript of the atomic symbol.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="79" name="return" description="The subscript." type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Sentence/Molecular.php" hash="36364227f13e544ec57690595eb6db53" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="Sentence">\GoTableaux\Sentence</namespace-alias>
    <namespace-alias name="Operator">\GoTableaux\Operator</namespace-alias>
    <namespace-alias name="Exception">\GoTableaux\Exception</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\Sentence" line="32" package="GoTableaux">
      <name>Molecular</name>
      <full_name>\GoTableaux\Sentence\Molecular</full_name>
      <extends>\GoTableaux\Sentence</extends>
      <docblock line="28">
        <description><![CDATA[Represents a molecular sentence.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="28" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="39" package="Default">
        <name>$operator</name>
        <default><![CDATA[]]></default>
        <docblock line="34">
          <description><![CDATA[Holds an Operator instance.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="var" description="" type="\GoTableaux\Operator">
            <type by_reference="false">\GoTableaux\Operator</type>
          </tag>
          <tag line="34" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="46" package="Default">
        <name>$operands</name>
        <default><![CDATA[array()]]></default>
        <docblock line="41">
          <description><![CDATA[Holds the operands.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="41" name="var" description="Array of {@link Sentence} objects." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="41" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Sentence" line="54" package="">
        <name>setOperator</name>
        <type>function</type>
        <docblock line="48">
          <description><![CDATA[Sets the operator]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="48" name="param" description="The operator object of the sentence." type="\GoTableaux\Operator" variable="$operator">
            <type by_reference="false">\GoTableaux\Operator</type>
          </tag>
          <tag line="48" name="return" description="Current instance." type="\GoTableaux\Sentence\MolecularSentence">
            <type by_reference="false">\GoTableaux\Sentence\MolecularSentence</type>
          </tag>
        </docblock>
        <argument line="54">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type>Operator</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Sentence" line="66" package="">
        <name>addOperand</name>
        <type>function</type>
        <docblock line="60">
          <description><![CDATA[Adds an operand, or many operands.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="60" name="param" description="The operand(s) to add." type="\GoTableaux\Sentence|array" variable="$operand">
            <type by_reference="false">\GoTableaux\Sentence</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="60" name="return" description="Current instance." type="\GoTableaux\Sentence\MolecularSentence">
            <type by_reference="false">\GoTableaux\Sentence\MolecularSentence</type>
          </tag>
        </docblock>
        <argument line="66">
          <name>$operand</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux\Sentence" line="82" package="">
        <name>_addOperand</name>
        <type>function</type>
        <docblock line="75">
          <description><![CDATA[Adds an operand, with type forcing.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="75" name="param" description="" type="\GoTableaux\Sentence" variable="$operand">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="75" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="75" name="access" description="private"/>
        </docblock>
        <argument line="82">
          <name>$operand</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Sentence" line="94" package="">
        <name>getOperator</name>
        <type>function</type>
        <docblock line="89">
          <description><![CDATA[Gets the Operator object.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="89" name="return" description="The sentence's operator." type="\GoTableaux\Operator">
            <type by_reference="false">\GoTableaux\Operator</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Sentence" line="105" package="">
        <name>setOperands</name>
        <type>function</type>
        <docblock line="99">
          <description><![CDATA[Sets the operands.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="99" name="param" description="Array of {@link Sentence}s." type="array" variable="$operands">
            <type by_reference="false">array</type>
          </tag>
          <tag line="99" name="return" description="Current isntace." type="\GoTableaux\Sentence\MolecularSentence">
            <type by_reference="false">\GoTableaux\Sentence\MolecularSentence</type>
          </tag>
        </docblock>
        <argument line="105">
          <name>$operands</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\Sentence" line="117" package="">
        <name>getOperands</name>
        <type>function</type>
        <docblock line="112">
          <description><![CDATA[Gets the operands.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="112" name="return" description="The sentence's operands. An array of {@link Sentence} objects." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Sentence.php" hash="589de3d1f3267c2d802a1f98b1c684c0" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <namespace-alias name="AtomicSentence">\GoTableaux\Sentence\Atomic</namespace-alias>
    <namespace-alias name="MolecularSentence">\GoTableaux\Sentence\Molecular</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux" line="31" package="GoTableaux">
      <name>Sentence</name>
      <full_name>\GoTableaux\Sentence</full_name>
      <extends/>
      <docblock line="27">
        <description><![CDATA[Represents a sentence.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="40" package="">
        <name>createAtomic</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Creates an atomic sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="param" description="The atomic symbol index in the parser." type="integer" variable="$index">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="33" name="param" description="The subscript. Default is 0." type="integer" variable="$subscript">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="33" name="return" description="The created instance." type="\GoTableaux\Sentence\Atomic">
            <type by_reference="false">\GoTableaux\Sentence\Atomic</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$index</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="40">
          <name>$subscript</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="53" package="">
        <name>createMolecular</name>
        <type>function</type>
        <docblock line="46">
          <description><![CDATA[Creates a molecular sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="param" description="Operator instance." type="\GoTableaux\Operator" variable="$operator">
            <type by_reference="false">\GoTableaux\Operator</type>
          </tag>
          <tag line="46" name="param" description="Array of Sentence objects." type="array" variable="$operands">
            <type by_reference="false">array</type>
          </tag>
          <tag line="46" name="return" description="The created instance." type="\GoTableaux\Sentence\Molecular">
            <type by_reference="false">\GoTableaux\Sentence\Molecular</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type>Operator</type>
        </argument>
        <argument line="53">
          <name>$operands</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="64" package="">
        <name>getOperatorName</name>
        <type>function</type>
        <docblock line="59">
          <description><![CDATA[Gets the operator name.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="return" description="The name of the operator, or null if atomic." type="string|null">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="75" package="">
        <name>getArity</name>
        <type>function</type>
        <docblock line="70">
          <description><![CDATA[Gets the arity (0 for atomic).]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="70" name="return" description="The arity of the main connective or 0 for atomic." type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="88" package="">
        <name>sameForm</name>
        <type>function</type>
        <docblock line="81">
          <description><![CDATA[Compares two sentences for form and atomic symbol identity.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="81" name="param" description="The first sentence." type="\GoTableaux\Sentence" variable="$sentence_a">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="81" name="param" description="The second sentence." type="\GoTableaux\Sentence" variable="$sentence_b">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="81" name="return" description="Whether the sentences have the same form and atomic symbols." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="88">
          <name>$sentence_a</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
        <argument line="88">
          <name>$sentence_b</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="112" package="">
        <name>similarForm</name>
        <type>function</type>
        <docblock line="103">
          <description><![CDATA[Checks whether the form of the first sentence is consitent, if less
complex, than the first.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="103" name="param" description="A sentence with the basic form." type="\GoTableaux\Sentence" variable="$super">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="103" name="param" description="The sentence to examine whether it has a form consitent with $super." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="103" name="return" description="Whether the sentences have a similar form." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="112">
          <name>$super</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
        <argument line="112">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="129" package="">
        <name>sameFormInArray</name>
        <type>function</type>
        <docblock line="122">
          <description><![CDATA[Checks whether $haystack has a sentence with the same form as $needle.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="122" name="param" description="The sentence to check." type="\GoTableaux\Sentence" variable="$needle">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="122" name="param" description="Array of {@link Sentence}s to search." type="array" variable="$haystack">
            <type by_reference="false">array</type>
          </tag>
          <tag line="122" name="return" description="Whether a sentence with the same form is found." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="129">
          <name>$needle</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
        <argument line="129">
          <name>$haystack</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="SentenceParser/Polish.php" hash="1f26df4e953adb856a85737d5fc4bb00" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="34" code="50018">No DocBlock was found for property $atomicSymbols</error>
      <error line="36" code="50018">No DocBlock was found for property $operatorNameSymbols</error>
      <error line="62" code="50015">Argument $stack is missing from the Docblock of _readSentences()</error>
    </parse_markers>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <namespace-alias name="ParserException">\GoTableaux\Exception\Parser</namespace-alias>
    <namespace-alias name="Sentence">\GoTableaux\Sentence</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\SentenceParser" line="32" package="GoTableaux">
      <name>Polish</name>
      <full_name>\GoTableaux\SentenceParser\Polish</full_name>
      <extends>\GoTableaux\SentenceParser</extends>
      <docblock line="28">
        <description><![CDATA[Represents the standard sentence parser.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="28" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="34" package="Default">
        <name>$atomicSymbols</name>
        <default><![CDATA[array( 'a', 'b', 'c', 'd', 'e' )]]></default>
      </property>
      <property final="false" static="false" visibility="public" line="36" package="Default">
        <name>$operatorNameSymbols</name>
        <default><![CDATA[array(
		'Negation'	             => 'N',
		'Conjunction'            => 'K',
		'Disjunction'            => 'A',
		'Material Conditional' 	 => 'C',
		'Material Biconditional' => 'E',
		'Conditional'            => 'U',
		'Possibility'            => 'M',
		'Necessity'              => 'L',
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceParser" line="53" package="">
        <name>stringToSentence</name>
        <type>function</type>
        <docblock line="47">
          <description><![CDATA[Creates a {@link Sentence sentence} from a string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="param" description="The string to interpret." type="string" variable="$sentenceStr">
            <type by_reference="false">string</type>
          </tag>
          <tag line="47" name="return" description="The resulting instance." type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$sentenceStr</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="GoTableaux\SentenceParser" line="70" package="">
        <name>_readSentences</name>
        <type>function</type>
        <docblock line="62">
          <description><![CDATA[Reads a string (whitespace stripped) for the first occurrence
of a sentence, adds it to the stack, and returns the length.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="62" name="param" description="The string to read." type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="62" name="return" description="The string length of the sentence read." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="62" name="throws" description="ParserException} on parse error." type="\GoTableaux\SentenceParser\{@link">
            <type by_reference="false">\GoTableaux\SentenceParser\{@link</type>
          </tag>
        </docblock>
        <argument line="70">
          <name>$string</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="70">
          <name>$stack</name>
          <default><![CDATA[array()]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="GoTableaux\SentenceParser" line="103" package="">
        <name>_processStack</name>
        <type>function</type>
        <docblock line="97">
          <description><![CDATA[Shifts an element from the beginning of a stack and makes a sentence object.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="97" name="param" description="The stack." type="array" variable="$stack">
            <type by_reference="false">array</type>
          </tag>
          <tag line="97" name="return" description="" type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
        </docblock>
        <argument line="103">
          <name>$stack</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="SentenceParser/Standard.php" hash="2f91528bc61008ff63c936a039b66d6d" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="35" code="50018">No DocBlock was found for property $atomicSymbols</error>
      <error line="37" code="50018">No DocBlock was found for property $operatorNameSymbols</error>
      <error line="48" code="50018">No DocBlock was found for property $openMark</error>
      <error line="50" code="50018">No DocBlock was found for property $closeMark</error>
      <error line="52" code="50010">No DocBlock was found for method buildSymbolTable()</error>
    </parse_markers>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <namespace-alias name="ParserException">\GoTableaux\Exception\Parser</namespace-alias>
    <namespace-alias name="Sentence">\GoTableaux\Sentence</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\SentenceParser" line="32" package="GoTableaux">
      <name>Standard</name>
      <full_name>\GoTableaux\SentenceParser\Standard</full_name>
      <extends>\GoTableaux\SentenceParser</extends>
      <docblock line="28">
        <description><![CDATA[Represents the standard sentence parser.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="28" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="35" package="Default">
        <name>$atomicSymbols</name>
        <default><![CDATA[array( 'A', 'B', 'C', 'D', 'E' )]]></default>
      </property>
      <property final="false" static="false" visibility="public" line="37" package="Default">
        <name>$operatorNameSymbols</name>
        <default><![CDATA[array(
		'Negation'               => '~',
		'Conjunction'            => '&',
		'Disjunction'            => 'V',
		'Material Conditional'   => '>',
		'Material Biconditional' => '<',
		'Conditional'            => '$',
		'Possibility'            => 'P',
		'Necessity'              => 'N'
	)]]></default>
      </property>
      <property final="false" static="false" visibility="public" line="48" package="Default">
        <name>$openMark</name>
        <default><![CDATA['(']]></default>
      </property>
      <property final="false" static="false" visibility="public" line="50" package="Default">
        <name>$closeMark</name>
        <default><![CDATA[')']]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceParser" line="52" package="">
        <name>buildSymbolTable</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceParser" line="64" package="">
        <name>stringToSentence</name>
        <type>function</type>
        <docblock line="58">
          <description><![CDATA[Creates a {@link Sentence sentence} from a string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="param" description="The string to interpret." type="string" variable="$sentenceStr">
            <type by_reference="false">string</type>
          </tag>
          <tag line="58" name="return" description="The resulting instance." type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
        </docblock>
        <argument line="64">
          <name>$sentenceStr</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="GoTableaux\SentenceParser" line="118" package="">
        <name>_readSentence</name>
        <type>function</type>
        <docblock line="110">
          <description><![CDATA[Reads a string for the first occurrence of a sentence expression.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="110" name="param" description="The string to read." type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="110" name="return" description="The first sentence string." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="110" name="throws" description="ParserException} on parse error." type="\GoTableaux\SentenceParser\{@link">
            <type by_reference="false">\GoTableaux\SentenceParser\{@link</type>
          </tag>
          <tag line="110" name="access" description="private"/>
        </docblock>
        <argument line="118">
          <name>$string</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="GoTableaux\SentenceParser" line="148" package="">
        <name>dropOuterParens</name>
        <type>function</type>
        <docblock line="142">
          <description><![CDATA[Drops outer parentheses from a string, if they exist.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="142" name="param" description="The string to be parsed." type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="142" name="return" description="The resulting string." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="148">
          <name>$string</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="GoTableaux\SentenceParser" line="169" package="">
        <name>closePosFromOpenPos</name>
        <type>function</type>
        <docblock line="160">
          <description><![CDATA[Finds a string's position for the corresponding close mark of an open
mark at the given position.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="160" name="param" description="The string to scan." type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="160" name="param" description="String position of open mark." type="integer" variable="$openPos">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="160" name="return" description="The position of the corresponding close mark." type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="160" name="throws" description="Exception\Parser} on parsing error." type="\GoTableaux\SentenceParser\{@link">
            <type by_reference="false">\GoTableaux\SentenceParser\{@link</type>
          </tag>
        </docblock>
        <argument line="169">
          <name>$string</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="169">
          <name>$openPos</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="GoTableaux\SentenceParser" line="198" package="">
        <name>grabParenGroup</name>
        <type>function</type>
        <docblock line="186">
          <description><![CDATA[Parses first complete parenthesized group in a string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="186" name="param" description="The string to be parsed. Must contain at least one parenthesized group." type="string" variable="$str">
            <type by_reference="false">string</type>
          </tag>
          <tag line="186" name="param" description="Whether to include the outer parentheses in the returned string. Default is false." type="boolean" variable="$includeOuter">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="186" name="param" description="String offset at which to start searching." type="integer" variable="$offset">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="186" name="return" description="Everything inside the first parenthesized group. Includes outer parentheses if $includeOuter is set to true." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="186" name="throws" description="Exception\Parser} on no parentheses in string, or parsing error." type="\GoTableaux\SentenceParser\{@link">
            <type by_reference="false">\GoTableaux\SentenceParser\{@link</type>
          </tag>
        </docblock>
        <argument line="198">
          <name>$str</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="198">
          <name>$includeOuter</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
        <argument line="198">
          <name>$offset</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="SentenceParser.php" hash="2f93f607433136e11495d267197bd594" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="42" code="50018">No DocBlock was found for property $atomicSymbols</error>
      <error line="43" code="50018">No DocBlock was found for property $operatorNameSymbols</error>
      <error line="46" code="50018">No DocBlock was found for property $spaceSymbols</error>
      <error line="49" code="50018">No DocBlock was found for property $operatorSymbolArities</error>
      <error line="52" code="50018">No DocBlock was found for property $operatorSymbolNames</error>
      <critical line="59" code="50019">No short description for property $logic</critical>
      <error line="101" code="50010">No DocBlock was found for method buildSymbolTable()</error>
      <error line="183" code="50010">No DocBlock was found for method getOperatorSymbolNames()</error>
      <error line="188" code="50010">No DocBlock was found for method getLogicOperatorSymbolNames()</error>
    </parse_markers>
    <namespace-alias name="ParserException">\GoTableaux\Exception\Parser</namespace-alias>
    <class final="false" abstract="true" namespace="GoTableaux" line="30" package="GoTableaux">
      <name>SentenceParser</name>
      <full_name>\GoTableaux\SentenceParser</full_name>
      <extends/>
      <docblock line="26">
        <description><![CDATA[Represents a sentence parser.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="26" name="package" description="GoTableaux"/>
      </docblock>
      <constant namespace="GoTableaux" line="33" package="Default">
        <name>OPER_TERNARY</name>
        <value><![CDATA[3]]></value>
      </constant>
      <constant namespace="GoTableaux" line="34" package="Default">
        <name>OPER_BINARY</name>
        <value><![CDATA[2]]></value>
      </constant>
      <constant namespace="GoTableaux" line="35" package="Default">
        <name>OPER_UNARY</name>
        <value><![CDATA[1]]></value>
      </constant>
      <constant namespace="GoTableaux" line="36" package="Default">
        <name>ATOMIC</name>
        <value><![CDATA[0]]></value>
      </constant>
      <constant namespace="GoTableaux" line="37" package="Default">
        <name>PUNCT_OPEN</name>
        <value><![CDATA[-1]]></value>
      </constant>
      <constant namespace="GoTableaux" line="38" package="Default">
        <name>PUNCT_CLOSE</name>
        <value><![CDATA[-2]]></value>
      </constant>
      <constant namespace="GoTableaux" line="39" package="Default">
        <name>PUNCT_SEPARATOR</name>
        <value><![CDATA[-3]]></value>
      </constant>
      <property final="false" static="false" visibility="public" line="42" package="Default">
        <name>$atomicSymbols</name>
        <default><![CDATA[array()]]></default>
      </property>
      <property final="false" static="false" visibility="public" line="43" package="Default">
        <name>$operatorNameSymbols</name>
        <default><![CDATA[array()]]></default>
      </property>
      <property final="false" static="false" visibility="public" line="46" package="Default">
        <name>$spaceSymbols</name>
        <default><![CDATA[array( ' ', "\n", "\t" )]]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="49" package="Default">
        <name>$operatorSymbolArities</name>
        <default><![CDATA[array()]]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="52" package="Default">
        <name>$operatorSymbolNames</name>
        <default><![CDATA[array()]]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="57" package="Default">
        <name>$symbolTable</name>
        <default><![CDATA[array()]]></default>
        <docblock line="54">
          <description><![CDATA[Maps symbols to types.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="62" package="Default">
        <name>$logic</name>
        <default><![CDATA[]]></default>
        <docblock line="59">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="var" description="" type="\GoTableaux\Logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="70" package="">
        <name>getInstance</name>
        <type>function</type>
        <docblock line="64">
          <description><![CDATA[Creates a child instance.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="64" name="param" description="The logic whose operators/arities to use." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="64" name="param" description="The type of parser to create." type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="70">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
        <argument line="70">
          <name>$type</name>
          <default><![CDATA['Standard']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux" line="82" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="76">
          <description><![CDATA[Constructor. Initializes the operators]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="76" name="param" description="The logic (language) for which to parse." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="76" name="throws" description="" type="\GoTableaux\Exception">
            <type by_reference="false">\GoTableaux\Exception</type>
          </tag>
        </docblock>
        <argument line="82">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="101" package="">
        <name>buildSymbolTable</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="118" package="">
        <name>getOperatorBySymbol</name>
        <type>function</type>
        <docblock line="110">
          <description><![CDATA[Gets Operator object by its symbol.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="110" name="param" description="Operator symbol." type="string" variable="$symbol">
            <type by_reference="false">string</type>
          </tag>
          <tag line="110" name="return" description="Operator instance." type="\GoTableaux\Operator">
            <type by_reference="false">\GoTableaux\Operator</type>
          </tag>
          <tag line="110" name="throws" description="ParserException} when $symbol is not an operator symbol in the vocabulary." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
        </docblock>
        <argument line="118">
          <name>$symbol</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="131" package="">
        <name>isOperatorSymbol</name>
        <type>function</type>
        <docblock line="125">
          <description><![CDATA[Tests for a symbol being an operator symbol.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="125" name="param" description="The symbol to check." type="string" variable="$symbol">
            <type by_reference="false">string</type>
          </tag>
          <tag line="125" name="return" description="Whether the symbol is an operator symbol." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="131">
          <name>$symbol</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux" line="148" package="">
        <name>parseAtomic</name>
        <type>function</type>
        <docblock line="136">
          <description><![CDATA[Parses an atomic sentence from a string that starts with an atomic symbol.]]></description>
          <long-description><![CDATA[<p>This provides default functionality for parsing an atomic sentence from a
string that starts with an atomic symbol. If the atomic symbol is followed
by an integer, the sentence's subscript will be assigned the intval of the
remaining string.</p>]]></long-description>
          <tag line="136" name="param" description="The string to parse." type="string" variable="$sentenceStr">
            <type by_reference="false">string</type>
          </tag>
          <tag line="136" name="return" description="The resulting sentence instance." type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="136" name="throws" description="ParserException}." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
        </docblock>
        <argument line="148">
          <name>$sentenceStr</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux" line="164" package="">
        <name>readAtomic</name>
        <type>function</type>
        <docblock line="157">
          <description><![CDATA[Reads an atomic sentence from a string that starts with an atomic symbol.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="157" name="param" description="The string to read." type="string" variable="$sentenceStr">
            <type by_reference="false">string</type>
          </tag>
          <tag line="157" name="return" description="The atomic sentence string." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="157" name="throws" description="ParserException}." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
        </docblock>
        <argument line="164">
          <name>$sentenceStr</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="178" package="">
        <name>removeSeparators</name>
        <type>function</type>
        <docblock line="172">
          <description><![CDATA[Removes separator (space) characters from a string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="172" name="param" description="The string to replace." type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="172" name="return" description="The string with all separators removed." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="178">
          <name>$string</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="183" package="">
        <name>getOperatorSymbolNames</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="188" package="">
        <name>getLogicOperatorSymbolNames</name>
        <type>function</type>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux" line="202" package="">
        <name>stringToSentence</name>
        <type>function</type>
        <docblock line="195">
          <description><![CDATA[Creates a {@link Sentence sentence} instance from a string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="195" name="param" description="The string to interpret." type="string" variable="$sentenceStr">
            <type by_reference="false">string</type>
          </tag>
          <tag line="195" name="return" description="The resulting instance." type="\GoTableaux\Sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="195" name="throws" description="ParserException} on any errors in parsing the input string." type="\GoTableaux\{@link">
            <type by_reference="false">\GoTableaux\{@link</type>
          </tag>
        </docblock>
        <argument line="202">
          <name>$sentenceStr</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="SentenceWriter/Polish/HTML.php" hash="0d9a7f030da1721ca2dd9a0cf3ae2fb8" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="35" code="50010">No DocBlock was found for method writeSubscript()</error>
    </parse_markers>
    <namespace-alias name="Sentence">\GoTableaux\Sentence</namespace-alias>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <namespace-alias name="AtomicSentence">\GoTableaux\Sentence\Atomic</namespace-alias>
    <namespace-alias name="MolecularSentence">\GoTableaux\Sentence\Molecular</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\SentenceWriter\Polish" line="33" package="GoTableaux">
      <name>HTML</name>
      <full_name>\GoTableaux\SentenceWriter\Polish\HTML</full_name>
      <extends>\GoTableaux\SentenceWriter\Standard</extends>
      <docblock line="29">
        <description><![CDATA[Writes sentences in HTML.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="29" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceWriter\Polish" line="35" package="">
        <name>writeSubscript</name>
        <type>function</type>
        <argument line="35">
          <name>$subscript</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="SentenceWriter/Polish/LaTeX.php" hash="62dfea64db0222a21a1fa54669154076" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="30" code="50018">No DocBlock was found for property $operatorStrings</error>
      <error line="41" code="50010">No DocBlock was found for method writeSubscript()</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="GoTableaux\SentenceWriter\Polish" line="28" package="GoTableaux">
      <name>LaTeX</name>
      <full_name>\GoTableaux\SentenceWriter\Polish\LaTeX</full_name>
      <extends>\GoTableaux\SentenceWriter\Polish</extends>
      <docblock line="24">
        <description><![CDATA[Writes sentences in LaTeX.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$operatorStrings</name>
        <default><![CDATA[array(
		'Conjunction' => '\mathsf{K}',
		'Disjunction' => '\mathsf{A}',
		'Negation'	  => '\mathsf{N}',
		'Material Conditional' 		=> '\mathsf{C}',
		'Material Biconditional' 	=> '\mathsf{E}',
		'Conditional' => '\mathsf{U}',
		'Possibility' => '\mathsf{M}',
		'Necessity' => '\mathsf{L}',
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceWriter\Polish" line="41" package="">
        <name>writeSubscript</name>
        <type>function</type>
        <argument line="41">
          <name>$subscript</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="SentenceWriter/Polish.php" hash="7ccb9452fdd62a92b055712bc8bdb173" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="32" code="50018">No DocBlock was found for property $atomicStrings</error>
      <error line="34" code="50018">No DocBlock was found for property $operatorStrings</error>
      <error line="59" code="50010">No DocBlock was found for method writeSubscript()</error>
    </parse_markers>
    <namespace-alias name="MolecularSentence">\GoTableaux\Sentence\Molecular</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\SentenceWriter" line="30" package="GoTableaux">
      <name>Polish</name>
      <full_name>\GoTableaux\SentenceWriter\Polish</full_name>
      <extends>\GoTableaux\SentenceWriter</extends>
      <docblock line="26">
        <description><![CDATA[Writes sentences in Polish notation.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="26" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="32" package="Default">
        <name>$atomicStrings</name>
        <default><![CDATA[array( 'a', 'b', 'c', 'd', 'e' )]]></default>
      </property>
      <property final="false" static="false" visibility="public" line="34" package="Default">
        <name>$operatorStrings</name>
        <default><![CDATA[array(
		'Conjunction' => 'K',
		'Disjunction' => 'A',
		'Negation'	  => 'N',
		'Material Conditional' 		=> 'C',
		'Material Biconditional' 	=> 'E',
		'Possibility' => 'M',
		'Necessity' => 'L',
		'Conditional' => 'U'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceWriter" line="51" package="">
        <name>writeMolecular</name>
        <type>function</type>
        <docblock line="45">
          <description><![CDATA[Makes a string representation of a molecular sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="param" description="The molecular sentence to represent." type="\GoTableaux\Sentence\Molecular" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence\Molecular</type>
          </tag>
          <tag line="45" name="return" description="The string representation of the sentence." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>MolecularSentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceWriter" line="59" package="">
        <name>writeSubscript</name>
        <type>function</type>
        <argument line="59">
          <name>$subscript</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="SentenceWriter/Standard/HTML.php" hash="f1e2f46de9b5dbc572fa073718aa9fe1" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="35" code="50018">No DocBlock was found for property $operatorStrings</error>
      <error line="46" code="50010">No DocBlock was found for method writeSubscript()</error>
    </parse_markers>
    <namespace-alias name="Sentence">\GoTableaux\Sentence</namespace-alias>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <namespace-alias name="AtomicSentence">\GoTableaux\Sentence\Atomic</namespace-alias>
    <namespace-alias name="MolecularSentence">\GoTableaux\Sentence\Molecular</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\SentenceWriter\Standard" line="33" package="GoTableaux">
      <name>HTML</name>
      <full_name>\GoTableaux\SentenceWriter\Standard\HTML</full_name>
      <extends>\GoTableaux\SentenceWriter\Standard</extends>
      <docblock line="29">
        <description><![CDATA[Writes sentences in HTML.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="29" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="35" package="Default">
        <name>$operatorStrings</name>
        <default><![CDATA[array(
		'Conjunction' => '&and;',
		'Disjunction' => '&or;',
		'Negation'	  => '&not;',
		'Material Conditional' 	=> '&sup;',
		'Material Biconditional' => '&equiv;',
		'Conditional' => '&rarr;',
		'Necessity' => '◻',
		'Possibility' => '⟡'
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceWriter\Standard" line="46" package="">
        <name>writeSubscript</name>
        <type>function</type>
        <argument line="46">
          <name>$subscript</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="SentenceWriter/Standard/LaTeX.php" hash="7c79d28aae8ed4546bbe8cce35778ae3" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="35" code="50018">No DocBlock was found for property $operatorStrings</error>
      <error line="46" code="50010">No DocBlock was found for method writeSubscript()</error>
    </parse_markers>
    <namespace-alias name="Sentence">\GoTableaux\Sentence</namespace-alias>
    <namespace-alias name="Utilities">\GoTableaux\Utilities</namespace-alias>
    <namespace-alias name="AtomicSentence">\GoTableaux\Sentence\Atomic</namespace-alias>
    <namespace-alias name="MolecularSentence">\GoTableaux\Sentence\Molecular</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\SentenceWriter\Standard" line="33" package="GoTableaux">
      <name>LaTeX</name>
      <full_name>\GoTableaux\SentenceWriter\Standard\LaTeX</full_name>
      <extends>\GoTableaux\SentenceWriter\Standard</extends>
      <docblock line="29">
        <description><![CDATA[Writes sentences in LaTeX.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="29" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="35" package="Default">
        <name>$operatorStrings</name>
        <default><![CDATA[array(
		'Conjunction' => '\wedge ',
		'Disjunction' => '\vee ',
		'Negation'	  => '\neg ',
		'Material Conditional' 	=> '\supset ',
		'Material Biconditional' => '\equiv ',
		'Conditional' => '\rightarrow ',
		'Necessity' => '\Box ',
		'Possibility' => '\Diamond ',
	)]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceWriter\Standard" line="46" package="">
        <name>writeSubscript</name>
        <type>function</type>
        <argument line="46">
          <name>$subscript</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="SentenceWriter/Standard.php" hash="ed022734a18b2da6f4e3e4c71811b36b" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="34" code="50018">No DocBlock was found for property $atomicStrings</error>
      <error line="36" code="50018">No DocBlock was found for property $operatorStrings</error>
      <error line="47" code="50018">No DocBlock was found for property $options</error>
      <error line="51" code="50018">No DocBlock was found for property $openMarkString</error>
      <error line="52" code="50018">No DocBlock was found for property $closeMarkString</error>
      <error line="53" code="50018">No DocBlock was found for property $spaceString</error>
      <error line="55" code="50010">No DocBlock was found for method writeSentence()</error>
    </parse_markers>
    <namespace-alias name="Sentence">\GoTableaux\Sentence</namespace-alias>
    <namespace-alias name="WriterException">\GoTableaux\Exception\Writer</namespace-alias>
    <namespace-alias name="MolecularSentence">\GoTableaux\Sentence\Molecular</namespace-alias>
    <class final="false" abstract="false" namespace="GoTableaux\SentenceWriter" line="32" package="GoTableaux">
      <name>Standard</name>
      <full_name>\GoTableaux\SentenceWriter\Standard</full_name>
      <extends>\GoTableaux\SentenceWriter</extends>
      <docblock line="28">
        <description><![CDATA[Writes sentences in standard notation.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="28" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="34" package="Default">
        <name>$atomicStrings</name>
        <default><![CDATA[array( 'A', 'B', 'C', 'D', 'E' )]]></default>
      </property>
      <property final="false" static="false" visibility="public" line="36" package="Default">
        <name>$operatorStrings</name>
        <default><![CDATA[array(
		'Negation' => '~',
		'Conjunction' => '&',
		'Disjunction' => 'V',
		'Material Conditional' => '>',
		'Material Biconditional' => '<>',
		'Conditional' => '->',
		'Possibility' => 'P',
		'Necessity' => 'N'
	)]]></default>
      </property>
      <property final="false" static="false" visibility="public" line="47" package="Default">
        <name>$options</name>
        <default><![CDATA[array(
		'dropOuterParentheses' => true,
	)]]></default>
      </property>
      <property final="false" static="false" visibility="public" line="51" package="Default">
        <name>$openMarkString</name>
        <default><![CDATA['(']]></default>
      </property>
      <property final="false" static="false" visibility="public" line="52" package="Default">
        <name>$closeMarkString</name>
        <default><![CDATA[')']]></default>
      </property>
      <property final="false" static="false" visibility="public" line="53" package="Default">
        <name>$spaceString</name>
        <default><![CDATA[' ']]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceWriter" line="55" package="">
        <name>writeSentence</name>
        <type>function</type>
        <argument line="55">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux\SentenceWriter" line="70" package="">
        <name>writeMolecular</name>
        <type>function</type>
        <docblock line="64">
          <description><![CDATA[Makes a string representation of a molecular sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="64" name="param" description="The molecular sentence to represent." type="\GoTableaux\Sentence\Molecular" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence\Molecular</type>
          </tag>
          <tag line="64" name="return" description="The string representation of the sentence." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="70">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>MolecularSentence</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="SentenceWriter.php" hash="79d7f0f77f74e185f5ec9ae49219c55f" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <error line="36" code="50018">No DocBlock was found for property $atomicStrings</error>
      <error line="37" code="50018">No DocBlock was found for property $operatorStrings</error>
      <error line="40" code="50018">No DocBlock was found for property $options</error>
      <error line="80" code="50010">No DocBlock was found for method getNotation()</error>
      <error line="87" code="50010">No DocBlock was found for method getFormat()</error>
    </parse_markers>
    <namespace-alias name="ParserUtilities">\GoTableaux\Utilities\Parser</namespace-alias>
    <namespace-alias name="AtomicSentence">\GoTableaux\Sentence\Atomic</namespace-alias>
    <namespace-alias name="MolecularSentence">\GoTableaux\Sentence\Molecular</namespace-alias>
    <class final="false" abstract="true" namespace="GoTableaux" line="32" package="GoTableaux">
      <name>SentenceWriter</name>
      <full_name>\GoTableaux\SentenceWriter</full_name>
      <extends/>
      <docblock line="28">
        <description><![CDATA[Writes sentences.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="28" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="36" package="Default">
        <name>$atomicStrings</name>
        <default><![CDATA[array()]]></default>
      </property>
      <property final="false" static="false" visibility="public" line="37" package="Default">
        <name>$operatorStrings</name>
        <default><![CDATA[array()]]></default>
      </property>
      <property final="false" static="false" visibility="public" line="40" package="Default">
        <name>$options</name>
        <default><![CDATA[array()]]></default>
      </property>
      <property final="false" static="false" visibility="private" line="47" package="Default">
        <name>$_options</name>
        <default><![CDATA[array( 
		'printZeroSubscripts' => false,
	)]]></default>
        <docblock line="42">
          <description><![CDATA[Holds the options.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="42" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="59" package="">
        <name>getInstance</name>
        <type>function</type>
        <docblock line="51">
          <description><![CDATA[Creates a child instance.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="param" description="The logic for the writer to use." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
          <tag line="51" name="param" description="Type sentence notation." type="string" variable="$notation">
            <type by_reference="false">string</type>
          </tag>
          <tag line="51" name="param" description="The sentence format." type="string" variable="$format">
            <type by_reference="false">string</type>
          </tag>
          <tag line="51" name="return" description="New instance." type="\GoTableaux\SentenceWriter">
            <type by_reference="false">\GoTableaux\SentenceWriter</type>
          </tag>
        </docblock>
        <argument line="59">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
        <argument line="59">
          <name>$notation</name>
          <default><![CDATA['Standard']]></default>
          <type/>
        </argument>
        <argument line="59">
          <name>$format</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="GoTableaux" line="74" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="67">
          <description><![CDATA[Constructor.]]></description>
          <long-description><![CDATA[<p>Sets the logic.</p>]]></long-description>
          <tag line="67" name="param" description="The Logic for the writer to use." type="\GoTableaux\Logic" variable="$logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
        </docblock>
        <argument line="74">
          <name>$logic</name>
          <default><![CDATA[]]></default>
          <type>Logic</type>
        </argument>
      </method>
      <method final="true" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="80" package="">
        <name>getNotation</name>
        <type>function</type>
      </method>
      <method final="true" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="87" package="">
        <name>getFormat</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="99" package="">
        <name>getLogic</name>
        <type>function</type>
        <docblock line="94">
          <description><![CDATA[Gets the logic]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="94" name="return" description="The logic." type="\GoTableaux\Logic">
            <type by_reference="false">\GoTableaux\Logic</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="110" package="">
        <name>getOption</name>
        <type>function</type>
        <docblock line="104">
          <description><![CDATA[Gets the value of a single option.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="104" name="param" description="The name of the option to get." type="string" variable="$option">
            <type by_reference="false">string</type>
          </tag>
          <tag line="104" name="return" description="The value of the option." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="110">
          <name>$option</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="120" package="">
        <name>getOptions</name>
        <type>function</type>
        <docblock line="115">
          <description><![CDATA[Gets all the options.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="115" name="return" description="The options. Key is option name, value is option value." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="132" package="">
        <name>setOption</name>
        <type>function</type>
        <docblock line="125">
          <description><![CDATA[Sets an option.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="125" name="param" description="The option to set." type="string" variable="$option">
            <type by_reference="false">string</type>
          </tag>
          <tag line="125" name="param" description="The value of the option to set." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="125" name="return" description="Current instance." type="\GoTableaux\SentenceWriter">
            <type by_reference="false">\GoTableaux\SentenceWriter</type>
          </tag>
        </docblock>
        <argument line="132">
          <name>$option</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="132">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="144" package="">
        <name>setOptions</name>
        <type>function</type>
        <docblock line="137">
          <description><![CDATA[Sets many options.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="137" name="param" description="Array of options to set. Key is option name, value is option value." type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="137" name="return" description="Current instance." type="\GoTableaux\SentenceWriter">
            <type by_reference="false">\GoTableaux\SentenceWriter</type>
          </tag>
        </docblock>
        <argument line="144">
          <name>$options</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="156" package="">
        <name>writeSubscript</name>
        <type>function</type>
        <docblock line="150">
          <description><![CDATA[Writes a subscript index.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="150" name="param" description="The subscript index to write." type="integer" variable="$subscript">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="150" name="return" description="The string representation of the subscript index." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="156">
          <name>$subscript</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="167" package="">
        <name>writeAtomicSymbolIndex</name>
        <type>function</type>
        <docblock line="161">
          <description><![CDATA[Writes an atomic symbol.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="161" name="param" description="The atomic symbol index to write." type="integer" variable="$index">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="161" name="return" description="The representation of the atomic symbol." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="167">
          <name>$index</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="178" package="">
        <name>writeAtomic</name>
        <type>function</type>
        <docblock line="172">
          <description><![CDATA[Writes an atomic sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="172" name="param" description="The atomic sentence to represent." type="\GoTableaux\Sentence\Atomic" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence\Atomic</type>
          </tag>
          <tag line="172" name="return" description="The string representation of the atomic sentence." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="178">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>AtomicSentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="193" package="">
        <name>writeSentence</name>
        <type>function</type>
        <docblock line="187">
          <description><![CDATA[Makes a string representation of a sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="187" name="param" description="The sentence to write." type="\GoTableaux\Sentence" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence</type>
          </tag>
          <tag line="187" name="return" description="The string representation of the sentence." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="193">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>Sentence</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="205" package="">
        <name>writeSentences</name>
        <type>function</type>
        <docblock line="199">
          <description><![CDATA[Makes an array of string representations of {@link Sentence}s.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="199" name="param" description="The sentences to write." type="array" variable="$sentences">
            <type by_reference="false">array</type>
          </tag>
          <tag line="199" name="return" description="An array of string representations of the sentences." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="205">
          <name>$sentences</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="219" package="">
        <name>getArgumentArray</name>
        <type>function</type>
        <docblock line="213">
          <description><![CDATA[Makes a formatted Argument array.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="213" name="param" description="The argument to format." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="213" name="return" description="Formatted argument array." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="219">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="GoTableaux" line="233" package="">
        <name>writeArgument</name>
        <type>function</type>
        <docblock line="227">
          <description><![CDATA[Makes a string representation of an argument.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="227" name="param" description="The argument to write." type="\GoTableaux\Argument" variable="$argument">
            <type by_reference="false">\GoTableaux\Argument</type>
          </tag>
          <tag line="227" name="return" description="The string representation of the argument." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="233">
          <name>$argument</name>
          <default><![CDATA[]]></default>
          <type>Argument</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="GoTableaux" line="247" package="">
        <name>writeMolecular</name>
        <type>function</type>
        <docblock line="241">
          <description><![CDATA[Makes a string representation of a molecular sentence.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="241" name="param" description="The sentence to write." type="\GoTableaux\Sentence\Molecular" variable="$sentence">
            <type by_reference="false">\GoTableaux\Sentence\Molecular</type>
          </tag>
          <tag line="241" name="return" description="The string representation of the sentence." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="247">
          <name>$sentence</name>
          <default><![CDATA[]]></default>
          <type>MolecularSentence</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Settings.php" hash="b9a5870cbe69aa3072dc977b847bcaae" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="GoTableaux" line="33" package="GoTableaux">
      <name>Settings</name>
      <full_name>\GoTableaux\Settings</full_name>
      <extends/>
      <docblock line="29">
        <description><![CDATA[Stores the settings.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="29" name="package" description="GoTableaux"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="40" package="Default">
        <name>$settings</name>
        <default><![CDATA[]]></default>
        <docblock line="35">
          <description><![CDATA[Holds the settings.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="35" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="48" package="">
        <name>read</name>
        <type>function</type>
        <docblock line="42">
          <description><![CDATA[Reads a setting.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="param" description="The setting to read." type="string" variable="$setting">
            <type by_reference="false">string</type>
          </tag>
          <tag line="42" name="return" description="The setting's value, or null if not set." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="48">
          <name>$setting</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="62" package="">
        <name>write</name>
        <type>function</type>
        <docblock line="55">
          <description><![CDATA[Writes a setting.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="55" name="param" description="The setting to write." type="string" variable="$setting">
            <type by_reference="false">string</type>
          </tag>
          <tag line="55" name="param" description="The value to write." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="55" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="62">
          <name>$setting</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="62">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Utilities.php" hash="a7a99693c124533289e847fb16d902c4" package="Default">
    <docblock line="2">
      <description><![CDATA[GoTableaux. A multi-logic tableaux generator.]]></description>
      <long-description><![CDATA[<p>Copyright (C) 2012  Douglas Owings</p>

<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>

<p>This program is distributed WITHOUT ANY WARRANTY.
See the GNU Affero General Public License for more details.</p>

<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="http://www.gnu.org/licenses/agpl-3.0.html">http://www.gnu.org/licenses/agpl-3.0.html</a>.</p>]]></long-description>
    </docblock>
    <parse_markers>
      <notice line="83" code="50013">Parameter $arr,... could not be found in arraysAreIdentical()</notice>
      <notice line="151" code="50013">Parameter $var,... could not be found in debug()</notice>
      <notice line="175" code="50013">Parameter $var could not be found in debug()</notice>
    </parse_markers>
    <function namespace="GoTableaux" line="181" package="GoTableaux">
      <name>debug</name>
      <type>function</type>
      <docblock line="175">
        <description><![CDATA[Alias for Utilities::debug()]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="175" name="package" description="GoTableaux"/>
        <tag line="175" name="param" description="" type="mixed" variable="$var">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="175" name="return" description="" type="void">
          <type by_reference="false">void</type>
        </tag>
      </docblock>
    </function>
    <class final="false" abstract="false" namespace="GoTableaux" line="28" package="GoTableaux">
      <name>Utilities</name>
      <full_name>\GoTableaux\Utilities</full_name>
      <extends/>
      <docblock line="24">
        <description><![CDATA[Collects general PHP utilities.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="24" name="package" description="GoTableaux"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="37" package="">
        <name>arrayRm</name>
        <type>function</type>
        <docblock line="30">
          <description><![CDATA[Removes an element from an array, if contained.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="param" description="The element to remove." type="mixed" variable="$element">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="30" name="param" description="The array from which to remove the element." type="array" variable="$array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="30" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="37">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="37">
          <name>$array</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="50" package="">
        <name>uniqueAdd</name>
        <type>function</type>
        <docblock line="43">
          <description><![CDATA[Adds an element to an array, if not already contained.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="param" description="The element to add." type="mixed" variable="$element">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="43" name="param" description="The array to which to add the element." type="array" variable="$array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="43" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="50">
          <name>$array</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="61" package="">
        <name>arrayDiff</name>
        <type>function</type>
        <docblock line="54">
          <description><![CDATA[Strictly subtracts one array from the other.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="param" description="The first array." type="array" variable="$a">
            <type by_reference="false">array</type>
          </tag>
          <tag line="54" name="param" description="The array of items to subtract." type="array" variable="$b">
            <type by_reference="false">array</type>
          </tag>
          <tag line="54" name="return" description="The resulting array." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="61">
          <name>$a</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="61">
          <name>$b</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="75" package="">
        <name>arrayUnique</name>
        <type>function</type>
        <docblock line="69">
          <description><![CDATA[Produces a strictly unique array.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="69" name="param" description="The array to make unique." type="array" variable="$arr">
            <type by_reference="false">array</type>
          </tag>
          <tag line="69" name="return" description="The unique array." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$arr</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="90" package="">
        <name>arraysAreIdentical</name>
        <type>function</type>
        <docblock line="83">
          <description><![CDATA[Compares arrays of objects against identity.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="83" name="param" description="Variable list of arrays to compare." type="array" variable="$arr,...">
            <type by_reference="false">array</type>
          </tag>
          <tag line="83" name="return" description="True if each array has the same keys referencing identical objects." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="109" package="">
        <name>sortByStrLen</name>
        <type>function</type>
        <docblock line="102">
          <description><![CDATA[Sorts two strings by their length.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="102" name="param" description="The first string." type="string" variable="$a">
            <type by_reference="false">string</type>
          </tag>
          <tag line="102" name="param" description="The second string." type="string" variable="$b">
            <type by_reference="false">string</type>
          </tag>
          <tag line="102" name="return" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="109">
          <name>$a</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="109">
          <name>$b</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="124" package="">
        <name>strPosArr</name>
        <type>function</type>
        <docblock line="114">
          <description><![CDATA[Searches a string for the first occurrence of any string in a given array.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="114" name="param" description="The string to search." type="string" variable="$haystack">
            <type by_reference="false">string</type>
          </tag>
          <tag line="114" name="param" description="An array of strings to seek." type="array" variable="$needles">
            <type by_reference="false">array</type>
          </tag>
          <tag line="114" name="param" description="The offset of $haystack at which to begin." type="integer" variable="$offset">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="114" name="param" description="&amp;$match Holds the first match." type="string" variable="$match">
            <type by_reference="false">string</type>
          </tag>
          <tag line="114" name="return" description="Position of $haystack at which the first match was found, OR false if no match is found." type="integer|boolean">
            <type by_reference="false">integer</type>
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="124">
          <name>$haystack</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="124">
          <name>$needles</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="124">
          <name>$offset</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
        <argument line="124">
          <name>$match</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="144" package="">
        <name>getBaseClassName</name>
        <type>function</type>
        <docblock line="137">
          <description><![CDATA[Gets the base class name of an object.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="137" name="param" description="The object or class whose base class name to get." type="object|string" variable="$objectOrClass">
            <type by_reference="false">object</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="137" name="return" description="The base class name, e.g. a object of class Space\Cadet will return 'Cadet'." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="144">
          <name>$objectOrClass</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="GoTableaux" line="158" package="">
        <name>debug</name>
        <type>function</type>
        <docblock line="151">
          <description><![CDATA[Prints debugging information, if the debug setting is set to true.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="151" name="param" description="Variables to print information about." type="mixed" variable="$var,...">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="151" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="151" name="see" description="\GoTableaux\config.php" refers="\GoTableaux\config.php"/>
        </docblock>
      </method>
    </class>
  </file>
  <package name="" full_name=""/>
  <package name="Default" full_name="Default"/>
  <package name="GoTableaux" full_name="GoTableaux"/>
  <package name="Logics" full_name="Logics"/>
  <namespace name="GoTableaux" full_name="GoTableaux">
    <namespace name="Exception" full_name="GoTableaux\Exception"/>
    <namespace name="Logic" full_name="GoTableaux\Logic">
      <namespace name="CPL" full_name="GoTableaux\Logic\CPL">
        <namespace name="ProofSystem" full_name="GoTableaux\Logic\CPL\ProofSystem">
          <namespace name="Rule" full_name="GoTableaux\Logic\CPL\ProofSystem\Rule"/>
        </namespace>
      </namespace>
      <namespace name="D" full_name="GoTableaux\Logic\D">
        <namespace name="ProofSystem" full_name="GoTableaux\Logic\D\ProofSystem">
          <namespace name="Rule" full_name="GoTableaux\Logic\D\ProofSystem\Rule"/>
        </namespace>
      </namespace>
      <namespace name="FDE" full_name="GoTableaux\Logic\FDE">
        <namespace name="ProofSystem" full_name="GoTableaux\Logic\FDE\ProofSystem">
          <namespace name="Rule" full_name="GoTableaux\Logic\FDE\ProofSystem\Rule"/>
        </namespace>
      </namespace>
      <namespace name="GO" full_name="GoTableaux\Logic\GO">
        <namespace name="ProofSystem" full_name="GoTableaux\Logic\GO\ProofSystem">
          <namespace name="Rule" full_name="GoTableaux\Logic\GO\ProofSystem\Rule"/>
        </namespace>
      </namespace>
      <namespace name="K" full_name="GoTableaux\Logic\K">
        <namespace name="ProofSystem" full_name="GoTableaux\Logic\K\ProofSystem">
          <namespace name="Rule" full_name="GoTableaux\Logic\K\ProofSystem\Rule"/>
        </namespace>
      </namespace>
      <namespace name="LP" full_name="GoTableaux\Logic\LP">
        <namespace name="ProofSystem" full_name="GoTableaux\Logic\LP\ProofSystem">
          <namespace name="Rule" full_name="GoTableaux\Logic\LP\ProofSystem\Rule"/>
        </namespace>
      </namespace>
      <namespace name="Lukasiewicz" full_name="GoTableaux\Logic\Lukasiewicz">
        <namespace name="ProofSystem" full_name="GoTableaux\Logic\Lukasiewicz\ProofSystem">
          <namespace name="Rule" full_name="GoTableaux\Logic\Lukasiewicz\ProofSystem\Rule"/>
        </namespace>
      </namespace>
      <namespace name="S4" full_name="GoTableaux\Logic\S4">
        <namespace name="ProofSystem" full_name="GoTableaux\Logic\S4\ProofSystem">
          <namespace name="Rule" full_name="GoTableaux\Logic\S4\ProofSystem\Rule"/>
        </namespace>
      </namespace>
      <namespace name="S5" full_name="GoTableaux\Logic\S5">
        <namespace name="ProofSystem" full_name="GoTableaux\Logic\S5\ProofSystem">
          <namespace name="Rule" full_name="GoTableaux\Logic\S5\ProofSystem\Rule"/>
        </namespace>
      </namespace>
      <namespace name="StrongKleene" full_name="GoTableaux\Logic\StrongKleene">
        <namespace name="ProofSystem" full_name="GoTableaux\Logic\StrongKleene\ProofSystem">
          <namespace name="Rule" full_name="GoTableaux\Logic\StrongKleene\ProofSystem\Rule"/>
        </namespace>
      </namespace>
      <namespace name="T" full_name="GoTableaux\Logic\T">
        <namespace name="ProofSystem" full_name="GoTableaux\Logic\T\ProofSystem">
          <namespace name="Rule" full_name="GoTableaux\Logic\T\ProofSystem\Rule"/>
        </namespace>
      </namespace>
    </namespace>
    <namespace name="Proof" full_name="GoTableaux\Proof">
      <namespace name="TableauNode" full_name="GoTableaux\Proof\TableauNode"/>
    </namespace>
    <namespace name="ProofSystem" full_name="GoTableaux\ProofSystem">
      <namespace name="TableauxSystem" full_name="GoTableaux\ProofSystem\TableauxSystem">
        <namespace name="Rule" full_name="GoTableaux\ProofSystem\TableauxSystem\Rule"/>
      </namespace>
    </namespace>
    <namespace name="ProofWriter" full_name="GoTableaux\ProofWriter">
      <namespace name="Tableau" full_name="GoTableaux\ProofWriter\Tableau"/>
    </namespace>
    <namespace name="Sentence" full_name="GoTableaux\Sentence"/>
    <namespace name="SentenceParser" full_name="GoTableaux\SentenceParser"/>
    <namespace name="SentenceWriter" full_name="GoTableaux\SentenceWriter">
      <namespace name="Polish" full_name="GoTableaux\SentenceWriter\Polish"/>
      <namespace name="Standard" full_name="GoTableaux\SentenceWriter\Standard"/>
    </namespace>
  </namespace>
  <marker count="2">todo</marker>
  <deprecated count="0"/>
</project>
